{"version":3,"file":"nft-swap-sdk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils/eth.ts","../src/sdk/v3/types.ts","../src/utils/v3/order.ts","../src/sdk/error.ts","../src/utils/bn/convert.ts","../src/utils/v3/asset-data.ts","../src/contracts/factories/ZeroEx/v3/ExchangeContract__factory.ts","../src/contracts/factories/ZeroEx/v3/Forwarder__factory.ts","../src/contracts/factories/ZeroEx/v4/IZeroEx__factory.ts","../src/contracts/factories/ERC1155__factory.ts","../src/contracts/factories/ERC20__factory.ts","../src/contracts/factories/ERC721__factory.ts","../src/utils/typed-data.ts","../src/utils/v3/eip1271.ts","../src/sdk/v3/pure.ts","../src/utils/v3/default-addresses.ts","../src/utils/v3/gas-buffer.ts","../src/utils/sleep.ts","../src/sdk/v3/NftSwapV3.ts","../src/sdk/v4/constants.ts","../src/sdk/v4/pure.ts","../src/sdk/v4/nft-safe-transfer-from-data.ts","../src/sdk/v4/orderbook.ts","../src/utils/addresses.ts","../src/sdk/v4/enums.ts","../src/sdk/v4/properties.ts","../src/sdk/v4/NftSwapV4.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// import startsWith from 'lodash/startsWith';\nimport { isHexString } from '@ethersproject/bytes';\nimport { getAddress } from '@ethersproject/address';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport const CRYPTO_KITTIES_CONTRACT_ADDRESS =\n  '0x06012c8cf97bead5deae237070f9587f8e7a266d';\n\nexport const ETH_GAS_STATION_API_BASE_URL = 'https://ethgasstation.info';\nexport const ETH_GAS_STATION_GAS_ENDPOINT = `${ETH_GAS_STATION_API_BASE_URL}/json/ethgasAPI.json`;\n\nexport const MAX_UINT256 = BigNumber.from(2).pow(128).sub(1);\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = MAX_UINT256;\nexport const GWEI_IN_WEI = BigNumber.from(1000000000);\nexport const GWEI_IN_ETH = BigNumber.from(1000000000);\n\nexport const ZERO_AMOUNT = BigNumber.from(0);\nexport const ONE_AMOUNT = BigNumber.from(1);\n\nexport const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const NULL_BYTES = '0x';\nexport const BASE_TEN = 10;\n\nexport const ONE_NFT_UNIT = ONE_AMOUNT;\nexport const ZERO_NFT_UNIT = ZERO_AMOUNT;\nexport const DEFAULT_ERC20_TOKEN_DECIMALS = BigNumber.from(18);\n\nexport type Numberish = BigNumber | number | string;\n\nconst isENSAddressFormat = (address: string) => !!address.match(/.+\\..+/g);\n\n// const isHexStringIgnorePrefix = (value: string) => {\n//   const trimmedValue = value.trim();\n//   const updatedValue = addHexPrefix(trimmedValue);\n//   return isHexString(updatedValue);\n// };\n\n// const addHexPrefix = (value: string) =>\n//   startsWith(value, '0x') ? value : `0x${value}`;\n\n// const convertRawAmountToDecimalFormat = (\n//   value: BigNumber,\n//   decimals: Numberish = new BigNumber(18),\n//   maxFormattedDecimals = 4\n// ): string =>\n//    BigNumber.from(value)\n//     .dividedBy(new BigNumber(10).pow(decimals))\n//     .decimalPlaces(maxFormattedDecimals)\n//     .toFormat(maxFormattedDecimals)\n//     .toString();\n\nconst getEthPriceInUsd = async (): Promise<number | undefined> => {\n  const res = await fetch(\n    'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd'\n  );\n  const json = await res.json();\n  return json?.ethereum?.usd;\n};\n\n// const convertGweiToEth = (gweiAmount: BigNumber) => {\n//   const BASE_TEN = 10;\n//   const unit = new BigNumber(BASE_TEN).pow(-9);\n//   const gweiInEth = unit.times(gweiAmount);\n//   return gweiInEth;\n// };\n\n/**\n *\n * @returns gas price in wei (base unit), need to convert to eth\n */\n// const getGasPrice = async (): Promise<BigNumber> => {\n//   try {\n//     const res = await fetch(ETH_GAS_STATION_GAS_ENDPOINT);\n//     const gasInfo = await res.json();\n//     // Eth Gas Station result is gwei * 10\n//     const BASE_TEN = 10;\n//     const gasPriceGwei = new BigNumber(gasInfo.fast / BASE_TEN);\n//     const unit = new BigNumber(BASE_TEN).pow(9);\n//     const gasPriceWei = unit.times(gasPriceGwei);\n//     return gasPriceWei;\n//   } catch (e) {\n//     throw new Error(e as any);\n//   }\n// };\n\n// const toBaseUnitAmount = (amount: Numberish, decimals: number): BigNumber => {\n//   const unit = new BigNumber(BASE_TEN).pow(decimals)\n//   const baseUnitAmount = unit.times(amount)\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0\n//   if (hasDecimals) {\n//     throw new Error(`Invalid unit amount: ${amount.toString(BASE_TEN)} - Too many decimal places`)\n//   }\n//   return baseUnitAmount\n// }\n\nexport interface ObjectMap<T> {\n  [key: string]: T;\n}\n\nconst arrayToMapWithId = <T extends object>(\n  array: T[],\n  idKey: keyof T\n): ObjectMap<T> => {\n  const initialMap: ObjectMap<T> = {};\n  return array.reduce((acc, val) => {\n    const id = val[idKey] as any;\n    acc[id] = val;\n    return acc;\n  }, initialMap);\n};\n\n// const convertAmountToBigNumber = (value: BigNumberIsh): BigNumber => {\n//   const num = value || 0;\n//   const isBigNumber = BigNumber.isBigNumber(num);\n//   if (isBigNumber) {\n//     return num as BigNumber;\n//   }\n\n//   if (isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n//     return new BigNumber(num.replace('0x', ''), 16);\n//   }\n\n//   const baseTen = 10;\n//   return BigNumber.from((num as number).toString(baseTen));\n// };\n\n// const encodeAmountAsHexString = (value: BigNumberIsh): string => {\n//   const valueBigNumber = convertAmountToBigNumber(value);\n//   const hexBase = 16;\n//   const valueHex = valueBigNumber.toString(hexBase);\n\n//   return valueBigNumber.isLessThan(0)\n//     ? `-0x${valueHex.substr(1)}`\n//     : `0x${valueHex}`;\n// };\n\nconst isHexAddressFormat = (address: string): boolean => {\n  if (!isHexString(address)) return false;\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false;\n  }\n  if (\n    /^(0x)?[0-9a-f]{40}$/.test(address) ||\n    /^(0x)?[0-9A-F]{40}$/.test(address)\n  ) {\n    return true;\n  }\n  return true;\n};\n\nexport function getUrlForFallbackTokenIcon(address: string) {\n  let checksummedAddress: string;\n  try {\n    checksummedAddress = getAddress(address);\n  } catch {\n    return null;\n  }\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${checksummedAddress}/logo.png`;\n}\n\n// const getErrorMessageFromErrorCode = (\n//   errorCode?: ERC20_BALANCE_ERROR_CODES | TOKEN_CONTRACT_ERROR_CODES\n// ) => {\n//   if (isNil(errorCode)) {\n//     return;\n//   }\n//   switch (errorCode) {\n//     case TOKEN_CONTRACT_ERROR_CODES.MISSING_CONTRACT_ADDRESS_ERROR:\n//       return 'Token contract address missing';\n//     case TOKEN_CONTRACT_ERROR_CODES.INVALID_CONTRACT_ADDRESS_ERROR:\n//     case VALIDATION_ERROR_CODES.INVALID_CONTRACT_ADDRESS:\n//       return 'Invalid token contract address';\n//     case TOKEN_CONTRACT_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\n//     case BALANCE_CHECK_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\n//       return 'Error loading contract address';\n//     case VALIDATION_ERROR_CODES.INVALID_ADDRESS_FORMAT:\n//       return 'Incorrect wallet address';\n//     case VALIDATION_ERROR_CODES.INVALID_ENS:\n//       return 'Incorrect ENS name';\n//     case VALIDATION_ERROR_CODES.INVALID_HEX_ADDRESS:\n//       return 'Invalid hex address';\n//     case BALANCE_CHECK_ERROR_CODES.BALANCE_LOOKUP_ERROR:\n//       return 'Error looking up token balance';\n//     default:\n//       throw new Error(`Unhandled error code ${errorCode}`);\n//   }\n// };\n\nconst getShortenedAddress = (\n  address: string,\n  start: number = 6,\n  end: number = 4\n) => {\n  const shortenedAddress = `${address.slice(0, start)}...${address.slice(\n    -1 * end\n  )}`;\n  return shortenedAddress;\n};\n\nexport const toUnitAmount = (amount: BigNumber, decimals: number) => {\n  const unit = BigNumber.from(BASE_TEN).pow(decimals);\n\n  const unitAmount = amount.div(unit);\n  // const hasDecimals = unit.() !== 0;\n  // if (hasDecimals) {\n  //   throw new Error(\n  //     `Invalid unit amount: ${amount.toString()}, incorrect decimals ${decimals}`\n  //   );\n  // }\n  return unitAmount;\n};\n\n// export const toBaseUnitAmount = (\n//   amount: Numberish,\n//   decimals: number\n// ): BigNumber => {\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\n//   const baseUnitAmount = unit.mul(amount);\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0;\n//   if (hasDecimals) {\n//     throw new Error(\n//       `Invalid unit amount: ${amount.toString()} - Too many decimal places`\n//     );\n//   }\n//   return baseUnitAmount;\n// };\n\n// export const toNearestBaseUnitAmount = (\n//   amount: BigNumber,\n//   decimals: number\n// ): BigNumber => {\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\n//   const baseUnitAmount = unit.mul(amount);\n//   const nearestBaseUnitAmount = baseUnitAmount.decimalPlaces(0);\n//   return nearestBaseUnitAmount;\n// };\n\n// export const toBaseUnitAmountSafe = (\n//   amount?: BigNumber | string | number,\n//   decimals?: BigNumber | string | number\n// ): BigNumber | undefined => {\n//   if (amount === undefined) {\n//     return undefined;\n//   }\n//   if (decimals === undefined) {\n//     return undefined;\n//   }\n//   return toBaseUnitAmount(\n//     new BigNumber(amount),\n//     new BigNumber(decimals).toNumber()\n//   );\n// };\n\nconst getEtherscanRootUrlForChain = (chainId: number) => {\n  if (chainId === 4) {\n    return 'https://rinkeby.etherscan.io';\n  }\n  return 'https://etherscan.io';\n};\n\nexport const getEtherscanLinkFromTxHash = (txHash: string, chainId: number) => {\n  if (!txHash) {\n    return undefined;\n  }\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\n  const normalizedHash = txHash.replace(/-.*/g, '');\n  const etherscanLink = `${etherscanRoot}/tx/${normalizedHash}`;\n  return etherscanLink;\n};\n\nexport const getEtherscanLinkForAccount = (\n  account: string,\n  chainId: number\n) => {\n  if (!account) {\n    return undefined;\n  }\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\n  const normalizedAccount = account.replace(/-.*/g, '');\n  const etherscanLink = `${etherscanRoot}/address/${normalizedAccount}`;\n  return etherscanLink;\n};\n\n// export const convertGweiToWei = (numInGwei: BigNumber) => {\n//   const numInWei = numInGwei.mul(GWEI_IN_WEI)\n//   return numInWei;\n// };\n\n// export const convertWeiToGwei = (numInWei: BigNumber) => {\n//   const numInGwei = numInWei.div(GWEI_IN_WEI).toFixed(0);\n//   return numInGwei;\n// };\n\nexport {\n  isENSAddressFormat,\n  isHexAddressFormat,\n  // isHexStringIgnorePrefix,\n  // getGasPrice,\n  getEthPriceInUsd,\n  // encodeAmountAsHexString,\n  // convertAmountToBigNumber,\n  arrayToMapWithId,\n  getShortenedAddress,\n  // convertGweiToEth,\n};\n","import type { BigNumber } from '@ethersproject/bignumber';\nimport type { Bytes } from '@ethersproject/bytes';\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport interface AddressesForChainV3 {\n  exchange: string;\n  erc20Proxy: string;\n  erc721Proxy: string;\n  multiAssetProxy: string;\n  erc1155Proxy: string;\n  forwarder: string;\n  wrappedNativeToken?: string | null;\n}\n\nexport type ContractAddresses = {\n  [chainId: string]: AddressesForChainV3;\n};\n\nexport interface Order {\n  makerAddress: string;\n  takerAddress: string;\n  feeRecipientAddress: string;\n  senderAddress: string;\n  makerAssetAmount: string;\n  takerAssetAmount: string;\n  makerFee: string;\n  takerFee: string;\n  expirationTimeSeconds: string;\n  salt: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerFeeAssetData: string;\n  takerFeeAssetData: string;\n  signature?: string;\n}\n\nexport interface SignedOrder extends Order {\n  signature: string;\n}\n\nexport declare enum SignatureType {\n  Illegal = 0,\n  Invalid = 1,\n  EIP712 = 2,\n  EthSign = 3,\n  Wallet = 4,\n  Validator = 5,\n  PreSigned = 6,\n  EIP1271Wallet = 7,\n  NSignatureTypes = 8,\n}\n\nexport enum AssetProxyId {\n  ERC20 = '0xf47261b0',\n  ERC721 = '0x02571792',\n  MultiAsset = '0x94cfcdd7',\n  ERC1155 = '0xa7cb5fb7',\n  StaticCall = '0xc339d10a',\n  ERC20Bridge = '0xdc1600f3',\n}\n\nexport enum SupportedChainIdsV3 {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Ganache = 1337,\n  BSC = 56,\n  Polygon = 137,\n  PolygonMumbai = 80001,\n  Avalanche = 43114,\n}\n\nexport interface OrderInfoV3 {\n  orderStatus: OrderStatusV3;\n  orderHash: string;\n  orderTakerAssetFilledAmount: BigNumber;\n}\n\nexport enum OrderStatusV3 {\n  Invalid = 0,\n  InvalidMakerAssetAmount,\n  InvalidTakerAssetAmount,\n  Fillable,\n  Expired,\n  FullyFilled,\n  Cancelled,\n}\n\nexport const OrderStatusCodeLookup = {\n  0: 'Invalid',\n  1: 'InvalidMakerAssetAmount',\n  2: 'InvalidTakerAssetAmount',\n  3: 'Fillable',\n  4: 'Expired',\n  5: 'FullyFilled',\n  6: 'Cancelled',\n};\n\nexport interface ERC20AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n}\n\nexport interface ERC20BridgeAssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  bridgeAddress: string;\n  bridgeData: string;\n}\n\nexport interface ERC721AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenId: BigNumber;\n}\n\nexport interface ERC1155AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenIds: BigNumber[];\n  tokenValues: BigNumber[];\n  callbackData: string;\n}\n\nexport interface StaticCallAssetData {\n  assetProxyId: string;\n  callTarget: string;\n  staticCallData: string;\n  callResultHash: string;\n}\n\nexport interface ERC1155AssetDataNoProxyId {\n  tokenAddress: string;\n  tokenValues: BigNumber[];\n  tokenIds: BigNumber[];\n  callbackData: string;\n}\n\nexport declare type SingleAssetData =\n  | ERC20AssetData\n  | ERC20BridgeAssetData\n  | ERC721AssetData\n  | ERC1155AssetData\n  | StaticCallAssetData;\n\nexport interface MultiAssetData {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: string[];\n}\n\nexport interface MultiAssetDataWithRecursiveDecoding {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: SingleAssetData[];\n}\n\nexport interface MultiAssetDataWithRecursiveDecoding {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: SingleAssetData[];\n}\n\nexport interface DutchAuctionData {\n  assetData: AssetData;\n  beginTimeSeconds: BigNumber;\n  beginAmount: BigNumber;\n}\n\nexport declare type AssetData =\n  | SingleAssetData\n  | MultiAssetData\n  | MultiAssetDataWithRecursiveDecoding;\n\nexport type AvailableSingleAssetDataTypes =\n  | ERC20AssetData\n  | ERC721AssetData\n  | ERC1155AssetData;\n\nexport type AvailableAssetDataTypes =\n  | AvailableSingleAssetDataTypes\n  | MultiAssetData;\n\nexport interface MultiAssetDataSerialized {\n  assetProxyId: string;\n  amounts: string[];\n  nestedAssetData: string[];\n}\n\n// User facing\nexport interface UserFacingERC20AssetDataSerialized {\n  tokenAddress: string;\n  type: 'ERC20';\n  amount: string;\n}\n\nexport interface UserFacingERC721AssetDataSerialized {\n  tokenAddress: string;\n  tokenId: string;\n  type: 'ERC721';\n}\n\nexport interface UserFacingERC1155AssetDataSerialized {\n  tokenAddress: string;\n  tokens: Array<{ tokenId: string; tokenValue: string }>;\n  type: 'ERC1155';\n}\n\n/**\n * Mimic the erc721 duck type\n */\nexport interface UserFacingERC1155AssetDataSerializedNormalizedSingle {\n  tokenAddress: string;\n  tokenId: string;\n  type: 'ERC1155';\n  amount?: string; // Will default to '1'\n}\n\nexport type UserFacingSerializedSingleAssetDataTypes =\n  | UserFacingERC20AssetDataSerialized\n  | UserFacingERC721AssetDataSerialized\n  | UserFacingERC1155AssetDataSerialized;\n\nexport interface ERC20AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n}\n\nexport interface ERC721AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenId: string;\n}\nexport interface ERC1155AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenIds: string[];\n  tokenValues: string[];\n  callbackData: string;\n}\n\nexport type SerializedSingleAssetDataTypes =\n  | ERC20AssetDataSerialized\n  | ERC721AssetDataSerialized\n  | ERC1155AssetDataSerialized;\n\nexport type SerializedAvailableAssetDataTypes =\n  | SerializedSingleAssetDataTypes\n  | MultiAssetDataSerialized;\n\nexport interface MultiAssetDataSerializedRecursivelyDecoded {\n  assetProxyId: string;\n  amounts: string[];\n  nestedAssetData: SerializedSingleAssetDataTypes[];\n}\n\nexport type SerializedAvailableAssetDataTypesDecoded =\n  | SerializedSingleAssetDataTypes\n  | MultiAssetDataSerializedRecursivelyDecoded;\n\nexport enum ORDER_BUILDER_ERROR_CODES {\n  MISSING_CONTRACT_WRAPPERS_ERROR = 'MISSING_CONTRACT_WRAPPERS_ERROR',\n}\n\nexport enum SupportedTokenTypes {\n  ERC20 = 'ERC20',\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n}\n\nexport type SupportedTokenTypesType =\n  | SupportedTokenTypes.ERC20\n  | SupportedTokenTypes.ERC721\n  | SupportedTokenTypes.ERC1155;\n\nexport interface TradeableAssetItem<TMetadata = any> {\n  amount: string;\n  userInputtedAmount?: string;\n  assetData: SerializedSingleAssetDataTypes;\n  type: SupportedTokenTypesType;\n  id: string; // unique id\n  metadata?: TMetadata;\n}\n\n// Convenience type wrappers\nexport interface Erc20TradeableAsset extends TradeableAssetItem {\n  assetData: ERC20AssetDataSerialized;\n  type: SupportedTokenTypes.ERC20;\n}\n\nexport interface Erc721TradeableAsset extends TradeableAssetItem {\n  assetData: ERC721AssetDataSerialized;\n  type: SupportedTokenTypes.ERC721;\n}\n\nexport interface Erc1155TradeableAsset extends TradeableAssetItem {\n  assetData: ERC1155AssetDataSerialized;\n  type: SupportedTokenTypes.ERC1155;\n}\n\nexport type AvailableTradeableAssets =\n  | Erc20TradeableAsset\n  | Erc721TradeableAsset\n  | Erc1155TradeableAsset;\n\nexport interface AdditionalOrderConfig {\n  makerAddress: string; // only field required\n  chainId?: number;\n  takerAddress?: string;\n  expiration?: Date | number;\n  exchangeAddress?: string;\n  salt?: string;\n  feeRecipientAddress?: string;\n  makerFeeAssetData?: string;\n  takerFeeAssetData?: string;\n  makerFee?: string;\n}\n\nexport interface ZeroExOrder {\n  makerAddress: string;\n  takerAddress: string;\n  feeRecipientAddress: string;\n  senderAddress: string;\n  makerAssetAmount: string;\n  takerAssetAmount: string;\n  makerFee: string;\n  takerFee: string;\n  expirationTimeSeconds: string;\n  salt: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerFeeAssetData: string;\n  takerFeeAssetData: string;\n}\n\nexport interface ZeroExSignedOrder extends ZeroExOrder {\n  signature: string;\n}\n\nexport interface EipDomain {\n  name: string;\n  version: string;\n  chainId: string;\n  verifyingContract: string;\n}\n\nexport interface TypedData {\n  domain: EipDomain;\n  types: {\n    Order: {\n      name: string;\n      type: string;\n    }[];\n  };\n  value: Order;\n}\n\nexport const EIP712_TYPES = {\n  Order: [\n    { name: 'makerAddress', type: 'address' },\n    { name: 'takerAddress', type: 'address' },\n    { name: 'feeRecipientAddress', type: 'address' },\n    { name: 'senderAddress', type: 'address' },\n    { name: 'makerAssetAmount', type: 'uint256' },\n    { name: 'takerAssetAmount', type: 'uint256' },\n    { name: 'makerFee', type: 'uint256' },\n    { name: 'takerFee', type: 'uint256' },\n    { name: 'expirationTimeSeconds', type: 'uint256' },\n    { name: 'salt', type: 'uint256' },\n    { name: 'makerAssetData', type: 'bytes' },\n    { name: 'takerAssetData', type: 'bytes' },\n    { name: 'makerFeeAssetData', type: 'bytes' },\n    { name: 'takerFeeAssetData', type: 'bytes' },\n  ],\n};\n\nexport type SwappableAsset =\n  | UserFacingERC20AssetDataSerialized\n  | UserFacingERC721AssetDataSerialized\n  | UserFacingERC1155AssetDataSerializedNormalizedSingle;\n\nexport enum RevertReason {\n  OrderUnfillable = 'ORDER_UNFILLABLE',\n  InvalidMaker = 'INVALID_MAKER',\n  InvalidTaker = 'INVALID_TAKER',\n  InvalidSender = 'INVALID_SENDER',\n  InvalidOrderSignature = 'INVALID_ORDER_SIGNATURE',\n  InvalidTakerAmount = 'INVALID_TAKER_AMOUNT',\n  DivisionByZero = 'DIVISION_BY_ZERO',\n  RoundingError = 'ROUNDING_ERROR',\n  InvalidSignature = 'INVALID_SIGNATURE',\n  SignatureIllegal = 'SIGNATURE_ILLEGAL',\n  SignatureInvalid = 'SIGNATURE_INVALID',\n  SignatureUnsupported = 'SIGNATURE_UNSUPPORTED',\n  TakerOverpay = 'TAKER_OVERPAY',\n  OrderOverfill = 'ORDER_OVERFILL',\n  InvalidFillPrice = 'INVALID_FILL_PRICE',\n  InvalidNewOrderEpoch = 'INVALID_NEW_ORDER_EPOCH',\n  CompleteFillFailed = 'COMPLETE_FILL_FAILED',\n  NegativeSpreadRequired = 'NEGATIVE_SPREAD_REQUIRED',\n  ReentrancyIllegal = 'REENTRANCY_ILLEGAL',\n  InvalidTxHash = 'INVALID_TX_HASH',\n  InvalidTxSignature = 'INVALID_TX_SIGNATURE',\n  FailedExecution = 'FAILED_EXECUTION',\n  LengthGreaterThan0Required = 'LENGTH_GREATER_THAN_0_REQUIRED',\n  LengthGreaterThan3Required = 'LENGTH_GREATER_THAN_3_REQUIRED',\n  LengthGreaterThan131Required = 'LENGTH_GREATER_THAN_131_REQUIRED',\n  Length0Required = 'LENGTH_0_REQUIRED',\n  Length65Required = 'LENGTH_65_REQUIRED',\n  InvalidAmount = 'INVALID_AMOUNT',\n  TransferFailed = 'TRANSFER_FAILED',\n  SenderNotAuthorized = 'SENDER_NOT_AUTHORIZED',\n  TargetNotAuthorized = 'TARGET_NOT_AUTHORIZED',\n  TargetAlreadyAuthorized = 'TARGET_ALREADY_AUTHORIZED',\n  IndexOutOfBounds = 'INDEX_OUT_OF_BOUNDS',\n  AuthorizedAddressMismatch = 'AUTHORIZED_ADDRESS_MISMATCH',\n  OnlyContractOwner = 'ONLY_CONTRACT_OWNER',\n  MakerNotWhitelisted = 'MAKER_NOT_WHITELISTED',\n  TakerNotWhitelisted = 'TAKER_NOT_WHITELISTED',\n  AssetProxyDoesNotExist = 'ASSET_PROXY_DOES_NOT_EXIST',\n  LengthMismatch = 'LENGTH_MISMATCH',\n  LibBytesGreaterThanZeroLengthRequired = 'GREATER_THAN_ZERO_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo4LengthRequired = 'GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo20LengthRequired = 'GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo32LengthRequired = 'GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualToNestedBytesLengthRequired = 'GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualToSourceBytesLengthRequired = 'GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED',\n  Erc20InsufficientBalance = 'ERC20_INSUFFICIENT_BALANCE',\n  Erc20InsufficientAllowance = 'ERC20_INSUFFICIENT_ALLOWANCE',\n  FeePercentageTooLarge = 'FEE_PERCENTAGE_TOO_LARGE',\n  ValueGreaterThanZero = 'VALUE_GREATER_THAN_ZERO',\n  InvalidMsgValue = 'INVALID_MSG_VALUE',\n  InsufficientEthRemaining = 'INSUFFICIENT_ETH_REMAINING',\n  Uint256Overflow = 'UINT256_OVERFLOW',\n  Erc721ZeroToAddress = 'ERC721_ZERO_TO_ADDRESS',\n  Erc721OwnerMismatch = 'ERC721_OWNER_MISMATCH',\n  Erc721InvalidSpender = 'ERC721_INVALID_SPENDER',\n  Erc721ZeroOwner = 'ERC721_ZERO_OWNER',\n  Erc721InvalidSelector = 'ERC721_INVALID_SELECTOR',\n  WalletError = 'WALLET_ERROR',\n  ValidatorError = 'VALIDATOR_ERROR',\n  InvalidFunctionSelector = 'INVALID_FUNCTION_SELECTOR',\n  InvalidAssetData = 'INVALID_ASSET_DATA',\n  InvalidAssetProxy = 'INVALID_ASSET_PROXY',\n  UnregisteredAssetProxy = 'UNREGISTERED_ASSET_PROXY',\n  TxFullyConfirmed = 'TX_FULLY_CONFIRMED',\n  TxNotFullyConfirmed = 'TX_NOT_FULLY_CONFIRMED',\n  TimeLockIncomplete = 'TIME_LOCK_INCOMPLETE',\n  InvalidFreeMemoryPtr = 'INVALID_FREE_MEMORY_PTR',\n  AuctionInvalidAmount = 'INVALID_AMOUNT',\n  AuctionExpired = 'AUCTION_EXPIRED',\n  AuctionNotStarted = 'AUCTION_NOT_STARTED',\n  AuctionInvalidBeginTime = 'INVALID_BEGIN_TIME',\n  InvalidAssetDataEnd = 'INVALID_ASSET_DATA_END',\n  InvalidOrBlockedExchangeSelector = 'INVALID_OR_BLOCKED_EXCHANGE_SELECTOR',\n  BalanceQueryFailed = 'BALANCE_QUERY_FAILED',\n  AtLeastOneAddressDoesNotMeetBalanceThreshold = 'AT_LEAST_ONE_ADDRESS_DOES_NOT_MEET_BALANCE_THRESHOLD',\n  FromLessThanToRequired = 'FROM_LESS_THAN_TO_REQUIRED',\n  ToLessThanLengthRequired = 'TO_LESS_THAN_LENGTH_REQUIRED',\n  InvalidApprovalSignature = 'INVALID_APPROVAL_SIGNATURE',\n  ApprovalExpired = 'APPROVAL_EXPIRED',\n  InvalidOrigin = 'INVALID_ORIGIN',\n  AmountEqualToOneRequired = 'AMOUNT_EQUAL_TO_ONE_REQUIRED',\n  BadReceiverReturnValue = 'BAD_RECEIVER_RETURN_VALUE',\n  CannotTransferToAddressZero = 'CANNOT_TRANSFER_TO_ADDRESS_ZERO',\n  InsufficientAllowance = 'INSUFFICIENT_ALLOWANCE',\n  NFTNotOwnedByFromAddress = 'NFT_NOT_OWNED_BY_FROM_ADDRESS',\n  OwnersAndIdsMustHaveSameLength = 'OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH',\n  TokenAndValuesLengthMismatch = 'TOKEN_AND_VALUES_LENGTH_MISMATCH',\n  TransferRejected = 'TRANSFER_REJECTED',\n  Uint256Underflow = 'UINT256_UNDERFLOW',\n  InvalidIdsOffset = 'INVALID_IDS_OFFSET',\n  InvalidValuesOffset = 'INVALID_VALUES_OFFSET',\n  InvalidDataOffset = 'INVALID_DATA_OFFSET',\n  InvalidAssetDataLength = 'INVALID_ASSET_DATA_LENGTH',\n  InvalidStaticCallDataOffset = 'INVALID_STATIC_CALL_DATA_OFFSET',\n  TargetNotEven = 'TARGET_NOT_EVEN',\n  UnexpectedStaticCallResult = 'UNEXPECTED_STATIC_CALL_RESULT',\n  TransfersSuccessful = 'TRANSFERS_SUCCESSFUL',\n  InsufficientFunds = 'INSUFFICIENT_FUNDS',\n  TxAlreadyExecuted = 'TX_ALREADY_EXECUTED',\n  DefaultTimeLockIncomplete = 'DEFAULT_TIME_LOCK_INCOMPLETE',\n  CustomTimeLockIncomplete = 'CUSTOM_TIME_LOCK_INCOMPLETE',\n  EqualLengthsRequired = 'EQUAL_LENGTHS_REQUIRED',\n  OnlyCallableByWallet = 'ONLY_CALLABLE_BY_WALLET',\n}\n\nexport type AvailableSignatureTypesV3 = 'eoa' | 'eip1271';\n\nexport interface SigningOptionsV3 {\n  signatureType: AvailableSignatureTypesV3; // | 'autodetect' ? and remove autodetectSignatureType maybe?\n  autodetectSignatureType: boolean;\n}\n","import getUnixTime from 'date-fns/getUnixTime';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\nimport { NULL_ADDRESS, NULL_BYTES, ZERO_AMOUNT } from '../eth';\nimport {\n  Order,\n  EipDomain,\n  EIP712_TYPES,\n  ZeroExOrder,\n} from '../../sdk/v3/types';\n\nexport const TRADER_ADDRESS_IDENTIFIER =\n  '0xBCC02a155c374263321155555Ccf41070017649e';\n\nexport const INFINITE_TIMESTAMP_SEC = BigNumber.from(2524604400);\n\nexport const getEipDomain = (\n  chainId: number,\n  exchangeContractAddress: string\n): EipDomain => ({\n  name: '0x Protocol',\n  version: '3.0.0',\n  chainId: chainId.toString(10),\n  verifyingContract: exchangeContractAddress,\n});\n\nexport const hashOrder = (\n  order: Order,\n  chainId: number,\n  exchangeContractAddress: string\n): string =>\n  _TypedDataEncoder.hash(\n    getEipDomain(chainId, exchangeContractAddress),\n    EIP712_TYPES,\n    order\n  );\n\nexport const normalizeOrder = (order: Order): Order => {\n  return {\n    makerAddress: order.makerAddress.toLowerCase(),\n    takerAddress: order.takerAddress.toLowerCase(),\n    feeRecipientAddress: order.feeRecipientAddress.toLowerCase(),\n    senderAddress: order.senderAddress.toLowerCase(),\n    makerAssetAmount: order.makerAssetAmount.toString(),\n    takerAssetAmount: order.takerAssetAmount.toString(),\n    makerFee: order.makerFee.toString(),\n    takerFee: order.takerFee.toString(),\n    expirationTimeSeconds: order.expirationTimeSeconds.toString(),\n    salt: order.salt.toString(),\n    makerAssetData: order.makerAssetData.toLowerCase(),\n    takerAssetData: order.takerAssetData.toLowerCase(),\n    makerFeeAssetData: order.makerFeeAssetData.toLowerCase(),\n    takerFeeAssetData: order.takerFeeAssetData.toLowerCase(),\n    signature: order.signature?.toLowerCase(),\n  };\n};\n\nexport const generateOrderFromAssetDatas = (orderConfig: {\n  makerAddress: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerAssetAmount: BigNumber;\n  takerAssetAmount: BigNumber;\n  exchangeAddress: string;\n  // Rest of params optional\n  takerAddress?: string;\n  expiration?: Date | number;\n  salt?: string;\n  feeRecipientAddress?: string;\n  makerFeeAssetData?: string;\n  takerFeeAssetData?: string;\n  makerFee?: string;\n  takerFee?: string;\n}): Order => {\n  const {\n    makerAssetAmount,\n    takerAssetAmount,\n    makerAddress,\n    makerAssetData,\n    takerAssetData,\n    takerAddress,\n    expiration,\n    salt,\n    feeRecipientAddress,\n    makerFeeAssetData,\n    takerFeeAssetData,\n    makerFee,\n    takerFee,\n  } = orderConfig;\n\n  const expirationTimeSeconds = expiration\n    ? BigNumber.from(getUnixTime(expiration))\n    : INFINITE_TIMESTAMP_SEC;\n\n  const order: ZeroExOrder = {\n    makerAddress,\n    makerAssetAmount: makerAssetAmount.toString(),\n    makerAssetData,\n    takerAddress: takerAddress || NULL_ADDRESS,\n    takerAssetAmount: takerAssetAmount.toString(),\n    takerAssetData,\n    expirationTimeSeconds: expirationTimeSeconds.toString(),\n    // Stuff that doesn't really matter but is required\n    senderAddress: NULL_ADDRESS,\n    feeRecipientAddress: feeRecipientAddress ?? TRADER_ADDRESS_IDENTIFIER,\n    salt: salt ?? generateSaltHash(),\n    makerFeeAssetData: makerFeeAssetData ?? NULL_BYTES,\n    takerFeeAssetData: takerFeeAssetData ?? NULL_BYTES,\n    makerFee: makerFee ?? ZERO_AMOUNT.toString(),\n    takerFee: takerFee ?? ZERO_AMOUNT.toString(),\n  };\n\n  return order;\n};\n\nexport const generateTimeBasedSalt = () => {\n  const unixTime = getUnixTime(new Date());\n  return unixTime.toString(10);\n};\n\nconst generateSaltHash = (manualSaltHashToUse?: string): string => {\n  if (manualSaltHashToUse) {\n    return manualSaltHashToUse;\n  }\n  return generateTimeBasedSalt();\n};\n","// Better error objects with codes\n// Sourced from https://github.com/vweevers/module-error\n\ninterface ErrorOptions {\n  code?: string;\n  cause?: Error;\n  expected?: boolean;\n  transient?: boolean;\n}\n\nclass ModuleError extends Error {\n  code: string | undefined;\n  expected: boolean | undefined;\n  transient: boolean | undefined;\n  cause: Error | undefined;\n  /**\n   * @param {string} message Error message\n   * @param {{ code?: string, cause?: Error, expected?: boolean, transient?: boolean }} [options]\n   */\n  constructor(message: string, options: ErrorOptions) {\n    super(message || '');\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.code) this.code = String(options.code);\n      if (options.expected) this.expected = true;\n      if (options.transient) this.transient = true;\n      if (options.cause) this.cause = options.cause;\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nclass UnexpectedAssetTypeError extends ModuleError {\n  constructor(assetType: string) {\n    const code = 'UnexpectedAssetTypeError';\n    super(`Unexpected asset type ${assetType ?? 'unknown'}`, {\n      expected: true,\n      code,\n    });\n    this.name = code;\n  }\n}\n\nclass UnsupportedChainId extends ModuleError {\n  constructor(chainId: number) {\n    const code = 'UnsupportedChainId';\n    super(\n      `Unexpected chainId ${chainId}. If you want to use that chain, please provide custom zeroex addresses`,\n      {\n        expected: true,\n        code,\n      }\n    );\n    this.name = code;\n  }\n}\n\nexport { ModuleError, UnexpectedAssetTypeError, UnsupportedChainId };\n","import { BigNumber } from '@ethersproject/bignumber';\n\nexport const convertStringToBN = (s: string) => {\n  return BigNumber.from(s);\n};\n\nexport const convertCollectionToBN = (arr: string[]) => {\n  return arr.map(convertStringToBN);\n};\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { hexConcat, hexDataLength, hexDataSlice } from '@ethersproject/bytes';\nimport { defaultAbiCoder } from '@ethersproject/abi';\n\nimport {\n  AssetProxyId,\n  ERC1155AssetDataSerialized,\n  ERC20AssetDataSerialized,\n  ERC721AssetDataSerialized,\n  MultiAssetDataSerializedRecursivelyDecoded,\n  SerializedAvailableAssetDataTypes,\n  SerializedAvailableAssetDataTypesDecoded,\n  SerializedSingleAssetDataTypes,\n  SupportedTokenTypes,\n  SwappableAsset,\n  UserFacingSerializedSingleAssetDataTypes,\n} from '../../sdk/v3/types';\nimport { InterallySupportedAssetFormat } from '../../sdk/v3/pure';\nimport { UnexpectedAssetTypeError } from '../../sdk/error';\nimport { convertCollectionToBN } from '../bn/convert';\n\nexport const encodeErc20AssetData = (tokenAddress: string) =>\n  hexConcat([\n    AssetProxyId.ERC20,\n    defaultAbiCoder.encode(['address'], [tokenAddress]),\n  ]);\n\nexport const decodeErc20AssetData = (\n  encodedAssetData: string\n): ERC20AssetDataSerialized => {\n  const length = hexDataLength(encodedAssetData);\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['address'], rest);\n\n  const tokenAddress: string = data[0];\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n  };\n};\n\nexport const encodeErc721AssetData = (\n  tokenAddress: string,\n  tokenId: BigNumberish\n) =>\n  hexConcat([\n    AssetProxyId.ERC721,\n    defaultAbiCoder.encode(['address', 'uint256'], [tokenAddress, tokenId]),\n  ]);\n\nexport const decodeErc721AssetData = (\n  encodedAssetData: string\n): ERC721AssetDataSerialized => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['address', 'uint256'], rest);\n\n  const tokenAddress: string = data[0];\n  const tokenId: BigNumber = data[1];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n    tokenId: tokenId.toString(),\n  };\n};\n\nexport const encodeErc1155AssetData = (\n  tokenAddress: string,\n  tokenIds: BigNumberish[],\n  values: BigNumberish[],\n  callbackData: string\n) =>\n  hexConcat([\n    AssetProxyId.ERC1155,\n    defaultAbiCoder.encode(\n      ['address', 'uint256[]', 'uint256[]', 'bytes'],\n      [tokenAddress, tokenIds, values, callbackData]\n    ),\n  ]);\n\nexport const decodeErc1155AssetData = (\n  encodedAssetData: string\n): ERC1155AssetDataSerialized => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(\n    ['address', 'uint256[]', 'uint256[]', 'bytes'],\n    rest\n  );\n\n  const tokenAddress: string = data[0];\n  const tokenIds: BigNumber[] = data[1];\n  const values: BigNumber[] = data[2];\n  const callbackData: string = data[3];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n    tokenIds: tokenIds.map((id) => id.toString()),\n    tokenValues: values.map((val) => val.toString()),\n    callbackData,\n  };\n};\n\nexport const encodeMultiAssetAssetData = (\n  values: BigNumberish[],\n  nestedAssetData: string[]\n) =>\n  hexConcat([\n    AssetProxyId.MultiAsset,\n    defaultAbiCoder.encode(['uint256[]', 'bytes[]'], [values, nestedAssetData]),\n  ]);\n\nexport const decodeMultiAssetData = (encodedAssetData: string) => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['uint256[]', 'bytes[]'], rest);\n\n  const values: BigNumber[] = data[0];\n  const nestedAssetDatas: string[] = data[1];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    amounts: values.map((val) => val.toString()),\n    nestedAssetData: nestedAssetDatas.map(\n      (nestedAssetData) =>\n        decodeAssetData(nestedAssetData) as SerializedSingleAssetDataTypes // Cast b/c multiasset can only happen at depth 0, only singe asset datas can be nested\n    ),\n  };\n};\n\nexport const encodeAssetData = (\n  assetData: UserFacingSerializedSingleAssetDataTypes,\n  // To express ERC1155 amounts inside a multiasset order, you cannot encode the amount on the indiviual asset data,\n  // It needs to be paired with the [asset, amount] tuple inside the Multiasset order format order array (I know, a bit confusing)\n  // But if you're encoding erc1155 asset data within the context of a multi-asset order, this boolean should be true\n  erc1155EncodingForMultiAssetOrder: boolean = false\n): string => {\n  switch (assetData.type) {\n    case SupportedTokenTypes.ERC20:\n      const erc20AssetData = encodeErc20AssetData(assetData.tokenAddress);\n      return erc20AssetData;\n    case SupportedTokenTypes.ERC721:\n      const erc721AssetData = encodeErc721AssetData(\n        assetData.tokenAddress,\n        BigNumber.from(assetData.tokenId)\n      );\n      return erc721AssetData;\n    case SupportedTokenTypes.ERC1155:\n      const tokenIds = assetData.tokens.map((x) => x.tokenId);\n      let tokenValues: string[];\n      if (erc1155EncodingForMultiAssetOrder) {\n        tokenValues = assetData.tokens.map((_) => '1');\n      } else {\n        tokenValues = assetData.tokens.map((x) => x.tokenValue);\n      }\n      const erc1155AssetData = encodeErc1155AssetData(\n        assetData.tokenAddress,\n        convertCollectionToBN(tokenIds),\n        convertCollectionToBN(tokenValues),\n        '0x' // Needs to be '0x' (null bytes) (not empty string) or else it won't work lol\n      );\n      return erc1155AssetData;\n    default:\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\n  }\n};\n\nexport const decodeAssetData = (\n  encodedAssetData: string\n): SerializedAvailableAssetDataTypesDecoded => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  switch (assetProxyId) {\n    case AssetProxyId.ERC20:\n      const erc20AssetData = decodeErc20AssetData(encodedAssetData);\n      return erc20AssetData;\n    case AssetProxyId.ERC721:\n      const erc721AssetData = decodeErc721AssetData(encodedAssetData);\n      return erc721AssetData;\n    case AssetProxyId.ERC1155:\n      const erc1155AssetData = decodeErc1155AssetData(encodedAssetData);\n      return erc1155AssetData;\n    case AssetProxyId.MultiAsset:\n      const multiAssetData = decodeMultiAssetData(encodedAssetData);\n      return multiAssetData;\n    default:\n      throw new Error(\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\n      );\n  }\n};\n\nexport const getAmountFromAsset = (\n  assetData: UserFacingSerializedSingleAssetDataTypes\n): string => {\n  switch (assetData.type) {\n    case SupportedTokenTypes.ERC20:\n      return assetData.amount;\n    case SupportedTokenTypes.ERC721:\n      return '1';\n    case SupportedTokenTypes.ERC1155:\n      // Trader.sdk only supports trading 1 ERC1155 per _asset_ at a time,\n      // so we can access the 0th index for our token\n      // (You can still trade multiple ERC1155s per _order_).\n      return assetData.tokens[0]?.tokenValue ?? '1';\n    default:\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\n  }\n};\n\nexport const convertAssetToInternalFormat = (\n  swappable: SwappableAsset\n): InterallySupportedAssetFormat => {\n  switch (swappable.type) {\n    // No converting needed\n    case 'ERC20':\n      return swappable;\n    // No converting needed\n    case 'ERC721':\n      return swappable;\n    // Convert normalized public ERC1155 interface to 0x internal asset data format\n    // We do this to reduce complexity for end user SDK (and keep api same with erc721)\n    case 'ERC1155':\n      const zeroExErc1155AssetFormat = {\n        tokenAddress: swappable.tokenAddress,\n        tokens: [\n          {\n            tokenId: swappable.tokenId,\n            tokenValue: swappable.amount || '1',\n          },\n        ],\n        type: SupportedTokenTypes.ERC1155 as const,\n      };\n      return zeroExErc1155AssetFormat;\n    default:\n      throw new UnexpectedAssetTypeError((swappable as any)?.type ?? 'Unknown');\n  }\n};\n\nexport const convertAssetsToInternalFormat = (\n  assets: Array<SwappableAsset>\n): Array<InterallySupportedAssetFormat> => {\n  return assets.map(convertAssetToInternalFormat);\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type {\n  ExchangeContract,\n  ExchangeContractInterface,\n} from '../../../ZeroEx/v3/ExchangeContract';\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'chainId',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes4',\n        name: 'id',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'assetProxy',\n        type: 'address',\n      },\n    ],\n    name: 'AssetProxyRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'feeRecipientAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'senderAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'Cancel',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'orderSenderAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'orderEpoch',\n        type: 'uint256',\n      },\n    ],\n    name: 'CancelUpTo',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'feeRecipientAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerFeeAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerFeeAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'senderAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'makerAssetFilledAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'takerAssetFilledAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'makerFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'takerFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'protocolFeePaid',\n        type: 'uint256',\n      },\n    ],\n    name: 'Fill',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'oldProtocolFeeCollector',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'updatedProtocolFeeCollector',\n        type: 'address',\n      },\n    ],\n    name: 'ProtocolFeeCollectorAddress',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'oldProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'updatedProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n    ],\n    name: 'ProtocolFeeMultiplier',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'signerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'validatorAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'isApproved',\n        type: 'bool',\n      },\n    ],\n    name: 'SignatureValidatorApproval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'transactionHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'TransactionExecution',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EIP1271_MAGIC_VALUE',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EIP712_EXCHANGE_DOMAIN_HASH',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'allowedValidators',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelOrders',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction[]',\n        name: 'transactions',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchExecuteTransactions',\n    outputs: [\n      {\n        internalType: 'bytes[]',\n        name: '',\n        type: 'bytes[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrKillOrders',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrders',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'leftOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'rightOrders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'leftSignatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'rightSignatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchMatchOrders',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'left',\n            type: 'tuple[]',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'right',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\n        name: 'batchMatchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'leftOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'rightOrders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'leftSignatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'rightSignatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchMatchOrdersWithMaximalFill',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'left',\n            type: 'tuple[]',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'right',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\n        name: 'batchMatchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'targetOrderEpoch',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelOrdersUpTo',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelled',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'currentContextAddress',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'detachProtocolFeeCollector',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\n        name: 'transaction',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'executeTransaction',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrKillOrder',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'filled',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'assetProxyId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'getAssetProxy',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint8',\n            name: 'orderStatus',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderTakerAssetFilledAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'signerAddress',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidHashSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidOrderSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\n        name: 'transaction',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidTransactionSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketBuyOrdersFillOrKill',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketBuyOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketSellOrdersFillOrKill',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketSellOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'leftOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'rightOrder',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'leftSignature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'rightSignature',\n        type: 'bytes',\n      },\n    ],\n    name: 'matchOrders',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'left',\n            type: 'tuple',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'right',\n            type: 'tuple',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.MatchedFillResults',\n        name: 'matchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'leftOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'rightOrder',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'leftSignature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'rightSignature',\n        type: 'bytes',\n      },\n    ],\n    name: 'matchOrdersWithMaximalFill',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'left',\n            type: 'tuple',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'right',\n            type: 'tuple',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.MatchedFillResults',\n        name: 'matchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'orderEpoch',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'preSign',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'preSigned',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'protocolFeeCollector',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'protocolFeeMultiplier',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'assetProxy',\n        type: 'address',\n      },\n    ],\n    name: 'registerAssetProxy',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'updatedProtocolFeeCollector',\n        type: 'address',\n      },\n    ],\n    name: 'setProtocolFeeCollectorAddress',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'updatedProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n    ],\n    name: 'setProtocolFeeMultiplier',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'validatorAddress',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approval',\n        type: 'bool',\n      },\n    ],\n    name: 'setSignatureValidatorApproval',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes[]',\n        name: 'assetData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'address[]',\n        name: 'fromAddresses',\n        type: 'address[]',\n      },\n      {\n        internalType: 'address[]',\n        name: 'toAddresses',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'amounts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'simulateDispatchTransferFromCalls',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'transactionsExecuted',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\nexport class ExchangeContract__factory {\n  static readonly abi = _abi;\n  static createInterface(): ExchangeContractInterface {\n    return new utils.Interface(_abi) as ExchangeContractInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ExchangeContract {\n    return new Contract(address, _abi, signerOrProvider) as ExchangeContract;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type {\n  Forwarder,\n  ForwarderInterface,\n} from '../../../ZeroEx/v3/Forwarder';\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_exchange',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_exchangeV2',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_weth',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'ERC1155_BATCH_RECEIVED',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'ERC1155_RECEIVED',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EXCHANGE_V2_ORDER_ID',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'assetData',\n        type: 'bytes',\n      },\n    ],\n    name: 'approveMakerAssetProxy',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketBuyOrdersWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'ethSellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketSellAmountWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketSellOrdersWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ids',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'values',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155BatchReceived',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'id',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'assetData',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'withdrawAsset',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\nexport class Forwarder__factory {\n  static readonly abi = _abi;\n  static createInterface(): ForwarderInterface {\n    return new utils.Interface(_abi) as ForwarderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Forwarder {\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { IZeroEx, IZeroExInterface } from '../../../ZeroEx/v4/IZeroEx';\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'ERC1155OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20FillAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC1155Token',\n        name: 'erc1155Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'erc1155FillAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'matcher',\n        type: 'address',\n      },\n    ],\n    name: 'ERC1155OrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'recipient',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'amount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'feeData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Fee[]',\n        name: 'fees',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC1155Token',\n        name: 'erc1155Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'contract IPropertyValidator',\n            name: 'propertyValidator',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'propertyData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Property[]',\n        name: 'erc1155TokenProperties',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'erc1155TokenAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'ERC1155OrderPreSigned',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'ERC721OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC721Token',\n        name: 'erc721Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'matcher',\n        type: 'address',\n      },\n    ],\n    name: 'ERC721OrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'recipient',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'amount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'feeData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Fee[]',\n        name: 'fees',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC721Token',\n        name: 'erc721Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'contract IPropertyValidator',\n            name: 'propertyValidator',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'propertyData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Property[]',\n        name: 'erc721TokenProperties',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'ERC721OrderPreSigned',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'feeRecipient',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFeeFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'protocolFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'pool',\n        type: 'bytes32',\n      },\n    ],\n    name: 'LimitOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract ILiquidityProvider',\n        name: 'provider',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'LiquidityProviderSwap',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: 'MetaTransactionExecuted',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'caller',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'migrator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'Migrated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n    ],\n    name: 'OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'OrderSignerRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'OtcOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'PairCancelledLimitOrders',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'PairCancelledRfqOrders',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'oldImpl',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'newImpl',\n        type: 'address',\n      },\n    ],\n    name: 'ProxyFunctionUpdated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'quoteSigner',\n        type: 'address',\n      },\n    ],\n    name: 'QuoteSignerUpdated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'pool',\n        type: 'bytes32',\n      },\n    ],\n    name: 'RfqOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'origin',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address[]',\n        name: 'addrs',\n        type: 'address[]',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'RfqOrderOriginsAllowed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'TransformedERC20',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'transformerDeployer',\n        type: 'address',\n      },\n    ],\n    name: 'TransformerDeployerUpdated',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: '_fillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'useSelfBalance',\n        type: 'bool',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_fillOtcOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'useSelfBalance',\n        type: 'bool',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_fillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_sellHeldTokenForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'inputToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'outputToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'inputTokenAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minOutputTokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint32',\n                name: 'deploymentNonce',\n                type: 'uint32',\n              },\n              {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct ITransformERC20Feature.Transformation[]',\n            name: 'transformations',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'useSelfBalance',\n            type: 'bool',\n          },\n          {\n            internalType: 'address payable',\n            name: 'recipient',\n            type: 'address',\n          },\n        ],\n        internalType: 'struct ITransformERC20Feature.TransformERC20Args',\n        name: 'args',\n        type: 'tuple',\n      },\n    ],\n    name: '_transformERC20',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'erc1155TokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'callbackData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchBuyERC1155s',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'callbackData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchBuyERC721s',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'orderNonces',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelERC1155Orders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'orderNonces',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelERC721Orders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairLimitOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairRfqOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData[]',\n        name: 'mtxs',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchExecuteMetaTransactions',\n    outputs: [\n      {\n        internalType: 'bytes[]',\n        name: 'returnResults',\n        type: 'bytes[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFillAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchFillLimitOrders',\n    outputs: [\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'makerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFillAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchFillRfqOrders',\n    outputs: [\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'makerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'makerSignatures',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'takerSignatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'unwrapWeth',\n        type: 'bool[]',\n      },\n    ],\n    name: 'batchFillTakerSignedOtcOrders',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchGetLimitOrderRelevantStates',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\n        name: 'orderInfos',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'actualFillableTakerTokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'isSignatureValids',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchGetRfqOrderRelevantStates',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\n        name: 'orderInfos',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'actualFillableTakerTokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'isSignatureValids',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'buyOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'sellOrderSignatures',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'buyOrderSignatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchMatchERC721Orders',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'profits',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'erc1155BuyAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'buyERC1155',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'buyERC721',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'orderNonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelERC1155Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'orderNonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelERC721Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelLimitOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairLimitOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairRfqOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelRfqOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'createTransformWallet',\n    outputs: [\n      {\n        internalType: 'contract IFlashWallet',\n        name: 'wallet',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'executeMetaTransaction',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: 'returnResult',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'address',\n        name: 'impl',\n        type: 'address',\n      },\n    ],\n    name: 'extend',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOrKillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOrKillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOtcOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOtcOrderForEth',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillOtcOrderWithEth',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'takerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillTakerSignedOtcOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'takerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillTakerSignedOtcOrderForEth',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC1155OrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC1155OrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNFTOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'orderAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'remainingAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC721OrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC721OrderStatus',\n    outputs: [\n      {\n        internalType: 'enum LibNFTOrder.OrderStatus',\n        name: 'status',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'uint248',\n        name: 'nonceRange',\n        type: 'uint248',\n      },\n    ],\n    name: 'getERC721OrderStatusBitVector',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'bitVector',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderRelevantState',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'actualFillableTakerTokenAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSignatureValid',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n    ],\n    name: 'getMetaTransactionExecutedBlock',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n    ],\n    name: 'getMetaTransactionHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'mtxHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'mtxHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'getMetaTransactionHashExecutedBlock',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOtcOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOtcOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getProtocolFeeMultiplier',\n    outputs: [\n      {\n        internalType: 'uint32',\n        name: 'multiplier',\n        type: 'uint32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getQuoteSigner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderRelevantState',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'actualFillableTakerTokenAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSignatureValid',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'uint256',\n        name: 'idx',\n        type: 'uint256',\n      },\n    ],\n    name: 'getRollbackEntryAtIndex',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'impl',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n    ],\n    name: 'getRollbackLength',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'rollbackLength',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getTransformWallet',\n    outputs: [\n      {\n        internalType: 'contract IFlashWallet',\n        name: 'wallet',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getTransformerDeployer',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'deployer',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n    ],\n    name: 'isValidOrderSigner',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isAllowed',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'txOrigin',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'nonceBucket',\n        type: 'uint64',\n      },\n    ],\n    name: 'lastOtcTxOriginNonce',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'lastNonce',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'sellOrderSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'buyOrderSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'matchERC721Orders',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'profit',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'target',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'migrate',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellEthForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellTokenForEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellTokenForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellEthForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellTokenForEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellTokenForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: 'success',\n        type: 'bytes4',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC721Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: 'success',\n        type: 'bytes4',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'ownerAddress',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'preSignERC1155Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'preSignERC721Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'registerAllowedOrderSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'origins',\n        type: 'address[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'registerAllowedRfqOrigins',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'address',\n        name: 'targetImpl',\n        type: 'address',\n      },\n    ],\n    name: 'rollback',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint128',\n        name: 'erc1155SellAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellERC1155',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellERC721',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellEthForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract ILiquidityProvider',\n        name: 'provider',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'auxiliaryData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellToLiquidityProvider',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'enum IPancakeSwapFeature.ProtocolFork',\n        name: 'fork',\n        type: 'uint8',\n      },\n    ],\n    name: 'sellToPancakeSwap',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSushi',\n        type: 'bool',\n      },\n    ],\n    name: 'sellToUniswap',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address payable',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellTokenForEthToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellTokenForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'quoteSigner',\n        type: 'address',\n      },\n    ],\n    name: 'setQuoteSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'transformerDeployer',\n        type: 'address',\n      },\n    ],\n    name: 'setTransformerDeployer',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'interfaceId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isSupported',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'poolIds',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'transferProtocolFeesForPools',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amountOut',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address payable',\n        name: 'recipientWallet',\n        type: 'address',\n      },\n    ],\n    name: 'transferTrappedTokensTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minOutputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'uint32',\n            name: 'deploymentNonce',\n            type: 'uint32',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct ITransformERC20Feature.Transformation[]',\n        name: 'transformations',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'transformERC20',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'int256',\n        name: 'amount0Delta',\n        type: 'int256',\n      },\n      {\n        internalType: 'int256',\n        name: 'amount1Delta',\n        type: 'int256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'uniswapV3SwapCallback',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'validateERC1155OrderProperties',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'validateERC1155OrderSignature',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'validateERC721OrderProperties',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'validateERC721OrderSignature',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport class IZeroEx__factory {\n  static readonly abi = _abi;\n  static createInterface(): IZeroExInterface {\n    return new utils.Interface(_abi) as IZeroExInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IZeroEx {\n    return new Contract(address, _abi, signerOrProvider) as IZeroEx;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC1155, ERC1155Interface } from '../ERC1155';\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256[]',\n        name: '_amounts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'TransferBatch',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'TransferSingle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: '_owners',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'balanceOfBatch',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isOperator',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_amounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeBatchTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: '_amount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: '_interfaceID',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportsInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n];\n\nexport class ERC1155__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC1155Interface {\n    return new utils.Interface(_abi) as ERC1155Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC1155 {\n    return new Contract(address, _abi, signerOrProvider) as ERC1155;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC20, ERC20Interface } from '../ERC20';\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address',\n      },\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        name: '_spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n];\n\nexport class ERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC20Interface {\n    return new utils.Interface(_abi) as ERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC721, ERC721Interface } from '../ERC721';\n\nconst _abi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'mint',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'approved',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'getApproved',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'ownerOf',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'interfaceId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportsInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport class ERC721__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC721Interface {\n    return new utils.Interface(_abi) as ERC721Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {\n    return new Contract(address, _abi, signerOrProvider) as ERC721;\n  }\n}\n","import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport { arrayify } from '@ethersproject/bytes';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\n\nexport interface TypedData {\n  domain: TypedDataDomain;\n  types: Record<string, Array<TypedDataField>>;\n  message: Record<string, any>;\n  primaryType?: string;\n}\n\nexport type { TypedDataDomain, TypedDataField };\n\nexport const encodeTypedDataHash = (typedData: TypedData): string => {\n  const types = { ...typedData.types };\n\n  // remove EIP712Domain key from types as ethers will auto-gen it in\n  // the hash encoder below\n  delete types['EIP712Domain'];\n\n  return _TypedDataEncoder.hash(typedData.domain, types, typedData.message);\n};\n\nexport const encodeTypedDataDigest = (typedData: TypedData): Uint8Array => {\n  return arrayify(encodeTypedDataHash(typedData));\n};\n","export const EIP1271ZeroExDataAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IEIP1271Data.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'OrderWithHash',\n    outputs: [],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n];\n","import flatten from 'lodash/flatten';\nimport type { ContractTransaction } from '@ethersproject/contracts';\nimport { BaseProvider, Provider } from '@ethersproject/providers';\nimport {\n  arrayify,\n  hexConcat,\n  hexDataLength,\n  hexDataSlice,\n  hexlify,\n  joinSignature,\n  splitSignature,\n} from '@ethersproject/bytes';\nimport { verifyTypedData } from '@ethersproject/wallet';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Interface } from '@ethersproject/abi';\nimport type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport {\n  generateOrderFromAssetDatas,\n  generateTimeBasedSalt,\n  getEipDomain,\n  normalizeOrder,\n} from '../../utils/v3/order';\nimport { NULL_ADDRESS } from '../../utils/eth';\nimport {\n  decodeAssetData,\n  encodeAssetData,\n  encodeMultiAssetAssetData,\n  getAmountFromAsset,\n} from '../../utils/v3/asset-data';\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n  ExchangeContract,\n} from '../../contracts';\nimport { UnexpectedAssetTypeError } from '../error';\nimport {\n  AdditionalOrderConfig,\n  AssetProxyId,\n  AvailableSignatureTypesV3,\n  EIP712_TYPES,\n  ERC1155AssetDataSerialized,\n  ERC20AssetDataSerialized,\n  ERC721AssetDataSerialized,\n  MultiAssetDataSerializedRecursivelyDecoded,\n  Order,\n  OrderInfoV3,\n  OrderStatusV3,\n  SerializedAvailableAssetDataTypesDecoded,\n  SignedOrder,\n  SigningOptionsV3,\n  SwappableAsset,\n  UserFacingERC1155AssetDataSerializedNormalizedSingle,\n  UserFacingERC20AssetDataSerialized,\n  UserFacingERC721AssetDataSerialized,\n  UserFacingSerializedSingleAssetDataTypes,\n} from './types';\nimport { encodeTypedDataHash, TypedData } from '../../utils/typed-data';\nimport { EIP1271ZeroExDataAbi } from '../../utils/v3/eip1271';\nimport { convertCollectionToBN } from '../../utils/bn/convert';\nimport type {\n  ApprovalStatus,\n  PayableOverrides,\n  TransactionOverrides,\n} from '../common/types';\n\nexport const cancelOrder = (\n  exchangeContract: ExchangeContract,\n  order: Order\n) => {\n  return exchangeContract.cancelOrder(order);\n};\n\nexport const getOrderInfo = async (\n  exchangeContract: ExchangeContract,\n  order: Order\n): Promise<OrderInfoV3> => {\n  const orderInfo = await exchangeContract.getOrderInfo(order);\n  return orderInfo as OrderInfoV3;\n};\n\nexport const getOrderStatus = async (\n  exchangeContract: ExchangeContract,\n  order: Order\n): Promise<OrderStatusV3> => {\n  const orderInfo = await exchangeContract.getOrderInfo(order);\n  return orderInfo.orderStatus as OrderStatusV3;\n};\n\nexport const cancelOrders = (\n  exchangeContract: ExchangeContract,\n  orders: Array<Order>,\n  overrides?: PayableOverrides\n) => {\n  return exchangeContract.batchCancelOrders(orders, overrides);\n};\n\nexport const cancelOrdersUpToNow = (\n  exchangeContract: ExchangeContract,\n  unixTimestampAsSalt: string = generateTimeBasedSalt()\n) => {\n  exchangeContract.cancelOrdersUpTo(unixTimestampAsSalt);\n};\n\nexport const hashOrder = (\n  order: Order,\n  chainId: number,\n  exchangeContractAddress: string\n): string => {\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\n  return _TypedDataEncoder.hash(EIP712_DOMAIN, EIP712_TYPES, order);\n};\n\nexport type InterallySupportedAssetFormat =\n  UserFacingSerializedSingleAssetDataTypes;\n\nexport const signOrderWithEip1271 = async (\n  order: Order,\n  signer: Signer,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const domain = getEipDomain(chainId, exchangeContractAddress);\n  const types = EIP712_TYPES;\n  const value = order;\n\n  const typedData: TypedData = {\n    domain,\n    types,\n    message: value,\n  };\n\n  const orderHash = encodeTypedDataHash(typedData);\n\n  const msg = new Interface(EIP1271ZeroExDataAbi).encodeFunctionData(\n    'OrderWithHash',\n    [order, orderHash]\n  );\n\n  const rawSignatureFromContractWallet = await signer.signMessage(\n    arrayify(msg)\n  );\n\n  return rawSignatureFromContractWallet;\n};\n\nexport const signOrderWithEoaWallet = async (\n  order: Order,\n  signer: TypedDataSigner,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const domain = getEipDomain(chainId, exchangeContractAddress);\n  const types = EIP712_TYPES;\n  const value = order;\n\n  const rawSignatureFromEoaWallet = await signer._signTypedData(\n    domain,\n    types,\n    value\n  );\n\n  return rawSignatureFromEoaWallet;\n};\n\nexport const checkIfContractWallet = async (\n  provider: Provider,\n  walletAddress: string\n): Promise<boolean> => {\n  let isContractWallet: boolean = false;\n  if (provider.getCode) {\n    let walletCode = await provider.getCode(walletAddress);\n    // Wallet Code returns '0x' if no contract address is associated with\n    // Note: Lazy loaded contract wallets will show 0x initially, so we fall back to feature detection\n    if (walletCode && walletCode != '0x') {\n      isContractWallet = true;\n    }\n  }\n  let isSequence = !!(provider as any)._isSequenceProvider;\n  if (isSequence) {\n    isContractWallet = true;\n  }\n  // Walletconnect hides the real provider in the provider (yo dawg)\n  let providerToUse = (provider as any).provider;\n  if (providerToUse?.isWalletConnect) {\n    const isSequenceViaWalletConnect = !!(\n      (providerToUse as any).connector?._peerMeta?.description === 'Sequence'\n    );\n    if (isSequenceViaWalletConnect) {\n      isContractWallet = true;\n    }\n  }\n\n  return isContractWallet;\n};\n\nexport const signOrder = async (\n  order: Order,\n  signerAddress: string,\n  signer: Signer,\n  provider: Provider,\n  chainId: number,\n  exchangeContractAddress: string,\n  signingOptions?: Partial<SigningOptionsV3>\n): Promise<SignedOrder> => {\n  try {\n    let method: AvailableSignatureTypesV3 = 'eoa';\n    // If we have any specific signature type overrides, prefer those\n    if (signingOptions?.signatureType === 'eip1271') {\n      method = 'eip1271';\n    } else if (signingOptions?.signatureType === 'eoa') {\n      method = 'eoa';\n    } else {\n      // Try to detect...\n      if (signingOptions?.autodetectSignatureType === false) {\n        method = 'eoa';\n      } else {\n        // If we made it here, consumer has no preferred signing method,\n        // let's try feature detection to automagically pick a signature type\n        // By default we fallback to EOA signing if we can't figure it out.\n\n        // Let's try to determine if the signer is a contract wallet or not.\n        // If it is, we'll try EIP-1271, otherwise we'll do a normal sign\n        const isContractWallet = await checkIfContractWallet(\n          provider,\n          signerAddress\n        );\n        if (isContractWallet) {\n          method = 'eip1271';\n        } else {\n          method = 'eoa';\n        }\n      }\n    }\n    let signature: string;\n    switch (method) {\n      case 'eoa':\n        const rawEip712Signature = await signOrderWithEoaWallet(\n          order,\n          signer as unknown as TypedDataSigner,\n          chainId,\n          exchangeContractAddress\n        );\n        signature = prepareOrderSignatureFromEoaWallet(rawEip712Signature);\n        break;\n      case 'eip1271':\n        const rawEip1271Signature = (signature = await signOrderWithEip1271(\n          order,\n          signer,\n          chainId,\n          exchangeContractAddress\n        ));\n        signature =\n          prepareOrderSignatureFromContractWallet(rawEip1271Signature);\n        break;\n      default:\n        throw new Error(`Unknown signature method chosen: ${method}`);\n    }\n\n    const signedOrder: SignedOrder = {\n      ...order,\n      signature,\n    };\n\n    return signedOrder;\n  } catch (e) {\n    console.log('error signing order', e);\n    throw e;\n  }\n};\n\n// export const prepareOrderSignature = (\n//   rawSignature: string,\n//   method?: AvailableSignatureTypes\n// ) => {\n//   let preferredMethod = method ?? 'eoa';\n//   try {\n//     return prepareOrderSignatureFromEoaWallet(rawSignature);\n//   } catch (e) {\n//     console.log('prepareOrderSignature:Errror preparing order signature', e);\n//     console.log('Attempting to decode contract wallet signature');\n//     try {\n//       return prepareOrderSignatureFromContractWallet(rawSignature);\n//     } catch (e) {\n//       throw e;\n//     }\n//   }\n// };\n\nexport const prepareOrderSignatureFromEoaWallet = (rawSignature: string) => {\n  // Append the signature type (eg. \"0x02\" for EIP712 signatures)\n  // at the end of the signature since this is what 0x expects\n  const signature = splitSignature(rawSignature);\n  return hexConcat([hexlify(signature.v), signature.r, signature.s, '0x02']);\n};\n\nexport const prepareOrderSignatureFromContractWallet = (\n  rawSignature: string\n) => {\n  // Append the signature type (eg. \"0x07\" for EIP1271 signatures)\n  // at the end of the signature since this is what 0x expects\n  // See: https://github.com/0xProject/ZEIPs/issues/33\n  return hexConcat([rawSignature, '0x07']);\n};\n\nexport const verifyOrderSignature = (\n  order: Order,\n  signature: string,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\n  try {\n    const maker = order.makerAddress.toLowerCase();\n    const length = hexDataLength(signature);\n    // Grab the V (exists at index 0 for 0x orders)\n    const slicedSigV = hexDataSlice(signature, 0, 1);\n    // Grab the R and S (index 1 through length - 1 b/c the end hex is the signature type so we strip that too)\n    const slicedSig = hexDataSlice(signature, 1, length - 1);\n\n    const derivedSignatureHex = hexConcat([slicedSig, slicedSigV]);\n    const derivedSignature = joinSignature(derivedSignatureHex);\n\n    const signer = verifyTypedData(\n      EIP712_DOMAIN,\n      EIP712_TYPES,\n      order,\n      derivedSignature\n    );\n\n    return maker.toLowerCase() === signer.toLowerCase();\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nexport const buildOrder = (\n  makerAssets: Array<InterallySupportedAssetFormat>,\n  takerAssets: Array<InterallySupportedAssetFormat>,\n  orderConfig: AdditionalOrderConfig\n): Order => {\n  // Encode maker assets\n  let makerAssetAmount: BigNumber;\n  let makerAssetData: string;\n\n  const makerAssetEligibleForSingleAsset = makerAssets.length === 1;\n  if (makerAssetEligibleForSingleAsset) {\n    const makerAsset = makerAssets[0];\n    makerAssetAmount = BigNumber.from(getAmountFromAsset(makerAsset));\n    makerAssetData = encodeAssetData(makerAsset, false);\n  } else {\n    const makerAssetAmounts = makerAssets.map((ma) => getAmountFromAsset(ma));\n    const makerAssetDatas = makerAssets.map((ma) => encodeAssetData(ma, true));\n    const makerMultiAsset = encodeMultiAssetAssetData(\n      makerAssetAmounts,\n      makerAssetDatas\n    );\n    makerAssetData = makerMultiAsset;\n    makerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\n  }\n\n  // Encode taker assets\n  let takerAssetAmount: BigNumber;\n  let takerAssetData: string;\n\n  const takerAssetEligibleForSingleAsset = takerAssets.length === 1;\n  // If we only have one asset to swap\n  if (takerAssetEligibleForSingleAsset) {\n    const takerAsset = takerAssets[0];\n    takerAssetAmount = BigNumber.from(getAmountFromAsset(takerAsset));\n    takerAssetData = encodeAssetData(takerAsset, false);\n  } else {\n    const takerAssetAmounts = takerAssets.map((ta) => getAmountFromAsset(ta));\n    const takerAssetDatas = takerAssets.map((ta) => encodeAssetData(ta, true));\n    const takerMultiAsset = encodeMultiAssetAssetData(\n      convertCollectionToBN(takerAssetAmounts),\n      takerAssetDatas\n    );\n    takerAssetData = takerMultiAsset;\n    takerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\n  }\n\n  const order = generateOrderFromAssetDatas({\n    makerAssetAmount: makerAssetAmount,\n    makerAssetData: makerAssetData,\n    takerAddress: orderConfig.takerAddress ?? NULL_ADDRESS,\n    takerAssetAmount: takerAssetAmount,\n    takerAssetData: takerAssetData,\n    exchangeAddress: orderConfig.exchangeAddress ?? '',\n    ...orderConfig,\n  });\n\n  return order;\n};\n\nexport const fillSignedOrder = async (\n  signedOrder: SignedOrder,\n  exchangeContract: ExchangeContract,\n  overrides?: PayableOverrides\n): Promise<ContractTransaction> => {\n  return exchangeContract.fillOrKillOrder(\n    normalizeOrder(signedOrder),\n    signedOrder.takerAssetAmount,\n    signedOrder.signature,\n    overrides\n  );\n};\n\n/**\n *\n * @param walletAddress Owner of the asset\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param provider\n * @returns\n */\nexport const getApprovalStatus = async (\n  walletAddress: string,\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  provider: BaseProvider\n): Promise<ApprovalStatus> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\n        MAX_APPROVAL.toString()\n      ).sub('100000000000000000');\n      const approvedForMax = erc20AllowanceBigNumber.gte(\n        MAX_APPROVAL_WITH_BUFFER\n      );\n      return {\n        contractApproved: approvedForMax,\n      };\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\n        asset.tokenId\n      );\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\n        await Promise.all([\n          erc721ApprovalForAllPromise,\n          erc721ApprovedAddressForIdPromise,\n        ]);\n      const tokenIdApproved =\n        erc721ApprovedAddressForId.toLowerCase() ===\n        exchangeProxyAddressForAsset.toLowerCase();\n      return {\n        contractApproved: erc721ApprovalForAll ?? false,\n        tokenIdApproved: tokenIdApproved,\n      };\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      return {\n        contractApproved: erc1155ApprovalForAll ?? false,\n      };\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Some arbitrarily high number.\n// TODO(johnrjj) - Support custom ERC20 approval amounts\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const approveAsset = async (\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  signer: Signer,\n  overrides: TransactionOverrides = {},\n  approve: boolean = true\n): Promise<ContractTransaction> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL.toString() : 0,\n        {\n          ...overrides,\n        }\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...overrides,\n        }\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...overrides,\n        }\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const estimateGasForApproval = async (\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  signer: Signer,\n  overrides: TransactionOverrides = {},\n  approve: boolean = true\n): Promise<BigNumber> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.estimateGas.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL : 0\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      const erc721ApprovalForAllPromise = erc721.estimateGas.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      const erc1155ApprovalForAll = await erc1155.estimateGas.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\nexport const getSignatureTypeFromSignature = (signature: string): string => {\n  const length = hexDataLength(signature);\n  const signatureType = hexDataSlice(signature, length - 1);\n  return signatureType;\n};\n\nexport const estimateGasForFillOrder = async (\n  signedOrder: SignedOrder,\n  exchangeContract: ExchangeContract,\n  _overrides?: PayableOverrides | undefined\n) => {\n  const estimatedGasRequiredForFill =\n    await exchangeContract.estimateGas.fillOrder(\n      normalizeOrder(signedOrder),\n      signedOrder.takerAssetAmount,\n      signedOrder.signature\n    );\n  return estimatedGasRequiredForFill;\n};\n\nexport const convertDecodedAssetDataToUserFacingAssets = (\n  decodedAssetData: SerializedAvailableAssetDataTypesDecoded,\n  assetAmount: string\n): Array<SwappableAsset> => {\n  const assetProxyId = decodedAssetData.assetProxyId;\n\n  switch (assetProxyId) {\n    case AssetProxyId.ERC20:\n      const decodedErc20 = decodedAssetData as ERC20AssetDataSerialized;\n      const swappableErc20: UserFacingERC20AssetDataSerialized = {\n        type: 'ERC20',\n        amount: assetAmount,\n        tokenAddress: decodedErc20.tokenAddress,\n      };\n      return [swappableErc20];\n    case AssetProxyId.ERC721:\n      const decodedErc721 = decodedAssetData as ERC721AssetDataSerialized;\n      const swappableErc721: UserFacingERC721AssetDataSerialized = {\n        type: 'ERC721',\n        tokenAddress: decodedErc721.tokenAddress,\n        tokenId: decodedErc721.tokenId,\n      };\n      return [swappableErc721];\n    case AssetProxyId.ERC1155:\n      const decodedErc1155 = decodedAssetData as ERC1155AssetDataSerialized;\n      const swappableErc1155: UserFacingERC1155AssetDataSerializedNormalizedSingle =\n        {\n          type: 'ERC1155',\n          tokenAddress: decodedErc1155.tokenAddress,\n          tokenId: decodedErc1155.tokenIds[0],\n          amount: decodedErc1155.tokenValues[0] ?? '1',\n        };\n      return [swappableErc1155];\n    case AssetProxyId.MultiAsset:\n      const multiAssetDecodedData =\n        decodedAssetData as MultiAssetDataSerializedRecursivelyDecoded;\n      const nestedAssets = flatten(\n        multiAssetDecodedData.nestedAssetData.map((asset, idx) =>\n          convertDecodedAssetDataToUserFacingAssets(\n            asset,\n            multiAssetDecodedData.amounts[idx]\n          )\n        )\n      );\n      const nestedAssetsWithCorrectAmounts: Array<SwappableAsset> =\n        nestedAssets.map((nestedAsset, idx) => {\n          const nestedAssetValueFromMultiAsset =\n            multiAssetDecodedData.amounts[idx];\n          // Overwrite original nested asset amount, b/c when its nested inside a multiasset encoding, the multiasset top level values take over.\n          return {\n            ...nestedAsset,\n            amount: nestedAssetValueFromMultiAsset,\n          };\n        });\n      return nestedAssetsWithCorrectAmounts;\n    default:\n      throw new Error(\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\n      );\n  }\n};\n\nexport const getAssetsFromOrder = (\n  order: Order\n): { makerAssets: SwappableAsset[]; takerAssets: SwappableAsset[] } => {\n  const decodedMakerAssetData = decodeAssetData(order.makerAssetData);\n  const decodedTakerAssetData = decodeAssetData(order.takerAssetData);\n\n  const makerAssets = convertDecodedAssetDataToUserFacingAssets(\n    decodedMakerAssetData,\n    order.makerAssetAmount\n  );\n  const takerAssets = convertDecodedAssetDataToUserFacingAssets(\n    decodedTakerAssetData,\n    order.takerAssetAmount\n  );\n\n  return {\n    makerAssets,\n    takerAssets,\n  };\n};\n\n// export const loadApprovalStatusAll = async (assets: Array<InterallySupportedAsset>) => {\n//   const assetsGroupedByContractAddress = groupBy(assets, (asset) => asset.tokenAddress)\n//   const todoPromises = Object.entries(assetsGroupedByContractAddress).map(\n//     ([contractAddress, assetsWithSameTakerAddress]) => {\n//       const type = assetsWithSameTakerAddress[0]?.type\n//       switch (type) {\n//         case SupportedTokenTypes.ERC20:\n//           break\n//         case SupportedTokenTypes.ERC721:\n//           break\n//         case SupportedTokenTypes.ERC1155:\n//           break\n//         default:\n//           break\n//       }\n//     },\n//   )\n// }\n","import { UnsupportedChainId, UnexpectedAssetTypeError } from '../../sdk/error';\nimport type {\n  AddressesForChainV3,\n  ContractAddresses,\n  SupportedTokenTypes,\n} from '../../sdk/v3/types';\nimport defaultAddresses from '../../sdk/v3/addresses.json';\n\nconst getZeroExAddressesForChain = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n): AddressesForChainV3 | undefined => {\n  const chainIdString = chainId.toString(10);\n  const maybeAddressesForChain: AddressesForChainV3 | undefined = (\n    addresses as { [key: string]: AddressesForChainV3 }\n  )[chainIdString];\n  return maybeAddressesForChain;\n};\n\nexport const getProxyAddressForErcType = (\n  assetType: SupportedTokenTypes,\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n) => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  if (!zeroExAddresses) {\n    throw new UnsupportedChainId(chainId);\n  }\n  switch (assetType) {\n    case 'ERC20':\n      return zeroExAddresses.erc20Proxy;\n    case 'ERC721':\n      return zeroExAddresses.erc721Proxy;\n    case 'ERC1155':\n      return zeroExAddresses.erc1155Proxy;\n    default:\n      throw new UnexpectedAssetTypeError(assetType);\n  }\n};\n\nexport const getForwarderAddress = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n) => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  if (!zeroExAddresses) {\n    throw new UnsupportedChainId(chainId);\n  }\n  return zeroExAddresses.forwarder;\n};\n\nexport const getWrappedNativeToken = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n): string | null => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  return zeroExAddresses?.wrappedNativeToken ?? null;\n};\n","import { SupportedChainIdsV3 } from '../../sdk/v3/types';\n\nconst DEFAUTLT_GAS_BUFFER_MULTIPLES: { [chainId: number]: number } = {\n  [SupportedChainIdsV3.Polygon]: 1.5,\n  [SupportedChainIdsV3.PolygonMumbai]: 1.5,\n  [SupportedChainIdsV3.Kovan]: 1.5,\n};\n\nexport { DEFAUTLT_GAS_BUFFER_MULTIPLES };\n","export const sleep = (t: number) => {\n  return new Promise<void>((resolve) => {\n    const timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      resolve();\n    }, t);\n  });\n};\n","import type { BaseProvider } from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport {\n  buildOrder as _buildOrder,\n  signOrder as _signOrder,\n  fillSignedOrder as _fillSignedOrder,\n  approveAsset as _approveAsset,\n  verifyOrderSignature as _verifyOrderSignature,\n  getApprovalStatus as _getApprovalStatus,\n  cancelOrder as _cancelOrder,\n  cancelOrders as _cancelOrders,\n  estimateGasForFillOrder as _estimateGasForFillOrder,\n  estimateGasForApproval as _estimateGasForApproval,\n  cancelOrdersUpToNow as _cancelOrdersUpToNow,\n  getOrderInfo as _getOrderInfo,\n  getAssetsFromOrder as _getAssetsFromOrder,\n  hashOrder as _hashOrder,\n} from './pure';\nimport {\n  getEipDomain,\n  normalizeOrder as _normalizeOrder,\n} from '../../utils/v3/order';\nimport type {\n  ApprovalOverrides,\n  BuildOrderAdditionalConfig,\n  FillOrderOverrides,\n  INftSwapV3,\n} from './INftSwapV3';\nimport {\n  SupportedChainIdsV3,\n  EIP712_TYPES,\n  Order,\n  OrderInfoV3,\n  OrderStatusV3,\n  OrderStatusCodeLookup,\n  SignedOrder,\n  SupportedTokenTypes,\n  SwappableAsset,\n  AddressesForChainV3,\n  BigNumberish,\n  ERC20AssetDataSerialized,\n  AssetProxyId,\n  SigningOptionsV3,\n} from './types';\nimport {\n  ExchangeContract,\n  ExchangeContract__factory,\n  Forwarder__factory,\n} from '../../contracts';\nimport {\n  convertAssetsToInternalFormat,\n  convertAssetToInternalFormat,\n  decodeAssetData,\n} from '../../utils/v3/asset-data';\nimport {\n  getProxyAddressForErcType,\n  getForwarderAddress,\n  getWrappedNativeToken,\n} from '../../utils/v3/default-addresses';\nimport { DEFAUTLT_GAS_BUFFER_MULTIPLES } from '../../utils/v3/gas-buffer';\nimport { sleep } from '../../utils/sleep';\nimport addresses from './addresses.json';\nimport { PayableOverrides, TransactionOverrides } from '../common/types';\n\nexport interface NftSwapConfig {\n  exchangeContractAddress?: string;\n  erc20ProxyContractAddress?: string;\n  erc721ProxyContractAddress?: string;\n  erc1155ProxyContractAddress?: string;\n  forwarderContractAddress?: string;\n  wrappedNativeTokenContractAddress?: string;\n  gasBufferMultiples?: { [chainId: number]: number };\n}\n\n/**\n * NftSwap Convenience class to swap between ERC20, ERC721, and ERC1155. Primary entrypoint for swapping.\n */\nclass NftSwapV3 implements INftSwapV3 {\n  public provider: BaseProvider;\n  public signer: Signer | undefined;\n  public chainId: number;\n  public exchangeContract: ExchangeContract;\n  public exchangeContractAddress: string;\n  public erc20ProxyContractAddress: string;\n  public erc721ProxyContractAddress: string;\n  public erc1155ProxyContractAddress: string;\n  public wrappedNativeTokenContractAddress: string | null;\n  public forwarderContractAddress: string | null;\n  public gasBufferMultiples: { [chainId: number]: number } | null;\n\n  constructor(\n    provider: BaseProvider,\n    signer: Signer,\n    chainId?: number,\n    additionalConfig?: NftSwapConfig\n  ) {\n    this.provider = provider;\n    this.signer = signer;\n    this.chainId =\n      chainId ?? (this.provider._network.chainId as SupportedChainIdsV3);\n\n    const chainDefaultContractAddresses: AddressesForChainV3 | undefined =\n      addresses[this.chainId as SupportedChainIdsV3];\n\n    const zeroExExchangeContractAddress =\n      additionalConfig?.exchangeContractAddress ??\n      chainDefaultContractAddresses?.exchange;\n\n    warning(\n      chainDefaultContractAddresses,\n      `Default contract addresses missing for chain ${this.chainId}. Supply ExchangeContract and Asset Proxy contracts manually via additionalConfig argument`\n    );\n\n    this.exchangeContractAddress = zeroExExchangeContractAddress;\n\n    this.erc20ProxyContractAddress =\n      additionalConfig?.erc20ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC20, this.chainId);\n    this.erc721ProxyContractAddress =\n      additionalConfig?.erc721ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC721, this.chainId);\n    this.erc1155ProxyContractAddress =\n      additionalConfig?.erc1155ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC1155, this.chainId);\n    this.forwarderContractAddress =\n      additionalConfig?.forwarderContractAddress ??\n      getForwarderAddress(this.chainId) ??\n      null;\n    this.wrappedNativeTokenContractAddress =\n      additionalConfig?.wrappedNativeTokenContractAddress ??\n      getWrappedNativeToken(this.chainId) ??\n      null;\n\n    invariant(\n      this.exchangeContractAddress,\n      '0x V3 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\n    );\n    warning(\n      this.erc20ProxyContractAddress,\n      'ERC20Proxy Contract Address not set, ERC20 swaps will not work'\n    );\n    warning(\n      this.erc721ProxyContractAddress,\n      'ERC721Proxy Contract Address not set, ERC721 swaps will not work'\n    );\n    warning(\n      this.erc1155ProxyContractAddress,\n      'ERC20Proxy Contract Address not set, ERC1155 swaps will not work'\n    );\n    warning(\n      this.forwarderContractAddress,\n      'Forwarder Contract Address not set, native token fills will not work'\n    );\n    warning(\n      this.wrappedNativeTokenContractAddress,\n      'WETH Contract Address not set, SDK cannot automatically check if order can be filled with native token'\n    );\n    warning(this.signer, 'No Signer provided; Read-only mode only.');\n\n    // Initialize Exchange contract so we can interact with it easily.\n    this.exchangeContract = ExchangeContract__factory.connect(\n      zeroExExchangeContractAddress,\n      signer ?? provider\n    );\n\n    this.gasBufferMultiples =\n      additionalConfig?.gasBufferMultiples ?? DEFAUTLT_GAS_BUFFER_MULTIPLES;\n  }\n\n  public cancelOrder = async (order: Order) => {\n    return _cancelOrder(this.exchangeContract, order);\n  };\n\n  /**\n   *\n   * @param order : 0x Order;\n   * @param timeoutInMs : Timeout in millisecond to give up listening for order fill\n   * @param throwIfStatusOtherThanFillableOrFilled : Option to throw if status changes from fillable to anything other than 'filled' (e.g 'cancelled')\n   * @returns OrderInfo if status change in order, or null if timed out\n   */\n  public waitUntilOrderFilledOrCancelled = async (\n    order: Order,\n    timeoutInMs: number = 60 * 1000,\n    pollOrderStatusFrequencyInMs: number = 10_000,\n    throwIfStatusOtherThanFillableOrFilled: boolean = false\n  ): Promise<OrderInfoV3 | null> => {\n    let settled = false;\n\n    const timeoutPromise = sleep(timeoutInMs).then((_) => null);\n\n    const orderStatusRefreshPromiseFn =\n      async (): Promise<OrderInfoV3 | null> => {\n        while (!settled) {\n          const orderInfo = await this.getOrderInfo(order);\n          if (orderInfo.orderStatus === OrderStatusV3.Fillable) {\n            await sleep(pollOrderStatusFrequencyInMs);\n            continue;\n          } else if (orderInfo.orderStatus === OrderStatusV3.FullyFilled) {\n            return orderInfo;\n          } else {\n            // expired, bad order, etc\n            if (throwIfStatusOtherThanFillableOrFilled) {\n              throw new Error(\n                OrderStatusCodeLookup[orderInfo.orderStatus] ??\n                  orderInfo.orderStatus ??\n                  'Unknown status'\n              );\n            }\n            return orderInfo;\n          }\n        }\n        return null;\n      };\n    const fillEventListenerFn = async () => {\n      // TODO(johnrjj)\n      await sleep(timeoutInMs * 2);\n      return null;\n    };\n\n    const orderStatusRefreshPromiseLoop: Promise<OrderInfoV3 | null> =\n      orderStatusRefreshPromiseFn();\n\n    const fillEventPromise: Promise<OrderInfoV3 | null> = fillEventListenerFn();\n\n    const orderInfo = await Promise.any([\n      timeoutPromise,\n      orderStatusRefreshPromiseLoop,\n      fillEventPromise,\n    ]);\n    settled = true;\n\n    return orderInfo;\n  };\n\n  public getOrderInfo = async (order: Order): Promise<OrderInfoV3> => {\n    return _getOrderInfo(this.exchangeContract, order);\n  };\n\n  public getOrderStatus = async (order: Order): Promise<OrderStatusV3> => {\n    const orderInfo = await this.getOrderInfo(order);\n    return orderInfo.orderStatus;\n  };\n\n  public awaitTransactionHash = async (txHash: string) => {\n    return this.provider.waitForTransaction(txHash);\n  };\n\n  public signOrder = async (\n    order: Order,\n    addressOfWalletSigningOrder: string,\n    signerOverride?: Signer,\n    signingOptions?: Partial<SigningOptionsV3>\n  ) => {\n    const signerToUser = signerOverride ?? this.signer;\n    if (!signerToUser) {\n      throw new Error('signOrder:Signer undefined');\n    }\n    return _signOrder(\n      order,\n      addressOfWalletSigningOrder,\n      signerToUser,\n      this.provider,\n      this.chainId,\n      this.exchangeContract.address,\n      signingOptions\n    );\n  };\n\n  public buildOrder = (\n    makerAssets: SwappableAsset[],\n    takerAssets: SwappableAsset[],\n    makerAddress: string,\n    userConfig?: Partial<BuildOrderAdditionalConfig>\n  ) => {\n    const defaultConfig = { chainId: this.chainId, makerAddress: makerAddress };\n    const config = { ...defaultConfig, ...userConfig };\n    return _buildOrder(\n      convertAssetsToInternalFormat(makerAssets),\n      convertAssetsToInternalFormat(takerAssets),\n      config\n    );\n  };\n\n  public loadApprovalStatus = async (\n    asset: SwappableAsset,\n    walletAddress: string\n  ) => {\n    // TODO(johnrjj) - Fix this...\n    const exchangeProxyAddressForAsset = getProxyAddressForErcType(\n      asset.type as SupportedTokenTypes,\n      this.chainId\n    );\n    const assetInternalFmt = convertAssetToInternalFormat(asset);\n    return _getApprovalStatus(\n      walletAddress,\n      exchangeProxyAddressForAsset,\n      assetInternalFmt,\n      this.provider\n    );\n  };\n\n  /**\n   * @param asset Asset in the SDK format\n   * @returns\n   */\n  public async approveTokenOrNftByAsset(\n    asset: SwappableAsset,\n    _walletAddress: string, // Remove in next release\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    otherOverrides?: Partial<ApprovalOverrides>\n  ) {\n    // TODO(johnrjj) - Look up via class fields instead...\n    const exchangeProxyAddressForAsset =\n      otherOverrides?.exchangeProxyContractAddressForAsset ??\n      getProxyAddressForErcType(\n        asset.type as SupportedTokenTypes,\n        this.chainId\n      );\n    const signerToUse = otherOverrides?.signer ?? this.signer;\n    if (!signerToUse) {\n      throw new Error('approveTokenOrNftByAsset:Signer null');\n    }\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\n    }\n    let gasBufferMultiple: number | undefined = undefined;\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\n      gasBufferMultiple = undefined;\n    } else {\n      gasBufferMultiple =\n        otherOverrides?.gasAmountBufferMultiple ??\n        this.getGasMultipleForChainId(this.chainId);\n    }\n    let maybeCustomGasLimit: BigNumberish | undefined;\n    if (gasBufferMultiple) {\n      const estimatedGasAmount = await _estimateGasForApproval(\n        exchangeProxyAddressForAsset,\n        convertAssetToInternalFormat(asset),\n        signerToUse,\n        approvalTransactionOverrides ?? {},\n        otherOverrides?.approve ?? true\n      );\n      maybeCustomGasLimit = Math.floor(\n        estimatedGasAmount.toNumber() * gasBufferMultiple\n      );\n    }\n\n    return _approveAsset(\n      exchangeProxyAddressForAsset,\n      convertAssetToInternalFormat(asset),\n      signerToUse,\n      {\n        gasLimit: maybeCustomGasLimit,\n        ...approvalTransactionOverrides,\n      },\n      otherOverrides?.approve ?? true\n    );\n  }\n\n  public getOrderHash = (order: Order) => {\n    return _hashOrder(order, this.chainId, this.exchangeContract.address);\n  };\n\n  public getTypedData = (\n    chainId: number,\n    exchangeContractAddress: string,\n    order: Order\n  ) => {\n    const domain = getEipDomain(chainId, exchangeContractAddress);\n    const types = EIP712_TYPES;\n    const value = order;\n    return {\n      domain,\n      types,\n      value,\n    };\n  };\n\n  /**\n   * Decodes readable order data (maker and taker assets) from the Order's encoded asset data\n   * @param order : 0x Order (or Signed Order);\n   * @returns Maker and taker assets for the order\n   */\n  public getAssetsFromOrder = (order: Order) => {\n    return _getAssetsFromOrder(order);\n  };\n\n  public checkIfOrderCanBeFilledWithNativeToken = (\n    order: Order,\n    wrappedNativeTokenContractAddress: string | undefined = this\n      .wrappedNativeTokenContractAddress ?? undefined\n  ): boolean => {\n    warning(\n      this.wrappedNativeTokenContractAddress,\n      'Wrapped native token contract address not set. Cannot determine if order can be filled with native token'\n    );\n    const decodedAssetData = decodeAssetData(order.takerAssetData);\n\n    // Can only fill with native token when taker asset is ERC20. (Multiasset is not supported)\n    if (\n      decodedAssetData.assetProxyId.toLowerCase() !==\n      AssetProxyId.ERC20.toLowerCase()\n    ) {\n      return false;\n    }\n\n    // If we get this far, we have a single asset (non-multiasset) ERC20 for the taker token.\n    // Let's check if it is the wrapped native contract address for this chain (e.g. WETH on mainnet or rinkeby, WMATIC on polygon)\n    const erc20TokenAddress = (decodedAssetData as ERC20AssetDataSerialized)\n      .tokenAddress;\n    invariant(\n      erc20TokenAddress,\n      'ERC20 token address missing from detected ERC20 asset data'\n    );\n\n    return (\n      erc20TokenAddress.toLowerCase() ===\n      wrappedNativeTokenContractAddress?.toLowerCase()\n    );\n  };\n\n  public fillSignedOrder = async (\n    signedOrder: SignedOrder,\n    fillOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides: Partial<PayableOverrides> = {}\n  ) => {\n    const exchangeContract =\n      fillOverrides?.exchangeContract ?? this.exchangeContract;\n    let gasBufferMultiple: number | undefined = undefined;\n    if (fillOverrides?.gasAmountBufferMultiple === null) {\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\n      gasBufferMultiple = undefined;\n    } else {\n      gasBufferMultiple =\n        fillOverrides?.gasAmountBufferMultiple ??\n        this.getGasMultipleForChainId(this.chainId);\n    }\n    let maybeCustomGasLimit: BigNumberish | undefined;\n    if (gasBufferMultiple) {\n      const estimatedGasAmount = await _estimateGasForFillOrder(\n        signedOrder,\n        exchangeContract\n      );\n      // NOTE(johnrjj) - Underflow issues, so we convert to number. Gas amounts shouldn't overflow.\n      maybeCustomGasLimit = Math.floor(\n        estimatedGasAmount.toNumber() * gasBufferMultiple\n      );\n    }\n\n    const allTxOverrides: Partial<PayableOverrides> = {\n      gasLimit: maybeCustomGasLimit,\n      ...transactionOverrides,\n    };\n\n    if (fillOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken) {\n      const eligibleForNativeTokenFill =\n        this.checkIfOrderCanBeFilledWithNativeToken(signedOrder);\n      warning(\n        eligibleForNativeTokenFill,\n        `Order ineligible for native token fill, fill will fail.`\n      );\n      invariant(\n        this.forwarderContractAddress,\n        'Forwarder contract address null, cannot fill order in native token'\n      );\n      const forwarderContract = Forwarder__factory.connect(\n        this.forwarderContractAddress,\n        this.signer ?? this.provider\n      );\n      const amountOfEthToFillWith = signedOrder.takerAssetAmount;\n      return forwarderContract.marketBuyOrdersWithEth(\n        [signedOrder],\n        signedOrder.makerAssetAmount,\n        [signedOrder.signature],\n        [],\n        [],\n        {\n          value: amountOfEthToFillWith,\n          ...allTxOverrides,\n        }\n      );\n    }\n\n    return _fillSignedOrder(signedOrder, exchangeContract, allTxOverrides);\n  };\n\n  private getGasMultipleForChainId = (chainId: number): number | undefined => {\n    if (this.gasBufferMultiples) {\n      return this.gasBufferMultiples[this.chainId];\n    }\n    return undefined;\n  };\n\n  public normalizeOrder = (order: Order): Order => {\n    const normalizedOrder = _normalizeOrder(order);\n    return normalizedOrder as Order;\n  };\n\n  public normalizeSignedOrder = (order: SignedOrder): SignedOrder => {\n    const normalizedOrder = _normalizeOrder(order);\n    return normalizedOrder as SignedOrder;\n  };\n\n  public verifyOrderSignature = (\n    order: Order,\n    signature: string,\n    chainId: number,\n    exchangeContractAddress: string\n  ) => {\n    return _verifyOrderSignature(\n      order,\n      signature,\n      chainId,\n      exchangeContractAddress\n    );\n  };\n}\n\nexport { NftSwapV3 };\n","export const EIP712_DOMAIN_PARAMETERS = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n];\n\nexport const ERC721ORDER_STRUCT_NAME = 'ERC721Order';\n\nexport const ERC721ORDER_STRUCT_ABI = [\n  { type: 'uint8', name: 'direction' },\n  { type: 'address', name: 'maker' },\n  { type: 'address', name: 'taker' },\n  { type: 'uint256', name: 'expiry' },\n  { type: 'uint256', name: 'nonce' },\n  { type: 'address', name: 'erc20Token' },\n  { type: 'uint256', name: 'erc20TokenAmount' },\n  { type: 'Fee[]', name: 'fees' },\n  { type: 'address', name: 'erc721Token' },\n  { type: 'uint256', name: 'erc721TokenId' },\n  { type: 'Property[]', name: 'erc721TokenProperties' },\n];\n\nexport const EIP1155_DOMAIN_PARAMETERS = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n];\n\nexport const ERC1155ORDER_STRUCT_NAME = 'ERC1155Order';\nexport const ERC1155ORDER_STRUCT_ABI = [\n  { type: 'uint8', name: 'direction' },\n  { type: 'address', name: 'maker' },\n  { type: 'address', name: 'taker' },\n  { type: 'uint256', name: 'expiry' },\n  { type: 'uint256', name: 'nonce' },\n  { type: 'address', name: 'erc20Token' },\n  { type: 'uint256', name: 'erc20TokenAmount' },\n  { type: 'Fee[]', name: 'fees' },\n  { type: 'address', name: 'erc1155Token' },\n  { type: 'uint256', name: 'erc1155TokenId' },\n  { type: 'Property[]', name: 'erc1155TokenProperties' },\n  { type: 'uint128', name: 'erc1155TokenAmount' },\n];\n\nexport const FEE_ABI = [\n  { type: 'address', name: 'recipient' },\n  { type: 'uint256', name: 'amount' },\n  { type: 'bytes', name: 'feeData' },\n];\n\nexport const PROPERTY_ABI = [\n  { type: 'address', name: 'propertyValidator' },\n  { type: 'bytes', name: 'propertyData' },\n];\n\nexport const ETH_ADDRESS_AS_ERC20 =\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\nexport const NATIVE_TOKEN_ADDRESS_AS_ERC20 =\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { hexDataLength, hexDataSlice } from '@ethersproject/bytes';\nimport type { BaseProvider } from '@ethersproject/providers';\nimport type { ContractTransaction } from '@ethersproject/contracts';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport { v4 } from 'uuid';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\nimport padEnd from 'lodash/padEnd';\nimport padStart from 'lodash/padStart';\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n} from '../../contracts';\nimport { NULL_ADDRESS } from '../../utils/eth';\nimport { UnexpectedAssetTypeError } from '../error';\nimport type {\n  ECSignature,\n  ERC721OrderStruct,\n  ERC721OrderStructSerialized,\n  ERC1155OrderStruct,\n  ERC1155OrderStructSerialized,\n  NftOrderV4,\n  OrderStructOptionsCommon,\n  OrderStructOptionsCommonStrict,\n  SignedNftOrderV4,\n  SignedNftOrderV4Serialized,\n  SwappableAssetV4,\n  UserFacingERC20AssetDataSerializedV4,\n  UserFacingERC721AssetDataSerializedV4,\n  UserFacingERC1155AssetDataSerializedV4,\n  ApprovalOverrides,\n} from './types';\nimport { ApprovalStatus, TransactionOverrides } from '../common/types';\nimport {\n  ERC721ORDER_STRUCT_NAME,\n  ERC721ORDER_STRUCT_ABI,\n  ERC1155ORDER_STRUCT_NAME,\n  ERC1155ORDER_STRUCT_ABI,\n  FEE_ABI,\n  PROPERTY_ABI,\n  ETH_ADDRESS_AS_ERC20,\n} from './constants';\n\nexport const signOrderWithEoaWallet = async (\n  order: NftOrderV4,\n  signer: TypedDataSigner,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  if ((order as ERC1155OrderStruct).erc1155Token) {\n    const domain = {\n      chainId: chainId,\n      verifyingContract: exchangeContractAddress,\n      name: 'ZeroEx',\n      version: '1.0.0',\n    };\n    const types = {\n      [ERC1155ORDER_STRUCT_NAME]: ERC1155ORDER_STRUCT_ABI,\n      Fee: FEE_ABI,\n      Property: PROPERTY_ABI,\n    };\n    const value = order;\n\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\n      domain,\n      types,\n      value\n    );\n\n    return rawSignatureFromEoaWallet;\n  }\n\n  if ((order as ERC721OrderStruct).erc721Token) {\n    const domain = {\n      chainId: chainId,\n      verifyingContract: exchangeContractAddress,\n      name: 'ZeroEx',\n      version: '1.0.0',\n    };\n    const types = {\n      [ERC721ORDER_STRUCT_NAME]: ERC721ORDER_STRUCT_ABI,\n      Fee: FEE_ABI,\n      Property: PROPERTY_ABI,\n    };\n    const value = order;\n\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\n      domain,\n      types,\n      value\n    );\n\n    return rawSignatureFromEoaWallet;\n  }\n\n  warning(!order, 'Unknown order type');\n  throw new Error(`Unknown order type`);\n};\n\n/**\n *\n * @param walletAddress Owner of the asset\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param provider\n * @returns\n */\nexport const getApprovalStatus = async (\n  walletAddress: string,\n  exchangeProxyAddressForAsset: string,\n  asset: SwappableAssetV4,\n  provider: BaseProvider\n): Promise<ApprovalStatus> => {\n  switch (asset.type) {\n    case 'ERC20':\n      // ETH (ERC20 representation) requires no approvals, we can shortcut here\n      if (asset.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\n        return {\n          contractApproved: true,\n        };\n      }\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\n        MAX_APPROVAL.toString()\n      ).sub('100000000000000000');\n      const approvedForMax = erc20AllowanceBigNumber.gte(\n        MAX_APPROVAL_WITH_BUFFER\n      );\n      return {\n        contractApproved: approvedForMax,\n      };\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\n        asset.tokenId\n      );\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\n        await Promise.all([\n          erc721ApprovalForAllPromise,\n          erc721ApprovedAddressForIdPromise,\n        ]);\n      const tokenIdApproved =\n        erc721ApprovedAddressForId.toLowerCase() ===\n        exchangeProxyAddressForAsset.toLowerCase();\n      return {\n        contractApproved: erc721ApprovalForAll ?? false,\n        tokenIdApproved: tokenIdApproved,\n      };\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      return {\n        contractApproved: erc1155ApprovalForAll ?? false,\n      };\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Some arbitrarily high number.\n// TODO(johnrjj) - Support custom ERC20 approval amounts\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const approveAsset = async (\n  exchangeProxyAddressForAsset: string,\n  asset: SwappableAssetV4,\n  signer: Signer,\n  txOverrides: Partial<TransactionOverrides> = {},\n  approvalOrderrides?: Partial<ApprovalOverrides>\n): Promise<ContractTransaction> => {\n  const approve = approvalOrderrides?.approve ?? true;\n\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL.toString() : 0,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      // If consumer prefers only to approve the tokenId, only approve tokenId\n      if (approvalOrderrides?.approvalOnlyTokenIdIfErc721) {\n        const erc721ApprovalForOnlyTokenId = erc721.approve(\n          exchangeProxyAddressForAsset,\n          asset.tokenId,\n          {\n            ...txOverrides,\n          }\n        );\n        return erc721ApprovalForOnlyTokenId;\n      }\n      // Otherwise default to approving entire contract\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      // ERC1155s can only approval all\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Parse a hex signature returned by an RPC call into an `ECSignature`.\nexport function parseRawSignature(rawSignature: string): ECSignature {\n  const hexSize = hexDataLength(rawSignature);\n  // if (hexUtils.size(rpcSig) !== 65) {\n  //     throw new Error(`Invalid RPC signature length: \"${rpcSig}\"`);\n  // }\n  if (hexSize !== 65) {\n    throw new Error(\n      `Invalid signature length, expected 65, got ${hexSize}.\\n\"Raw signature: ${rawSignature}\"`\n    );\n  }\n  // Some providers encode V as 0,1 instead of 27,28.\n  const VALID_V_VALUES = [0, 1, 27, 28];\n  // Some providers return the signature packed as V,R,S and others R,S,V.\n  // Try to guess which encoding it is (with a slight preference for R,S,V).\n  // let v = parseInt(rpcSig.slice(-2), 16);\n  let v = parseInt(rawSignature.slice(-2), 16);\n\n  if (VALID_V_VALUES.includes(v)) {\n    // Format is R,S,V\n    v = v >= 27 ? v : v + 27;\n    return {\n      // r: hexDataSlice.slice(rpcSig, 0, 32),\n      // s: hexUtils.slice(rpcSig, 32, 64),\n      r: hexDataSlice(rawSignature, 0, 32),\n      s: hexDataSlice(rawSignature, 32, 64),\n      v,\n    };\n  }\n  // Format should be V,R,S\n  // v = parseInt(rpcSig.slice(2, 4), 16);\n  v = parseInt(rawSignature.slice(2, 4), 16);\n  if (!VALID_V_VALUES.includes(v)) {\n    throw new Error(\n      `Cannot determine RPC signature layout from V value: \"${rawSignature}\"`\n    );\n  }\n  v = v >= 27 ? v : v + 27;\n  return {\n    v,\n    r: hexDataSlice(rawSignature, 1, 33),\n    s: hexDataSlice(rawSignature, 33, 65),\n  };\n}\n\nexport const INFINITE_EXPIRATION_TIMESTAMP_SEC = BigNumber.from(2524604400);\n\nexport const generateErc721Order = (\n  nft: UserFacingERC721AssetDataSerializedV4,\n  erc20: UserFacingERC20AssetDataSerializedV4,\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\n): ERC721OrderStructSerialized => {\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\n  if (orderData.expiry) {\n    // If number or string is provided, assume given as unix timestamp\n    if (\n      typeof orderData.expiry === 'number' ||\n      typeof orderData.expiry === 'string'\n    ) {\n      expiry = orderData.expiry.toString();\n    } else {\n      // If date is provided, convert to unix timestamp\n      expiry = getUnixTime(orderData.expiry).toString();\n    }\n  }\n  const erc721Order: ERC721OrderStructSerialized = {\n    erc721Token: nft.tokenAddress.toLowerCase(),\n    erc721TokenId: nft.tokenId,\n    direction: parseInt(orderData.direction.toString()), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\n    erc20Token: erc20.tokenAddress.toLowerCase(),\n    erc20TokenAmount: erc20.amount,\n    maker: orderData.maker.toLowerCase(),\n    // Defaults not required...\n    erc721TokenProperties:\n      orderData.tokenProperties?.map((property) => ({\n        propertyData: property.propertyData,\n        propertyValidator: property.propertyValidator,\n      })) ?? [],\n    fees:\n      orderData.fees?.map((x) => {\n        return {\n          amount: x.amount.toString(),\n          recipient: x.recipient.toLowerCase(),\n          feeData: x.feeData?.toString() ?? '0x',\n        };\n      }) ?? [],\n    expiry: expiry,\n    nonce:\n      orderData.nonce?.toString() ??\n      generateRandomV4OrderNonce(orderData.appId),\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\n  };\n\n  return erc721Order;\n};\n\nexport const generateErc1155Order = (\n  nft: UserFacingERC1155AssetDataSerializedV4,\n  erc20: UserFacingERC20AssetDataSerializedV4,\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\n): ERC1155OrderStructSerialized => {\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\n  if (orderData.expiry) {\n    // If number or string is provided, assume given as unix timestamp\n    if (\n      typeof orderData.expiry === 'number' ||\n      typeof orderData.expiry === 'string'\n    ) {\n      expiry = orderData.expiry.toString();\n    } else {\n      // If date is provided, convert to unix timestamp\n      expiry = getUnixTime(orderData.expiry).toString();\n    }\n  }\n  const erc1155Order: ERC1155OrderStructSerialized = {\n    erc1155Token: nft.tokenAddress.toLowerCase(),\n    erc1155TokenId: nft.tokenId,\n    erc1155TokenAmount: nft.amount ?? '1',\n    direction: parseInt(orderData.direction.toString(10)), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\n    erc20Token: erc20.tokenAddress.toLowerCase(),\n    erc20TokenAmount: erc20.amount,\n    maker: orderData.maker.toLowerCase(),\n    // Defaults not required...\n    erc1155TokenProperties:\n      orderData.tokenProperties?.map((property) => ({\n        propertyData: property.propertyData.toString(),\n        propertyValidator: property.propertyValidator,\n      })) ?? [],\n    fees:\n      orderData.fees?.map((fee) => {\n        return {\n          amount: fee.amount.toString(),\n          recipient: fee.recipient.toLowerCase(),\n          feeData: fee.feeData?.toString() ?? '0x',\n        };\n      }) ?? [],\n    expiry: expiry,\n    nonce:\n      orderData.nonce?.toString() ??\n      generateRandomV4OrderNonce(orderData.appId),\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\n  };\n\n  return erc1155Order;\n};\n\n// Number of digits in base 10 128bit nonce\n// floor(log_10(2^128 - 1)) + 1\nexport const ONE_TWENTY_EIGHT_BIT_LENGTH = 39;\n\n// Max nonce digit length in base 10\n// floor(log_10(2^256 - 1)) + 1\nexport const TWO_FIFTY_SIX_BIT_LENGTH = 78;\n\nconst checkIfStringContainsOnlyNumbers = (val: string) => {\n  const onlyNumbers = /^\\d+$/.test(val);\n  return onlyNumbers;\n};\n\nexport const RESERVED_APP_ID_PREFIX = '1001';\nconst RESERVED_APP_ID_PREFIX_DIGITS = RESERVED_APP_ID_PREFIX.length;\n\nexport const DEFAULT_APP_ID = '314159';\n\nexport const verifyAppIdOrThrow = (appId: string) => {\n  const isCorrectLength =\n    appId.length <= ONE_TWENTY_EIGHT_BIT_LENGTH - RESERVED_APP_ID_PREFIX_DIGITS;\n  const hasOnlyNumbers = checkIfStringContainsOnlyNumbers(appId);\n  invariant(isCorrectLength, 'appId must be 39 digits or less');\n  invariant(\n    hasOnlyNumbers,\n    'appId must be numeric only (no alpha or special characters, only numbers)'\n  );\n};\n\n/**\n * Generates a 256bit nonce.\n * The format:\n *   First 128bits:  ${SDK_PREFIX}${APP_ID}000000 (right padded zeroes to fill)\n *   Second 128bits: ${RANDOM_GENERATED_128BIT_ORDER_HASH}\n * @returns 128bit nonce as string (0x orders can handle up to 256 bit nonce)\n */\nexport const generateRandomV4OrderNonce = (\n  appId: string = DEFAULT_APP_ID\n): string => {\n  if (appId) {\n    verifyAppIdOrThrow(appId);\n  }\n  const order128 = padStart(\n    generateRandom128BitNumber(),\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\n    '0'\n  );\n  const appId128 = padEnd(\n    `${RESERVED_APP_ID_PREFIX}${appId}`,\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\n    '0'\n  );\n  const final256BitNonce = `${appId128}${order128}`;\n  invariant(\n    final256BitNonce.length <= TWO_FIFTY_SIX_BIT_LENGTH,\n    'Invalid nonce size'\n  );\n  return final256BitNonce;\n};\n\n// uuids are 128bits\nexport const generateRandom128BitNumber = (base = 10): string => {\n  const hex = '0x' + v4().replace(/-/g, '');\n  const value = BigInt(hex);\n  const valueBase10String = value.toString(base); // don't convert this to a number, will lose precision\n  return valueBase10String;\n};\n\nexport const serializeNftOrder = (\n  signedOrder: SignedNftOrderV4\n): SignedNftOrderV4Serialized => {\n  if ('erc721Token' in signedOrder) {\n    return {\n      ...signedOrder,\n      direction: parseInt(signedOrder.direction.toString()),\n      expiry: signedOrder.expiry.toString(),\n      nonce: signedOrder.nonce.toString(),\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\n      fees: signedOrder.fees.map((fee) => ({\n        ...fee,\n        amount: fee.amount.toString(),\n        feeData: fee.feeData.toString(),\n      })),\n      erc721TokenId: signedOrder.erc721TokenId.toString(),\n    };\n  } else if ('erc1155Token' in signedOrder) {\n    return {\n      ...signedOrder,\n      direction: parseInt(signedOrder.direction.toString()),\n      expiry: signedOrder.expiry.toString(),\n      nonce: signedOrder.nonce.toString(),\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\n      fees: signedOrder.fees.map((fee) => ({\n        ...fee,\n        amount: fee.amount.toString(),\n        feeData: fee.feeData.toString(),\n      })),\n      erc1155TokenAmount: signedOrder.erc1155TokenAmount.toString(),\n      erc1155TokenId: signedOrder.erc1155TokenId.toString(),\n    };\n  } else {\n    console.log(\n      'unknown order format type (not erc721 and not erc1155',\n      signedOrder\n    );\n    throw new Error('Unknown asset type');\n  }\n};\n","export const ERC721_TRANSFER_FROM_DATA = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n    ],\n    name: 'safeTransferFromErc721Data',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport const ERC1155_TRANSFER_FROM_DATA = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n    ],\n    name: 'safeTransferFromErc1155Data',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","import unfetch from 'isomorphic-unfetch';\nimport { stringify } from 'query-string';\nimport type { SignedNftOrderV4, SignedNftOrderV4Serialized } from './types';\nimport { serializeNftOrder } from './pure';\n\nexport const ORDERBOOK_API_ROOT_URL_PRODUCTION = 'https://api.trader.xyz';\n\nexport interface OrderbookRequestOptions {\n  rootUrl: string;\n}\n\nexport interface PostOrderRequestPayload {\n  order: SignedNftOrderV4Serialized;\n  chainId: string;\n  metadata?: Record<string, string>;\n}\n\nexport interface PostOrderResponsePayload {\n  erc20Token: string;\n  erc20TokenAmount: string;\n  nftToken: string;\n  nftTokenId: string;\n  nftTokenAmount: string;\n  nftType: string;\n  sellOrBuyNft: 'buy' | 'sell';\n  chainId: string;\n  order: SignedNftOrderV4Serialized;\n  metadata: Record<string, string> | null;\n}\n\nexport interface SearchOrdersResponsePayload {\n  orders: Array<PostOrderResponsePayload>;\n}\n\nconst postOrderToOrderbook = async (\n  signedOrder: SignedNftOrderV4,\n  chainId: string | number,\n  metadata: Record<string, string> = {},\n  requestOptions?: Partial<OrderbookRequestOptions>,\n  fetchFn: typeof unfetch = unfetch\n): Promise<PostOrderResponsePayload> => {\n  const payload: PostOrderRequestPayload = {\n    order: serializeNftOrder(signedOrder),\n    chainId: chainId.toString(10),\n    metadata,\n  };\n\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n  const orderPostResult: PostOrderResponsePayload = await fetchFn(\n    `${rootUrl}/orderbook/order`,\n    {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    }\n  )\n    .then(async (res) => {\n      if (!res.ok) {\n        throw await res.json();\n      }\n      if (res.status >= 300) {\n        throw await res.json();\n      }\n      return res.json();\n    })\n    .catch((err) => {\n      // err is not a promise\n      throw err;\n    });\n\n  return orderPostResult;\n};\n\n/**\n * Available query parameters for searching the orderbook\n */\nexport interface SearchOrdersParams {\n  nftTokenId: string | string[];\n  erc20Token: string | string[];\n  nftToken: string | string[];\n  nftType: 'ERC721' | 'ERC1155';\n  chainId: string | number | string[] | number[];\n  maker: string;\n  taker: string;\n  nonce: string | string[];\n  offset: string | number;\n  limit: string | number;\n  sellOrBuyNft: 'sell' | 'buy';\n  direction: '0' | '1';\n  // Defaults to only 'open' orders\n  status: 'open' | 'filled' | 'expired' | 'cancelled' | 'all';\n  visibility: 'public' | 'private';\n  valid: 'valid' | 'all';\n}\n\n/**\n * Search through the public hosted orderbook\n * @param filters Optional query param filters\n * @param requestOptions Fetch options/overrides\n * @param fetchFn Optional fetch function override. Uses unfetch by default.\n * @returns\n */\nconst searchOrderbook = async (\n  filters?: Partial<SearchOrdersParams>,\n  requestOptions?: Partial<OrderbookRequestOptions>,\n  fetchFn: typeof unfetch = unfetch\n): Promise<SearchOrdersResponsePayload> => {\n  // https://github.com/sindresorhus/query-string#arrayformat\n  const stringifiedQueryParams = stringify(filters ?? {}, {\n    arrayFormat: 'none',\n  });\n\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n  const findOrdersResult = await fetchFn(\n    `${rootUrl}/orderbook/orders?${stringifiedQueryParams}`\n  )\n    .then(async (res) => {\n      if (!res.ok) {\n        throw await res.json();\n      }\n      if (res.status >= 300) {\n        throw await res.json();\n      }\n      return res.json();\n    })\n    .catch((err) => {\n      // err is not a promise\n      throw err;\n    });\n\n  return findOrdersResult;\n};\n\nexport { postOrderToOrderbook, searchOrderbook };\n","import { SupportedChainIdsV4 } from '../sdk';\nimport defaultAddresses from '../sdk/v4/addresses.json';\n\nexport const getWrappedNativeToken = (\n  chainId: number | string\n): string | null => {\n  const chainIdString = chainId.toString(10);\n  const zeroExAddresses:\n    | { exchange: string; wrappedNativeToken: string }\n    | undefined =\n    defaultAddresses[chainIdString as unknown as SupportedChainIdsV4];\n  return zeroExAddresses?.wrappedNativeToken ?? null;\n};\n","export enum TradeDirection {\n  /**\n   * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\n   */\n  SellNFT = 0,\n  /**\n   * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\n   */\n  BuyNFT = 1,\n}\n\nexport enum OrderStatusV4 {\n  Invalid = 0,\n  Fillable = 1,\n  Unfillable = 2,\n  Expired = 3,\n}\n\nexport type DirectionMap = {\n  [key in TradeDirection]: 'buy' | 'sell' | undefined;\n};\n\n/**\n * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\n * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\n */\nexport const DIRECTION_MAPPING: DirectionMap = {\n  [TradeDirection.BuyNFT]: 'buy',\n  [TradeDirection.SellNFT]: 'sell',\n};\n","import { NULL_ADDRESS } from '../../utils/eth';\nimport { PropertyStruct } from './types';\n\n/**\n * Contract-based orders property validator.\n * Add this to your order's tokenProperties to make it a collection order\n */\nexport const CONTRACT_ORDER_VALIDATOR: PropertyStruct = {\n  propertyValidator: NULL_ADDRESS,\n  propertyData: [],\n};\n","import type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport type {\n  BaseProvider,\n  TransactionReceipt,\n} from '@ethersproject/providers';\nimport { BigNumber, BigNumberish, ContractTransaction } from 'ethers';\nimport { Interface } from '@ethersproject/abi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport {\n  ERC1155__factory,\n  ERC721__factory,\n  ERC20__factory,\n  IZeroEx,\n  IZeroEx__factory,\n} from '../../contracts';\nimport type {\n  ApprovalStatus,\n  BaseNftSwap,\n  PayableOverrides,\n  TransactionOverrides,\n} from '../common/types';\nimport { UnexpectedAssetTypeError } from '../error';\nimport {\n  approveAsset,\n  DEFAULT_APP_ID,\n  generateErc1155Order,\n  generateErc721Order,\n  getApprovalStatus,\n  parseRawSignature,\n  signOrderWithEoaWallet,\n  verifyAppIdOrThrow,\n} from './pure';\nimport type {\n  AddressesForChainV4,\n  ApprovalOverrides,\n  ERC721OrderStruct,\n  FillOrderOverrides,\n  NftOrderV4,\n  NftOrderV4Serialized,\n  OrderStructOptionsCommonStrict,\n  SignedERC1155OrderStruct,\n  SignedERC1155OrderStructSerialized,\n  SignedERC721OrderStruct,\n  SignedERC721OrderStructSerialized,\n  SignedNftOrderV4,\n  SigningOptionsV4,\n  SwappableAssetV4,\n  UserFacingERC1155AssetDataSerializedV4,\n  UserFacingERC20AssetDataSerializedV4,\n  UserFacingERC721AssetDataSerializedV4,\n} from './types';\nimport {\n  ERC1155_TRANSFER_FROM_DATA,\n  ERC721_TRANSFER_FROM_DATA,\n} from './nft-safe-transfer-from-data';\nimport addresses from './addresses.json';\nimport {\n  searchOrderbook,\n  postOrderToOrderbook,\n  PostOrderResponsePayload,\n  SearchOrdersParams,\n  ORDERBOOK_API_ROOT_URL_PRODUCTION,\n  SearchOrdersResponsePayload,\n} from './orderbook';\nimport { getWrappedNativeToken } from '../../utils/addresses';\nimport { DIRECTION_MAPPING, OrderStatusV4, TradeDirection } from './enums';\nimport { CONTRACT_ORDER_VALIDATOR } from './properties';\nimport { ETH_ADDRESS_AS_ERC20 } from './constants';\nimport { ZERO_AMOUNT } from '../../utils/eth';\nimport { arrayify } from '@ethersproject/bytes';\n\nexport enum SupportedChainIdsV4 {\n  Mainnet = 1,\n  Ropsten = 3,\n  Goerli = 5,\n  Ubiq = 8,\n  Ganache = 1337,\n  Polygon = 137,\n  PolygonMumbai = 80001,\n  BSC = 56,\n  Optimism = 10,\n  Fantom = 250,\n  Celo = 42220,\n  Avalance = 43114,\n  // Arbitrum = 42161, // soon\n}\n\nexport const SupportedChainsForV4OrderbookStatusMonitoring = [\n  SupportedChainIdsV4.Polygon,\n  SupportedChainIdsV4.PolygonMumbai,\n  SupportedChainIdsV4.Mainnet,\n  SupportedChainIdsV4.Optimism,\n  SupportedChainIdsV4.Goerli,\n];\n\nexport interface INftSwapV4 extends BaseNftSwap {\n  signOrder: (\n    order: NftOrderV4,\n    signerAddress: string,\n    signer: Signer,\n    signingOptions?: Partial<SigningOptionsV4>\n  ) => Promise<SignedNftOrderV4>;\n  buildNftAndErc20Order: (\n    nft:\n      | UserFacingERC721AssetDataSerializedV4\n      | UserFacingERC1155AssetDataSerializedV4,\n    erc20: UserFacingERC20AssetDataSerializedV4,\n    sellOrBuyNft: 'sell' | 'buy',\n    makerAddress: string,\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\n  ) => NftOrderV4Serialized;\n  loadApprovalStatus: (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalOverrides?: Partial<ApprovalOverrides>\n  ) => Promise<ApprovalStatus>;\n  approveTokenOrNftByAsset: (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    approvalOverrides?: Partial<ApprovalOverrides>\n  ) => Promise<ContractTransaction>;\n  fillSignedOrder: (\n    signedOrder: SignedNftOrderV4,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => Promise<ContractTransaction>;\n  awaitTransactionHash: (txHash: string) => Promise<TransactionReceipt>;\n  cancelOrder: (\n    nonce: BigNumberish,\n    orderType: 'ERC721' | 'ERC1155' // Can we make this optional\n  ) => Promise<ContractTransaction>;\n  matchOrders: (\n    sellOrder: SignedNftOrderV4,\n    buyOrder: SignedNftOrderV4,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => Promise<ContractTransaction>;\n  // waitUntilOrderFilledOrCancelled: (\n  //   order: NftOrderV4,\n  //   timeoutInMs?: number,\n  //   pollOrderStatusFrequencyInMs?: number,\n  //   throwIfStatusOtherThanFillableOrFilled?: boolean\n  // ) => Promise<OrderStatus | null>;\n  getOrderStatus: (order: NftOrderV4) => Promise<OrderStatusV4>;\n  // getOrderHash: (order: NftOrderV4) => string;\n  // getTypedData: (\n  //   chainId: number,\n  //   exchangeContractAddress: string,\n  //   order: NftOrderV4\n  // ) => TypedData;\n  // normalizeSignedOrder: (order: SignedNftOrderV4) => SignedNftOrderV4;\n  // normalizeOrder: (order: NftOrderV4) => NftOrderV4;\n  // verifyOrderSignature: (\n  //   order: NftOrderV4,\n  //   signature: string,\n  //   chainId: number,\n  //   exchangeContractAddress: string\n  // ) => boolean;\n  // checkIfOrderCanBeFilledWithNativeToken: (order: NftOrderV4) => boolean;\n  // getAssetsFromOrder: (order: NftOrderV4) => {\n  //   makerAssets: SwappableAsset[];\n  //   takerAssets: SwappableAsset[];\n  // };\n}\n\nexport interface AdditionalSdkConfig {\n  // Identify your app fills with distinct integer\n  appId: string;\n  // Custom zeroex proxy contract address (defaults to the canonical contracts deployed by 0x Labs core team)\n  zeroExExchangeProxyContractAddress: string;\n  // Custom orderbook url. Defaults to using Trader.xyz's multi-chain open orderbook\n  orderbookRootUrl: string;\n}\n\nclass NftSwapV4 implements INftSwapV4 {\n  // RPC provider\n  public provider: BaseProvider;\n  // Wallet signer\n  public signer: Signer | undefined;\n  // Chain Id for this instance of NftSwapV4.\n  // To switch chains, instantiate a new version of NftSWapV4 with the updated chain id.\n  public chainId: number;\n\n  // ZeroEx ExchangeProxy contract address to reference\n  public exchangeProxyContractAddress: string;\n  // Generated ZeroEx ExchangeProxy contracts\n  public exchangeProxy: IZeroEx;\n\n  // Unique identifier for app. Must be a positive integer between 1 and 2**128\n  public appId: string;\n\n  // Orderbook URL\n  public orderbookRootUrl: string;\n\n  constructor(\n    provider: BaseProvider,\n    signer: Signer,\n    chainId?: number | string,\n    additionalConfig?: Partial<AdditionalSdkConfig>\n  ) {\n    this.provider = provider;\n    this.signer = signer;\n    this.chainId = chainId\n      ? parseInt(chainId.toString(10), 10)\n      : (this.provider._network.chainId as SupportedChainIdsV4);\n\n    const defaultAddressesForChain: AddressesForChainV4 | undefined =\n      addresses[this.chainId as SupportedChainIdsV4];\n\n    const zeroExExchangeContractAddress =\n      additionalConfig?.zeroExExchangeProxyContractAddress ??\n      defaultAddressesForChain?.exchange;\n\n    invariant(\n      zeroExExchangeContractAddress,\n      '0x V4 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\n    );\n\n    this.exchangeProxyContractAddress = zeroExExchangeContractAddress;\n\n    this.orderbookRootUrl =\n      additionalConfig?.orderbookRootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n    this.appId = additionalConfig?.appId ?? DEFAULT_APP_ID;\n    verifyAppIdOrThrow(this.appId);\n\n    this.exchangeProxy = IZeroEx__factory.connect(\n      zeroExExchangeContractAddress,\n      signer ?? provider\n    );\n  }\n\n  /**\n   * Checks if an asset is approved for trading with 0x v4\n   * If an asset is not approved, call approveTokenOrNftByAsset to approve.\n   * @param asset A tradeable asset (ERC20, ERC721, or ERC1155)\n   * @param walletAddress The wallet address that owns the asset\n   * @param approvalOverrides Optional config options for approving\n   * @returns\n   */\n  loadApprovalStatus = (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalOverrides?: Partial<ApprovalOverrides> | undefined\n  ): Promise<ApprovalStatus> => {\n    // TODO(johnrjj) - Fix to pass thru more args...\n    return getApprovalStatus(\n      walletAddress,\n      approvalOverrides?.exchangeContractAddress ?? this.exchangeProxy.address,\n      asset,\n      this.provider\n    );\n  };\n\n  /**\n   * Convenience function to await a transaction hash.\n   * During a fill order call, you can get the pending transaction hash and await it manually via this method.\n   * @param txHash Transaction hash to await\n   * @returns\n   */\n  awaitTransactionHash = async (txHash: string) => {\n    return this.provider.waitForTransaction(txHash);\n  };\n\n  /**\n   * Cancels an 0x v4 order. Once cancelled, the order no longer fillable.\n   * Requires a signer\n   * @param nonce\n   * @param orderType\n   * @returns Transaciton Receipt\n   */\n  cancelOrder = (\n    nonce: BigNumberish,\n    orderType: 'ERC721' | 'ERC1155'\n  ): Promise<ContractTransaction> => {\n    if (orderType === 'ERC721') {\n      return this.exchangeProxy.cancelERC721Order(nonce);\n    }\n    if (orderType === 'ERC1155') {\n      return this.exchangeProxy.cancelERC1155Order(nonce);\n    }\n    console.log('unsupported order', orderType);\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Batch fill NFT sell orders\n   * Can be used by taker to fill multiple NFT sell orders atomically.\n   * E.g. A taker has a shopping cart full of NFTs to buy, can call this method to fill them all.\n   * Requires a valid signer to execute transaction\n   * @param signedOrders Signed 0x NFT sell orders\n   * @param revertIfIncomplete Revert if we don't fill _all_ orders (defaults to false)\n   * @param transactionOverrides Ethers transaciton overrides\n   * @returns\n   */\n  batchBuyNfts = (\n    signedOrders: Array<SignedNftOrderV4>,\n    revertIfIncomplete: boolean = false,\n    transactionOverrides?: PayableOverrides\n  ) => {\n    const allSellOrders = signedOrders.every((signedOrder) => {\n      if (signedOrder.direction === 0) {\n        return true;\n      }\n      return false;\n    });\n\n    invariant(\n      allSellOrders,\n      `batchBuyNfts: All orders must be of type sell order (order direction == 0)`\n    );\n\n    const allErc721 = signedOrders.every((signedOrder) => {\n      if ('erc721Token' in signedOrder) {\n        return true;\n      }\n      return false;\n    });\n\n    const allErc1155 = signedOrders.every((signedOrder) => {\n      if ('erc1155Token' in signedOrder) {\n        return true;\n      }\n      return false;\n    });\n\n    const eitherAllErc721OrErc1155Orders = allErc721 || allErc1155;\n\n    invariant(\n      eitherAllErc721OrErc1155Orders,\n      `Batch buy is only available for tokens of the same ERC type.`\n    );\n\n    if (allErc721) {\n      const erc721SignedOrders: SignedERC721OrderStruct[] =\n        signedOrders as SignedERC721OrderStruct[];\n      return this.exchangeProxy.batchBuyERC721s(\n        erc721SignedOrders,\n        erc721SignedOrders.map((so) => so.signature),\n        erc721SignedOrders.map((_) => '0x'),\n        revertIfIncomplete,\n        {\n          ...transactionOverrides,\n        }\n      );\n    } else if (allErc1155) {\n      const erc1155SignedOrders: SignedERC1155OrderStruct[] =\n        signedOrders as SignedERC1155OrderStruct[];\n      return this.exchangeProxy.batchBuyERC1155s(\n        erc1155SignedOrders,\n        erc1155SignedOrders.map((so) => so.signature),\n        erc1155SignedOrders.map((so) => so.erc1155TokenAmount),\n        erc1155SignedOrders.map((_) => '0x'),\n        revertIfIncomplete,\n        {\n          ...transactionOverrides,\n        }\n      );\n    } else {\n      throw Error('batchBuyNfts: Incompatible state');\n    }\n  };\n\n  /**\n   * Derives order hash from order (currently requires a provider to derive)\n   * @param order A 0x v4 order (signed or unsigned)\n   * @returns Order hash\n   */\n  getOrderHash = (order: NftOrderV4Serialized): Promise<string> => {\n    if ('erc721Token' in order) {\n      return this.exchangeProxy.getERC721OrderHash(order);\n    }\n    if ('erc1155Token' in order) {\n      return this.exchangeProxy.getERC1155OrderHash(order);\n    }\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Looks up the order status for a given 0x v4 order.\n   * (Available states for an order are 'filled', 'expired', )\n   * @param order An 0x v4 NFT order\n   * @returns A number the corresponds to the enum OrderStatusV4\n   * Valid order states:\n   * Invalid = 0\n   * Fillable = 1,\n   * Unfillable = 2,\n   * Expired = 3,\n   */\n  getOrderStatus = async (order: NftOrderV4): Promise<number> => {\n    if ('erc721Token' in order) {\n      const erc721OrderStatus = await this.exchangeProxy.getERC721OrderStatus(\n        order\n      );\n      return erc721OrderStatus;\n    }\n    if ('erc1155Token' in order) {\n      const [\n        _erc1155OrderHash,\n        erc1155OrderStatus,\n        _erc1155OrderAmount,\n        _erc1155OrderAmountReminaing,\n      ] = await this.exchangeProxy.getERC1155OrderInfo(order);\n      return erc1155OrderStatus;\n    }\n    console.log('unsupported order', order);\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Convenience function to approve an asset (ERC20, ERC721, or ERC1155) for trading with 0x v4\n   * @param asset\n   * @param _walletAddress\n   * @param approvalTransactionOverrides\n   * @param otherOverrides\n   * @returns An ethers contract transaction\n   */\n  approveTokenOrNftByAsset = (\n    asset: SwappableAssetV4,\n    _walletAddress: string, // Remove in next release\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    otherOverrides?: Partial<ApprovalOverrides>\n  ): Promise<ContractTransaction> => {\n    const signedToUse = otherOverrides?.signer ?? this.signer;\n    if (!signedToUse) {\n      throw new Error('Signed not defined');\n    }\n    return approveAsset(\n      this.exchangeProxy.address,\n      asset,\n      signedToUse,\n      {\n        ...approvalTransactionOverrides,\n      },\n      otherOverrides\n    );\n  };\n\n  // // TyPeSaFeTy: Order types supported:\n  // // ERC721<>ERC20\n  // // ERC1155<>ERC20\n  // // Below ensures type-safe for those specific combinations\n  /**\n   * Builds a 0x order given two assets (either NFT<>ERC20 or ERC20<>NFT)\n   * @param makerAsset An asset (ERC20, ERC721, or ERC1155) the user has\n   * @param takerAsset An asset (ERC20, ERC721, or ERC1155) the user wants\n   * @param makerAddress The address of the wallet creating the order\n   * @param orderConfig Various order configuration options (e.g. expiration, nonce)\n   */\n  buildOrder(\n    makerAsset: UserFacingERC1155AssetDataSerializedV4,\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\n    takerAsset: UserFacingERC1155AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC721AssetDataSerializedV4,\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\n    takerAsset: UserFacingERC721AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: SwappableAssetV4,\n    takerAsset: SwappableAssetV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ) {\n    // Basic validation checks\n    if (\n      (takerAsset.type === 'ERC1155' || takerAsset.type === 'ERC721') &&\n      (makerAsset.type === 'ERC1155' || makerAsset.type === 'ERC721')\n    ) {\n      throw new Error(\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\n      );\n    }\n    if (makerAsset.type === 'ERC20' && takerAsset.type === 'ERC20') {\n      throw new Error(\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\n      );\n    }\n\n    // First determine if the maker or taker is trading the erc20 (to orient the direction of the trade)\n    let direction: TradeDirection = TradeDirection.SellNFT;\n    if (takerAsset.type === 'ERC20') {\n      // NFT is on the maker side (so the maker is selling the NFT)\n      direction = TradeDirection.SellNFT;\n    }\n    if (makerAsset.type === 'ERC20') {\n      // NFT is on the taker side (so the maker is buying the NFT)\n      direction = TradeDirection.BuyNFT;\n    }\n\n    const nft = (\n      direction === TradeDirection.BuyNFT ? takerAsset : makerAsset\n    ) as SwappableAssetV4;\n    const erc20 = (\n      direction === TradeDirection.BuyNFT ? makerAsset : takerAsset\n    ) as UserFacingERC20AssetDataSerializedV4;\n\n    return this.buildNftAndErc20Order(\n      nft,\n      erc20,\n      DIRECTION_MAPPING[direction],\n      makerAddress,\n      orderConfig\n    );\n  }\n\n  getWrappedTokenAddress = (chainId: number | string) => {\n    return getWrappedNativeToken(chainId);\n  };\n\n  buildCollectionBasedOrder = (\n    erc20ToSell: UserFacingERC20AssetDataSerializedV4,\n    nftCollectionToBid: {\n      tokenAddress: string;\n      type: 'ERC721' | 'ERC1155';\n    },\n    makerAddress: string\n  ): NftOrderV4Serialized => {\n    return this.buildNftAndErc20Order(\n      {\n        ...nftCollectionToBid,\n        // Override tokenId to zero, tokenId is ignored when using token properties\n        tokenId: '0',\n      },\n      erc20ToSell,\n      'buy',\n      makerAddress,\n      {\n        // Add the token property of 'collection', so this order will be valid for any nft in the collection\n        tokenProperties: [CONTRACT_ORDER_VALIDATOR],\n      }\n    );\n  };\n\n  buildNftAndErc20Order = (\n    nft: SwappableAssetV4,\n    erc20: UserFacingERC20AssetDataSerializedV4,\n    sellOrBuyNft: 'sell' | 'buy' = 'sell',\n    makerAddress: string,\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized => {\n    const defaultConfig = {\n      chainId: this.chainId,\n      makerAddress: makerAddress,\n      appId: this.appId,\n    };\n    const config = { ...defaultConfig, ...userConfig };\n\n    const direction =\n      sellOrBuyNft === 'sell' ? TradeDirection.SellNFT : TradeDirection.BuyNFT;\n\n    // Validate that a bid does not use ETH.\n    if (direction === TradeDirection.BuyNFT) {\n      if (erc20.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\n        throw new Error(\n          'NFT Bids cannot use the native token (e.g. ETH). Please use the wrapped native token (e.g. WETH)'\n        );\n      }\n    }\n\n    switch (nft.type) {\n      // Build ERC721 order\n      case 'ERC721':\n        const erc721Order = generateErc721Order(nft, erc20, {\n          direction,\n          maker: makerAddress,\n          ...config,\n        });\n        return erc721Order;\n      // Build ERC1155 order\n      case 'ERC1155':\n        const erc1155Order = generateErc1155Order(nft, erc20, {\n          direction,\n          maker: makerAddress,\n          ...config,\n        });\n        return erc1155Order;\n      default:\n        throw new UnexpectedAssetTypeError((nft as any).type ?? 'Unknown');\n    }\n  };\n\n  /**\n   * Signs a 0x order. Requires a signer (e.g. wallet or private key)\n   * Once signed, the order becomes fillable (as long as the order is valid)\n   * 0x orders require a signature to fill.\n   * @param order A 0x v4 order\n   * @returns A signed 0x v4 order\n   */\n  signOrder = async (order: NftOrderV4): Promise<SignedNftOrderV4> => {\n    if (!this.signer) {\n      throw new Error('Signed not defined');\n    }\n\n    const rawSignature = await signOrderWithEoaWallet(\n      order,\n      this.signer as unknown as TypedDataSigner,\n      this.chainId,\n      this.exchangeProxy.address\n    );\n\n    const ecSignature = parseRawSignature(rawSignature);\n\n    const signedOrder = {\n      ...order,\n      signature: {\n        signatureType: 2,\n        r: ecSignature.r,\n        s: ecSignature.s,\n        v: ecSignature.v,\n      },\n    };\n    return signedOrder;\n  };\n\n  /**\n   * Fill a 'Buy NFT' order (e.g. taker would be selling'their NFT to fill this order) without needing an approval\n   * Use case: Users can accept offers/bids for their NFTs without needing to approve their NFT! 🤯\n   * @param signedOrder Signed Buy Nft order (e.g. direction = 1)\n   * @param tokenId NFT token id that taker of trade will sell\n   * @param fillOrderOverrides Trade specific (SDK-level) overrides\n   * @param transactionOverrides General transaction overrides from ethers (gasPrice, gasLimit, etc)\n   * @returns\n   */\n  fillBuyNftOrderWithoutApproval = async (\n    signedOrder: SignedNftOrderV4,\n    tokenId: string,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    if (!this.signer) {\n      throw new Error(\n        'Signer undefined. Signer must be provided to fill order'\n      );\n    }\n    if (signedOrder.direction !== TradeDirection.BuyNFT) {\n      throw new Error(\n        'Only filling Buy NFT orders (direction=1) is valid for skipping approvals'\n      );\n    }\n\n    const signerAddress = await this.signer.getAddress();\n    const unwrapWeth =\n      fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n      false;\n\n    // Handle ERC721\n    if ('erc721Token' in signedOrder) {\n      const erc721Contract = ERC721__factory.connect(\n        signedOrder.erc721Token,\n        this.signer\n      );\n\n      const encodingIface = new Interface(ERC721_TRANSFER_FROM_DATA);\n\n      const fragment = encodingIface.getFunction('safeTransferFromErc721Data');\n      const data = encodingIface._encodeParams(fragment.inputs, [\n        signedOrder,\n        signedOrder.signature,\n        unwrapWeth,\n      ]);\n\n      const transferFromTx = await erc721Contract[\n        'safeTransferFrom(address,address,uint256,bytes)'\n      ](\n        signerAddress,\n        this.exchangeProxy.address,\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\n        data,\n        transactionOverrides ?? {}\n      );\n      return transferFromTx;\n    }\n\n    // Handle ERC1155\n    if ('erc1155Token' in signedOrder) {\n      const erc1155Contract = ERC1155__factory.connect(\n        signedOrder.erc1155Token,\n        this.signer\n      );\n      const encodingIface = new Interface(ERC1155_TRANSFER_FROM_DATA);\n\n      const fragment = encodingIface.getFunction('safeTransferFromErc1155Data');\n      const data = encodingIface._encodeParams(fragment.inputs, [\n        signedOrder,\n        signedOrder.signature,\n        unwrapWeth,\n      ]);\n\n      const transferFromTx = await erc1155Contract.safeTransferFrom(\n        signerAddress,\n        this.exchangeProxy.address,\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\n        signedOrder.erc1155TokenAmount ?? '1',\n        data,\n        transactionOverrides ?? {}\n      );\n      return transferFromTx;\n    }\n\n    // Unknown format (NFT neither ERC721 or ERC1155)\n    throw new Error('unknown order type');\n  };\n\n  /**\n   * Fills a 'collection'-based order (e.g. a bid for any nft belonging to a particular collection)\n   * @param signedOrder A 0x signed collection order\n   * @param tokenId The token id to fill for the collection order\n   * @param fillOrderOverrides Various fill options\n   * @param transactionOverrides Ethers transaction overrides\n   * @returns\n   */\n  fillSignedCollectionOrder = async (\n    signedOrder: SignedNftOrderV4,\n    tokenId: BigNumberish,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    return this.fillSignedOrder(\n      signedOrder,\n      {\n        tokenIdToSellForCollectionOrder: tokenId,\n        ...fillOrderOverrides,\n      },\n      {\n        ...transactionOverrides,\n      }\n    );\n  };\n\n  isErc20NativeToken = (order: NftOrderV4): boolean => {\n    return order.erc20Token.toLowerCase() === ETH_ADDRESS_AS_ERC20;\n  };\n\n  /**\n   * Fills a signed order\n   * @param signedOrder A signed 0x v4 order\n   * @param fillOrderOverrides Optional configuration on possible ways to fill the order\n   * @param transactionOverrides Ethers transaction overrides (e.g. gas price)\n   * @returns\n   */\n  fillSignedOrder = async (\n    signedOrder: SignedNftOrderV4,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    // Only Sell orders can be filled with ETH\n    const canOrderTypeBeFilledWithNativeToken =\n      signedOrder.direction === TradeDirection.SellNFT;\n    // Is ERC20 being traded the native token\n    const isNativeToken = this.isErc20NativeToken(signedOrder);\n    const needsEthAttached =\n      isNativeToken && canOrderTypeBeFilledWithNativeToken;\n    const erc20TotalAmount = this.getErc20TotalIncludingFees(signedOrder);\n\n    // do fill\n    if ('erc1155Token' in signedOrder) {\n      // If maker is selling an NFT, taker wants to 'buy' nft\n      if (signedOrder.direction === TradeDirection.SellNFT) {\n        return this.exchangeProxy.buyERC1155(\n          signedOrder,\n          signedOrder.signature,\n          signedOrder.erc1155TokenAmount,\n          '0x',\n          {\n            // If we're filling an order with ETH, be sure to include the value with fees added\n            value: needsEthAttached ? erc20TotalAmount : undefined,\n            ...transactionOverrides,\n          }\n        );\n      } else {\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\n        let unwrapNativeToken: boolean =\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n          false;\n\n        if (signedOrder.erc1155TokenProperties.length > 0) {\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\n          if (\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\n          ) {\n            throw new Error(\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\n            );\n          }\n        }\n\n        // Otherwise, taker is selling the nft (and buying an ERC20)\n        return this.exchangeProxy.sellERC1155(\n          signedOrder,\n          signedOrder.signature,\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\n            signedOrder.erc1155TokenId,\n          signedOrder.erc1155TokenAmount,\n          unwrapNativeToken,\n          '0x',\n          {\n            ...transactionOverrides,\n          }\n        );\n      }\n    } else if ('erc721Token' in signedOrder) {\n      // If maker is selling an NFT, taker wants to 'buy' nft\n      if (signedOrder.direction === TradeDirection.SellNFT) {\n        return this.exchangeProxy.buyERC721(\n          signedOrder,\n          signedOrder.signature,\n          '0x',\n          {\n            // If we're filling an order with ETH, be sure to include the value with fees added\n            value: needsEthAttached ? erc20TotalAmount : undefined,\n            ...transactionOverrides,\n          }\n        );\n      } else {\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\n        let unwrapNativeToken: boolean =\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n          false;\n\n        if (signedOrder.erc721TokenProperties.length > 0) {\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\n          if (\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\n          ) {\n            throw new Error(\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\n            );\n          }\n        }\n\n        // Otherwise, taker is selling the nft (and buying an ERC20)\n        return this.exchangeProxy.sellERC721(\n          signedOrder,\n          signedOrder.signature,\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\n            signedOrder.erc721TokenId,\n          unwrapNativeToken,\n          '0x',\n          {\n            ...transactionOverrides,\n          }\n        );\n      }\n    }\n    console.log('unsupported order', signedOrder);\n    throw new Error('unsupport signedOrder type');\n  };\n\n  /**\n   * Posts a 0x order to the Trader.xyz NFT open orderbook\n   * @param signedOrder A valid 0x v4 signed order\n   * @param chainId The chain id (e.g. '1' for mainnet, or '137' for polygon mainnet)\n   * @param metadata An optional record object (key: string, value: string) that will be stored alongside the order in the orderbook\n   * This is helpful for webapp builders, as they can save app-level order metadata\n   * (e.g. maybe save a 'bidMessage' alongside the order, or extra image metadata)\n   * @returns\n   */\n  postOrder = (\n    signedOrder: SignedNftOrderV4,\n    chainId: string | number,\n    metadata?: Record<string, string>\n  ): Promise<PostOrderResponsePayload> => {\n    const parsedChainId = parseInt(chainId.toString(10), 10);\n    const supportsMonitoring =\n      SupportedChainsForV4OrderbookStatusMonitoring.includes(parsedChainId);\n    warning(\n      supportsMonitoring,\n      `Chain ${chainId} does not support live orderbook status monitoring. Orders can be posted to be persisted, but status wont be monitored (e.g. updating status on a fill, cancel, or expiry.)`\n    );\n    return postOrderToOrderbook(signedOrder, parsedChainId, metadata, {\n      rootUrl: this.orderbookRootUrl,\n    });\n  };\n\n  /**\n   * Gets orders from the Trader.xyz Open NFT Orderbook\n   * By default will find all order, active orders.\n   * @param filters Various options to filter an order search\n   * @returns An object that includes `orders` key with an array of orders that meet the search critera\n   */\n  getOrders = async (\n    filters?: Partial<SearchOrdersParams>\n  ): Promise<SearchOrdersResponsePayload> => {\n    const orders = await searchOrderbook(filters, {\n      rootUrl: this.orderbookRootUrl,\n    });\n    return orders;\n  };\n\n  /**\n   *\n   * @param sellOrder ERC721 Order to sell an NFT\n   * @param buyOrder ERC721 Order to buy an NFT\n   * @param transactionOverrides Ethers transaction overrides\n   * @returns\n   */\n  matchOrders = async (\n    // NOTE(johnrjj)- Should these types be SignedERC721OrderStruct directly since only 712 is supported for matching\n    sellOrder: SignedNftOrderV4,\n    buyOrder: SignedNftOrderV4,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    if ('erc721Token' in sellOrder && 'erc721Token' in buyOrder) {\n      // TODO(johnrjj) - More validation here before we match on-chain\n      const contractTx = await this.exchangeProxy.matchERC721Orders(\n        sellOrder,\n        buyOrder,\n        sellOrder.signature,\n        buyOrder.signature,\n        transactionOverrides ?? {}\n      );\n      return contractTx;\n    }\n\n    throw new Error(\n      'Only ERC721 Orders are currently supported for matching. Please ensure both the sellOrder and buyOrder are ERC721 orders'\n    );\n  };\n\n  getMakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\n    // Buy NFT - So maker asset is an ERC20\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\n      return {\n        tokenAddress: order.erc20Token,\n        amount: order.erc20TokenAmount.toString(10),\n        type: 'ERC20' as const,\n      };\n    } else if (\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\n    ) {\n      // Sell NFT - So maker asset is an NFT (either ERC721 or ERC1155)\n      if ('erc721Token' in order) {\n        return {\n          tokenAddress: order.erc721Token,\n          tokenId: order.erc721TokenId.toString(10),\n          type: 'ERC721' as const,\n        };\n      } else if ('erc1155Token' in order) {\n        return {\n          tokenAddress: order.erc1155Token,\n          tokenId: order.erc1155TokenId.toString(10),\n          amount: order.erc1155TokenAmount.toString(10),\n          type: 'ERC1155' as const,\n        };\n      }\n    }\n    throw new Error(`Unknown order direction ${order.direction}`);\n  };\n\n  getTakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\n    // Buy NFT - So taker asset is an NFT [ERC721 or ERC1155] (because the taker is the NFT owner 'accepting' a buy order)\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\n      if ('erc721Token' in order) {\n        return {\n          tokenAddress: order.erc721Token,\n          tokenId: order.erc721TokenId.toString(10),\n          type: 'ERC721' as const,\n        };\n      } else if ('erc1155Token' in order) {\n        return {\n          tokenAddress: order.erc1155Token,\n          tokenId: order.erc1155TokenId.toString(10),\n          amount: order.erc1155TokenAmount.toString(10),\n          type: 'ERC1155' as const,\n        };\n      }\n    } else if (\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\n    ) {\n      // Sell NFT - So taker asset is an ERC20 -- because the taker here is 'buying' the sell NFT order\n      return {\n        tokenAddress: order.erc20Token,\n        amount: order.erc20TokenAmount.toString(10),\n        type: 'ERC20' as const,\n      };\n    }\n    throw new Error(`Unknown order direction ${order.direction}`);\n  };\n\n  /**\n   * Validate an order signature given a signed order\n   * Throws if invalid\n   * @param signedOrder A 0x v4 signed order to validate signature for\n   * @returns\n   */\n  validateSignature = async (\n    signedOrder: SignedNftOrderV4\n  ): Promise<boolean> => {\n    if ('erc721Token' in signedOrder) {\n      // Validate functions on-chain return void if successful\n      await this.exchangeProxy.validateERC721OrderSignature(\n        signedOrder,\n        signedOrder.signature\n      );\n      return true;\n    } else if ('erc1155Token' in signedOrder) {\n      // Validate functions on-chain return void if successful\n      await this.exchangeProxy.validateERC1155OrderSignature(\n        signedOrder,\n        signedOrder.signature\n      );\n      return true;\n    } else {\n      throw new Error('Unknown order type (not ERC721 or ERC1155)');\n    }\n  };\n\n  /**\n   * Fetches the balance of an asset for a given wallet address\n   * @param asset A Tradeable asset -- An ERC20, ERC721, or ERC1155\n   * @param walletAddress A wallet address ('0x1234...6789')\n   * @param provider Optional, defaults to the class's provider but can be overridden\n   * @returns A BigNumber balance (e.g. 1 or 0 for ERC721s. ERC20 and ERC1155s can have balances greater than 1)\n   */\n  fetchBalanceForAsset = async (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    provider: BaseProvider = this.provider\n  ): Promise<BigNumber> => {\n    switch (asset.type) {\n      case 'ERC20':\n        const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n        return erc20.balanceOf(walletAddress);\n      case 'ERC721':\n        const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n        const owner = await erc721.ownerOf(asset.tokenId);\n        if (owner.toLowerCase() === walletAddress.toLowerCase()) {\n          return BigNumber.from(1);\n        }\n        return BigNumber.from(0);\n      case 'ERC1155':\n        const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n        return erc1155.balanceOf(walletAddress, asset.tokenId);\n      default:\n        throw new Error(`Asset type unknown ${(asset as any).type}`);\n    }\n  };\n\n  // TODO(johnrjj) Consolidate w/ checkOrderCanBeFilledMakerSide\n  checkOrderCanBeFilledTakerSide = async (\n    order: NftOrderV4,\n    takerWalletAddress: string\n  ) => {\n    const takerAsset = this.getTakerAsset(order);\n    const takerApprovalStatus = await this.loadApprovalStatus(\n      takerAsset,\n      takerWalletAddress\n    );\n    const takerBalance = await this.fetchBalanceForAsset(\n      this.getTakerAsset(order),\n      takerWalletAddress\n    );\n\n    const hasBalance: boolean = takerBalance.gte(\n      (takerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\n    );\n\n    const isApproved: boolean =\n      takerApprovalStatus.contractApproved ||\n      takerApprovalStatus.tokenIdApproved ||\n      false;\n\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\n\n    return {\n      approvalStatus: takerApprovalStatus,\n      balance: takerBalance.toString(),\n      isApproved,\n      hasBalance,\n      canOrderBeFilled,\n    };\n  };\n\n  checkOrderCanBeFilledMakerSide = async (\n    order: NftOrderV4\n    // override?: Partial<VerifyOrderOptionsOverrides>\n  ) => {\n    const makerAddress = order.maker;\n    const makerAsset = this.getMakerAsset(order);\n    const makerApprovalStatus = await this.loadApprovalStatus(\n      makerAsset,\n      makerAddress\n    );\n    const makerBalance = await this.fetchBalanceForAsset(\n      this.getMakerAsset(order),\n      makerAddress\n    );\n\n    const hasBalance: boolean = makerBalance.gte(\n      (makerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\n    );\n    const isApproved: boolean =\n      makerApprovalStatus.tokenIdApproved ||\n      makerApprovalStatus.contractApproved ||\n      false;\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\n\n    return {\n      approvalStatus: makerApprovalStatus,\n      balance: makerBalance.toString(),\n      isApproved,\n      hasBalance,\n      canOrderBeFilled,\n    };\n  };\n\n  /**\n   * Convenience function to sum all fees. Total fees denominated in erc20 token amount.\n   * @param order A 0x v4 order (signed or un-signed);\n   * @returns Total summed fees for a 0x v4 order. Amount is represented in Erc20 token units.\n   */\n  getTotalFees = (order: NftOrderV4): BigNumber => {\n    const fees = order.fees;\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\n    let feesTotal = ZERO_AMOUNT;\n    fees.forEach((fee) => {\n      feesTotal = feesTotal.add(BigNumber.from(fee.amount));\n    });\n    return feesTotal;\n  };\n\n  /**\n   * Calculates total order cost.\n   * In 0x v4, fees are additive (i.e. they are not deducted from the order amount, but added on top of)\n   * @param order A 0x v4 order;\n   * @returns Total cost of an order (base amount + fees). Amount is represented in Erc20 token units. Does not include gas costs.\n   */\n  getErc20TotalIncludingFees = (order: NftOrderV4): BigNumber => {\n    const fees = order.fees;\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\n    let feesTotal = this.getTotalFees(order);\n    const orderTotalCost = BigNumber.from(order.erc20TokenAmount).add(\n      feesTotal\n    );\n    return orderTotalCost;\n  };\n}\n\nexport { NftSwapV4 };\n"],"names":["undefined","ZERO_AMOUNT","BigNumber","from","NULL_ADDRESS","NULL_BYTES","AssetProxyId","SupportedChainIdsV3","OrderStatusV3","OrderStatusCodeLookup","ORDER_BUILDER_ERROR_CODES","SupportedTokenTypes","EIP712_TYPES","Order","name","type","RevertReason","TRADER_ADDRESS_IDENTIFIER","INFINITE_TIMESTAMP_SEC","getEipDomain","chainId","exchangeContractAddress","version","toString","verifyingContract","normalizeOrder","order","makerAddress","toLowerCase","takerAddress","feeRecipientAddress","senderAddress","makerAssetAmount","takerAssetAmount","makerFee","takerFee","expirationTimeSeconds","salt","makerAssetData","takerAssetData","makerFeeAssetData","takerFeeAssetData","signature","generateOrderFromAssetDatas","orderConfig","expiration","getUnixTime","generateSaltHash","generateTimeBasedSalt","unixTime","Date","manualSaltHashToUse","ModuleError","message","options","code","String","expected","cause","Error","captureStackTrace","constructor","UnexpectedAssetTypeError","assetType","UnsupportedChainId","convertStringToBN","s","convertCollectionToBN","arr","map","encodeErc20AssetData","tokenAddress","hexConcat","ERC20","defaultAbiCoder","encode","decodeErc20AssetData","encodedAssetData","length","hexDataLength","assetProxyId","hexDataSlice","rest","data","decode","encodeErc721AssetData","tokenId","ERC721","decodeErc721AssetData","encodeErc1155AssetData","tokenIds","values","callbackData","ERC1155","decodeErc1155AssetData","id","tokenValues","val","encodeMultiAssetAssetData","nestedAssetData","MultiAsset","decodeMultiAssetData","nestedAssetDatas","amounts","decodeAssetData","encodeAssetData","assetData","erc1155EncodingForMultiAssetOrder","erc20AssetData","erc721AssetData","tokens","x","_","tokenValue","erc1155AssetData","multiAssetData","getAmountFromAsset","amount","convertAssetToInternalFormat","swappable","zeroExErc1155AssetFormat","convertAssetsToInternalFormat","assets","_abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","components","ExchangeContract__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","Forwarder__factory","IZeroEx__factory","ERC1155__factory","ERC20__factory","ERC721__factory","encodeTypedDataHash","typedData","types","_TypedDataEncoder","hash","domain","EIP1271ZeroExDataAbi","cancelOrder","exchangeContract","getOrderInfo","orderInfo","getOrderStatus","orderStatus","cancelOrders","orders","overrides","batchCancelOrders","cancelOrdersUpToNow","unixTimestampAsSalt","cancelOrdersUpTo","hashOrder","EIP712_DOMAIN","signOrderWithEip1271","signer","value","orderHash","msg","encodeFunctionData","signMessage","arrayify","rawSignatureFromContractWallet","signOrderWithEoaWallet","_signTypedData","rawSignatureFromEoaWallet","checkIfContractWallet","provider","walletAddress","isContractWallet","getCode","walletCode","isSequence","_isSequenceProvider","providerToUse","isWalletConnect","isSequenceViaWalletConnect","connector","_peerMeta","description","signOrder","signerAddress","signingOptions","method","signatureType","autodetectSignatureType","rawEip712Signature","prepareOrderSignatureFromEoaWallet","rawEip1271Signature","prepareOrderSignatureFromContractWallet","signedOrder","console","log","rawSignature","splitSignature","hexlify","v","r","verifyOrderSignature","maker","slicedSigV","slicedSig","derivedSignatureHex","derivedSignature","joinSignature","verifyTypedData","e","buildOrder","makerAssets","takerAssets","makerAssetEligibleForSingleAsset","makerAsset","makerAssetAmounts","ma","makerAssetDatas","makerMultiAsset","takerAssetEligibleForSingleAsset","takerAsset","takerAssetAmounts","ta","takerAssetDatas","takerMultiAsset","exchangeAddress","fillSignedOrder","fillOrKillOrder","getApprovalStatus","exchangeProxyAddressForAsset","asset","erc20","allowance","erc20AllowanceBigNumber","MAX_APPROVAL_WITH_BUFFER","MAX_APPROVAL","sub","approvedForMax","gte","contractApproved","erc721","erc721ApprovalForAllPromise","isApprovedForAll","erc721ApprovedAddressForIdPromise","getApproved","Promise","all","erc721ApprovalForAll","erc721ApprovedAddressForId","tokenIdApproved","erc1155","erc1155ApprovalForAll","pow","approveAsset","approve","erc20ApprovalTxPromise","setApprovalForAll","estimateGasForApproval","estimateGas","getSignatureTypeFromSignature","estimateGasForFillOrder","_overrides","fillOrder","estimatedGasRequiredForFill","convertDecodedAssetDataToUserFacingAssets","decodedAssetData","assetAmount","decodedErc20","swappableErc20","decodedErc721","swappableErc721","decodedErc1155","swappableErc1155","multiAssetDecodedData","nestedAssets","flatten","idx","nestedAssetsWithCorrectAmounts","nestedAsset","nestedAssetValueFromMultiAsset","getAssetsFromOrder","decodedMakerAssetData","decodedTakerAssetData","getZeroExAddressesForChain","addresses","defaultAddresses","chainIdString","maybeAddressesForChain","getProxyAddressForErcType","zeroExAddresses","erc20Proxy","erc721Proxy","erc1155Proxy","getForwarderAddress","forwarder","getWrappedNativeToken","wrappedNativeToken","DEFAUTLT_GAS_BUFFER_MULTIPLES","Polygon","PolygonMumbai","Kovan","sleep","t","resolve","timeout","setTimeout","clearTimeout","NftSwapV3","additionalConfig","_cancelOrder","timeoutInMs","pollOrderStatusFrequencyInMs","throwIfStatusOtherThanFillableOrFilled","settled","timeoutPromise","then","orderStatusRefreshPromiseFn","Fillable","FullyFilled","fillEventListenerFn","orderStatusRefreshPromiseLoop","fillEventPromise","any","_getOrderInfo","txHash","waitForTransaction","addressOfWalletSigningOrder","signerOverride","signerToUser","_signOrder","userConfig","defaultConfig","config","_buildOrder","assetInternalFmt","_getApprovalStatus","_hashOrder","_getAssetsFromOrder","wrappedNativeTokenContractAddress","warning","erc20TokenAddress","invariant","fillOverrides","transactionOverrides","gasBufferMultiple","gasAmountBufferMultiple","getGasMultipleForChainId","_estimateGasForFillOrder","estimatedGasAmount","maybeCustomGasLimit","Math","floor","toNumber","allTxOverrides","gasLimit","fillOrderWithNativeTokenInsteadOfWrappedToken","eligibleForNativeTokenFill","checkIfOrderCanBeFilledWithNativeToken","forwarderContractAddress","forwarderContract","amountOfEthToFillWith","marketBuyOrdersWithEth","_fillSignedOrder","gasBufferMultiples","normalizedOrder","_normalizeOrder","_verifyOrderSignature","_network","chainDefaultContractAddresses","zeroExExchangeContractAddress","exchange","erc20ProxyContractAddress","erc721ProxyContractAddress","erc1155ProxyContractAddress","approveTokenOrNftByAsset","_walletAddress","approvalTransactionOverrides","otherOverrides","exchangeProxyContractAddressForAsset","signerToUse","_estimateGasForApproval","_approveAsset","EIP712_DOMAIN_PARAMETERS","ERC721ORDER_STRUCT_NAME","ERC721ORDER_STRUCT_ABI","EIP1155_DOMAIN_PARAMETERS","ERC1155ORDER_STRUCT_NAME","ERC1155ORDER_STRUCT_ABI","FEE_ABI","PROPERTY_ABI","ETH_ADDRESS_AS_ERC20","NATIVE_TOKEN_ADDRESS_AS_ERC20","erc1155Token","Fee","Property","erc721Token","txOverrides","approvalOrderrides","approvalOnlyTokenIdIfErc721","erc721ApprovalForOnlyTokenId","parseRawSignature","hexSize","VALID_V_VALUES","parseInt","slice","includes","INFINITE_EXPIRATION_TIMESTAMP_SEC","generateErc721Order","nft","orderData","expiry","erc721Order","erc721TokenId","direction","erc20Token","erc20TokenAmount","erc721TokenProperties","tokenProperties","property","propertyData","propertyValidator","fees","recipient","feeData","nonce","generateRandomV4OrderNonce","appId","taker","generateErc1155Order","erc1155Order","erc1155TokenId","erc1155TokenAmount","erc1155TokenProperties","fee","ONE_TWENTY_EIGHT_BIT_LENGTH","TWO_FIFTY_SIX_BIT_LENGTH","checkIfStringContainsOnlyNumbers","onlyNumbers","test","RESERVED_APP_ID_PREFIX","RESERVED_APP_ID_PREFIX_DIGITS","DEFAULT_APP_ID","verifyAppIdOrThrow","isCorrectLength","hasOnlyNumbers","order128","padStart","generateRandom128BitNumber","appId128","padEnd","final256BitNonce","base","hex","v4","replace","BigInt","valueBase10String","serializeNftOrder","ERC721_TRANSFER_FROM_DATA","ERC1155_TRANSFER_FROM_DATA","ORDERBOOK_API_ROOT_URL_PRODUCTION","postOrderToOrderbook","metadata","requestOptions","fetchFn","unfetch","payload","rootUrl","headers","body","JSON","stringify","res","ok","json","status","err","orderPostResult","searchOrderbook","filters","stringifiedQueryParams","arrayFormat","findOrdersResult","TradeDirection","OrderStatusV4","DIRECTION_MAPPING","BuyNFT","SellNFT","CONTRACT_ORDER_VALIDATOR","SupportedChainIdsV4","SupportedChainsForV4OrderbookStatusMonitoring","Mainnet","Optimism","Goerli","NftSwapV4","approvalOverrides","exchangeProxy","orderType","cancelERC721Order","cancelERC1155Order","signedOrders","revertIfIncomplete","allSellOrders","every","allErc721","allErc1155","eitherAllErc721OrErc1155Orders","erc721SignedOrders","batchBuyERC721s","so","erc1155SignedOrders","batchBuyERC1155s","getERC721OrderHash","getERC1155OrderHash","getERC721OrderStatus","erc721OrderStatus","getERC1155OrderInfo","_erc1155OrderHash","erc1155OrderStatus","_erc1155OrderAmount","signedToUse","erc20ToSell","nftCollectionToBid","buildNftAndErc20Order","sellOrBuyNft","ecSignature","fillOrderOverrides","getAddress","unwrapWeth","erc721Contract","encodingIface","fragment","getFunction","_encodeParams","tokenIdToSellForCollectionOrder","transferFromTx","erc1155Contract","safeTransferFrom","canOrderTypeBeFilledWithNativeToken","isNativeToken","isErc20NativeToken","needsEthAttached","erc20TotalAmount","getErc20TotalIncludingFees","buyERC1155","unwrapNativeToken","sellERC1155","buyERC721","sellERC721","parsedChainId","supportsMonitoring","orderbookRootUrl","sellOrder","buyOrder","matchERC721Orders","contractTx","validateERC721OrderSignature","validateERC1155OrderSignature","balanceOf","ownerOf","owner","takerWalletAddress","getTakerAsset","loadApprovalStatus","takerApprovalStatus","fetchBalanceForAsset","takerBalance","hasBalance","isApproved","canOrderBeFilled","approvalStatus","balance","getMakerAsset","makerApprovalStatus","makerBalance","feesTotal","forEach","add","getTotalFees","orderTotalCost","defaultAddressesForChain","zeroExExchangeProxyContractAddress","exchangeProxyContractAddress"],"mappings":"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"}