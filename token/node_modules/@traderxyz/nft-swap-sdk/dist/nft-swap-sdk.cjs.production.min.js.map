{"version":3,"file":"nft-swap-sdk.cjs.production.min.js","sources":["../src/sdk/v3/types.ts","../node_modules/regenerator-runtime/runtime.js","../src/utils/eth.ts","../src/utils/v3/order.ts","../src/sdk/error.ts","../src/utils/bn/convert.ts","../src/utils/v3/asset-data.ts","../src/contracts/factories/ZeroEx/v3/ExchangeContract__factory.ts","../src/contracts/factories/ZeroEx/v3/Forwarder__factory.ts","../src/contracts/factories/ZeroEx/v4/IZeroEx__factory.ts","../src/contracts/factories/ERC1155__factory.ts","../src/contracts/factories/ERC20__factory.ts","../src/contracts/factories/ERC721__factory.ts","../src/utils/typed-data.ts","../src/utils/v3/eip1271.ts","../src/sdk/v3/pure.ts","../src/utils/v3/default-addresses.ts","../src/utils/v3/gas-buffer.ts","../src/utils/sleep.ts","../src/sdk/v3/NftSwapV3.ts","../src/sdk/v4/constants.ts","../src/sdk/v4/pure.ts","../src/sdk/v4/enums.ts","../src/sdk/v4/nft-safe-transfer-from-data.ts","../src/sdk/v4/orderbook.ts","../src/sdk/v4/NftSwapV4.ts","../src/sdk/v4/properties.ts","../src/utils/addresses.ts"],"sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport type { Bytes } from '@ethersproject/bytes';\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport interface AddressesForChainV3 {\n  exchange: string;\n  erc20Proxy: string;\n  erc721Proxy: string;\n  multiAssetProxy: string;\n  erc1155Proxy: string;\n  forwarder: string;\n  wrappedNativeToken?: string | null;\n}\n\nexport type ContractAddresses = {\n  [chainId: string]: AddressesForChainV3;\n};\n\nexport interface Order {\n  makerAddress: string;\n  takerAddress: string;\n  feeRecipientAddress: string;\n  senderAddress: string;\n  makerAssetAmount: string;\n  takerAssetAmount: string;\n  makerFee: string;\n  takerFee: string;\n  expirationTimeSeconds: string;\n  salt: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerFeeAssetData: string;\n  takerFeeAssetData: string;\n  signature?: string;\n}\n\nexport interface SignedOrder extends Order {\n  signature: string;\n}\n\nexport declare enum SignatureType {\n  Illegal = 0,\n  Invalid = 1,\n  EIP712 = 2,\n  EthSign = 3,\n  Wallet = 4,\n  Validator = 5,\n  PreSigned = 6,\n  EIP1271Wallet = 7,\n  NSignatureTypes = 8,\n}\n\nexport enum AssetProxyId {\n  ERC20 = '0xf47261b0',\n  ERC721 = '0x02571792',\n  MultiAsset = '0x94cfcdd7',\n  ERC1155 = '0xa7cb5fb7',\n  StaticCall = '0xc339d10a',\n  ERC20Bridge = '0xdc1600f3',\n}\n\nexport enum SupportedChainIdsV3 {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Ganache = 1337,\n  BSC = 56,\n  Polygon = 137,\n  PolygonMumbai = 80001,\n  Avalanche = 43114,\n}\n\nexport interface OrderInfoV3 {\n  orderStatus: OrderStatusV3;\n  orderHash: string;\n  orderTakerAssetFilledAmount: BigNumber;\n}\n\nexport enum OrderStatusV3 {\n  Invalid = 0,\n  InvalidMakerAssetAmount,\n  InvalidTakerAssetAmount,\n  Fillable,\n  Expired,\n  FullyFilled,\n  Cancelled,\n}\n\nexport const OrderStatusCodeLookup = {\n  0: 'Invalid',\n  1: 'InvalidMakerAssetAmount',\n  2: 'InvalidTakerAssetAmount',\n  3: 'Fillable',\n  4: 'Expired',\n  5: 'FullyFilled',\n  6: 'Cancelled',\n};\n\nexport interface ERC20AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n}\n\nexport interface ERC20BridgeAssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  bridgeAddress: string;\n  bridgeData: string;\n}\n\nexport interface ERC721AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenId: BigNumber;\n}\n\nexport interface ERC1155AssetData {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenIds: BigNumber[];\n  tokenValues: BigNumber[];\n  callbackData: string;\n}\n\nexport interface StaticCallAssetData {\n  assetProxyId: string;\n  callTarget: string;\n  staticCallData: string;\n  callResultHash: string;\n}\n\nexport interface ERC1155AssetDataNoProxyId {\n  tokenAddress: string;\n  tokenValues: BigNumber[];\n  tokenIds: BigNumber[];\n  callbackData: string;\n}\n\nexport declare type SingleAssetData =\n  | ERC20AssetData\n  | ERC20BridgeAssetData\n  | ERC721AssetData\n  | ERC1155AssetData\n  | StaticCallAssetData;\n\nexport interface MultiAssetData {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: string[];\n}\n\nexport interface MultiAssetDataWithRecursiveDecoding {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: SingleAssetData[];\n}\n\nexport interface MultiAssetDataWithRecursiveDecoding {\n  assetProxyId: string;\n  amounts: BigNumber[];\n  nestedAssetData: SingleAssetData[];\n}\n\nexport interface DutchAuctionData {\n  assetData: AssetData;\n  beginTimeSeconds: BigNumber;\n  beginAmount: BigNumber;\n}\n\nexport declare type AssetData =\n  | SingleAssetData\n  | MultiAssetData\n  | MultiAssetDataWithRecursiveDecoding;\n\nexport type AvailableSingleAssetDataTypes =\n  | ERC20AssetData\n  | ERC721AssetData\n  | ERC1155AssetData;\n\nexport type AvailableAssetDataTypes =\n  | AvailableSingleAssetDataTypes\n  | MultiAssetData;\n\nexport interface MultiAssetDataSerialized {\n  assetProxyId: string;\n  amounts: string[];\n  nestedAssetData: string[];\n}\n\n// User facing\nexport interface UserFacingERC20AssetDataSerialized {\n  tokenAddress: string;\n  type: 'ERC20';\n  amount: string;\n}\n\nexport interface UserFacingERC721AssetDataSerialized {\n  tokenAddress: string;\n  tokenId: string;\n  type: 'ERC721';\n}\n\nexport interface UserFacingERC1155AssetDataSerialized {\n  tokenAddress: string;\n  tokens: Array<{ tokenId: string; tokenValue: string }>;\n  type: 'ERC1155';\n}\n\n/**\n * Mimic the erc721 duck type\n */\nexport interface UserFacingERC1155AssetDataSerializedNormalizedSingle {\n  tokenAddress: string;\n  tokenId: string;\n  type: 'ERC1155';\n  amount?: string; // Will default to '1'\n}\n\nexport type UserFacingSerializedSingleAssetDataTypes =\n  | UserFacingERC20AssetDataSerialized\n  | UserFacingERC721AssetDataSerialized\n  | UserFacingERC1155AssetDataSerialized;\n\nexport interface ERC20AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n}\n\nexport interface ERC721AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenId: string;\n}\nexport interface ERC1155AssetDataSerialized {\n  assetProxyId: string;\n  tokenAddress: string;\n  tokenIds: string[];\n  tokenValues: string[];\n  callbackData: string;\n}\n\nexport type SerializedSingleAssetDataTypes =\n  | ERC20AssetDataSerialized\n  | ERC721AssetDataSerialized\n  | ERC1155AssetDataSerialized;\n\nexport type SerializedAvailableAssetDataTypes =\n  | SerializedSingleAssetDataTypes\n  | MultiAssetDataSerialized;\n\nexport interface MultiAssetDataSerializedRecursivelyDecoded {\n  assetProxyId: string;\n  amounts: string[];\n  nestedAssetData: SerializedSingleAssetDataTypes[];\n}\n\nexport type SerializedAvailableAssetDataTypesDecoded =\n  | SerializedSingleAssetDataTypes\n  | MultiAssetDataSerializedRecursivelyDecoded;\n\nexport enum ORDER_BUILDER_ERROR_CODES {\n  MISSING_CONTRACT_WRAPPERS_ERROR = 'MISSING_CONTRACT_WRAPPERS_ERROR',\n}\n\nexport enum SupportedTokenTypes {\n  ERC20 = 'ERC20',\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n}\n\nexport type SupportedTokenTypesType =\n  | SupportedTokenTypes.ERC20\n  | SupportedTokenTypes.ERC721\n  | SupportedTokenTypes.ERC1155;\n\nexport interface TradeableAssetItem<TMetadata = any> {\n  amount: string;\n  userInputtedAmount?: string;\n  assetData: SerializedSingleAssetDataTypes;\n  type: SupportedTokenTypesType;\n  id: string; // unique id\n  metadata?: TMetadata;\n}\n\n// Convenience type wrappers\nexport interface Erc20TradeableAsset extends TradeableAssetItem {\n  assetData: ERC20AssetDataSerialized;\n  type: SupportedTokenTypes.ERC20;\n}\n\nexport interface Erc721TradeableAsset extends TradeableAssetItem {\n  assetData: ERC721AssetDataSerialized;\n  type: SupportedTokenTypes.ERC721;\n}\n\nexport interface Erc1155TradeableAsset extends TradeableAssetItem {\n  assetData: ERC1155AssetDataSerialized;\n  type: SupportedTokenTypes.ERC1155;\n}\n\nexport type AvailableTradeableAssets =\n  | Erc20TradeableAsset\n  | Erc721TradeableAsset\n  | Erc1155TradeableAsset;\n\nexport interface AdditionalOrderConfig {\n  makerAddress: string; // only field required\n  chainId?: number;\n  takerAddress?: string;\n  expiration?: Date | number;\n  exchangeAddress?: string;\n  salt?: string;\n  feeRecipientAddress?: string;\n  makerFeeAssetData?: string;\n  takerFeeAssetData?: string;\n  makerFee?: string;\n}\n\nexport interface ZeroExOrder {\n  makerAddress: string;\n  takerAddress: string;\n  feeRecipientAddress: string;\n  senderAddress: string;\n  makerAssetAmount: string;\n  takerAssetAmount: string;\n  makerFee: string;\n  takerFee: string;\n  expirationTimeSeconds: string;\n  salt: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerFeeAssetData: string;\n  takerFeeAssetData: string;\n}\n\nexport interface ZeroExSignedOrder extends ZeroExOrder {\n  signature: string;\n}\n\nexport interface EipDomain {\n  name: string;\n  version: string;\n  chainId: string;\n  verifyingContract: string;\n}\n\nexport interface TypedData {\n  domain: EipDomain;\n  types: {\n    Order: {\n      name: string;\n      type: string;\n    }[];\n  };\n  value: Order;\n}\n\nexport const EIP712_TYPES = {\n  Order: [\n    { name: 'makerAddress', type: 'address' },\n    { name: 'takerAddress', type: 'address' },\n    { name: 'feeRecipientAddress', type: 'address' },\n    { name: 'senderAddress', type: 'address' },\n    { name: 'makerAssetAmount', type: 'uint256' },\n    { name: 'takerAssetAmount', type: 'uint256' },\n    { name: 'makerFee', type: 'uint256' },\n    { name: 'takerFee', type: 'uint256' },\n    { name: 'expirationTimeSeconds', type: 'uint256' },\n    { name: 'salt', type: 'uint256' },\n    { name: 'makerAssetData', type: 'bytes' },\n    { name: 'takerAssetData', type: 'bytes' },\n    { name: 'makerFeeAssetData', type: 'bytes' },\n    { name: 'takerFeeAssetData', type: 'bytes' },\n  ],\n};\n\nexport type SwappableAsset =\n  | UserFacingERC20AssetDataSerialized\n  | UserFacingERC721AssetDataSerialized\n  | UserFacingERC1155AssetDataSerializedNormalizedSingle;\n\nexport enum RevertReason {\n  OrderUnfillable = 'ORDER_UNFILLABLE',\n  InvalidMaker = 'INVALID_MAKER',\n  InvalidTaker = 'INVALID_TAKER',\n  InvalidSender = 'INVALID_SENDER',\n  InvalidOrderSignature = 'INVALID_ORDER_SIGNATURE',\n  InvalidTakerAmount = 'INVALID_TAKER_AMOUNT',\n  DivisionByZero = 'DIVISION_BY_ZERO',\n  RoundingError = 'ROUNDING_ERROR',\n  InvalidSignature = 'INVALID_SIGNATURE',\n  SignatureIllegal = 'SIGNATURE_ILLEGAL',\n  SignatureInvalid = 'SIGNATURE_INVALID',\n  SignatureUnsupported = 'SIGNATURE_UNSUPPORTED',\n  TakerOverpay = 'TAKER_OVERPAY',\n  OrderOverfill = 'ORDER_OVERFILL',\n  InvalidFillPrice = 'INVALID_FILL_PRICE',\n  InvalidNewOrderEpoch = 'INVALID_NEW_ORDER_EPOCH',\n  CompleteFillFailed = 'COMPLETE_FILL_FAILED',\n  NegativeSpreadRequired = 'NEGATIVE_SPREAD_REQUIRED',\n  ReentrancyIllegal = 'REENTRANCY_ILLEGAL',\n  InvalidTxHash = 'INVALID_TX_HASH',\n  InvalidTxSignature = 'INVALID_TX_SIGNATURE',\n  FailedExecution = 'FAILED_EXECUTION',\n  LengthGreaterThan0Required = 'LENGTH_GREATER_THAN_0_REQUIRED',\n  LengthGreaterThan3Required = 'LENGTH_GREATER_THAN_3_REQUIRED',\n  LengthGreaterThan131Required = 'LENGTH_GREATER_THAN_131_REQUIRED',\n  Length0Required = 'LENGTH_0_REQUIRED',\n  Length65Required = 'LENGTH_65_REQUIRED',\n  InvalidAmount = 'INVALID_AMOUNT',\n  TransferFailed = 'TRANSFER_FAILED',\n  SenderNotAuthorized = 'SENDER_NOT_AUTHORIZED',\n  TargetNotAuthorized = 'TARGET_NOT_AUTHORIZED',\n  TargetAlreadyAuthorized = 'TARGET_ALREADY_AUTHORIZED',\n  IndexOutOfBounds = 'INDEX_OUT_OF_BOUNDS',\n  AuthorizedAddressMismatch = 'AUTHORIZED_ADDRESS_MISMATCH',\n  OnlyContractOwner = 'ONLY_CONTRACT_OWNER',\n  MakerNotWhitelisted = 'MAKER_NOT_WHITELISTED',\n  TakerNotWhitelisted = 'TAKER_NOT_WHITELISTED',\n  AssetProxyDoesNotExist = 'ASSET_PROXY_DOES_NOT_EXIST',\n  LengthMismatch = 'LENGTH_MISMATCH',\n  LibBytesGreaterThanZeroLengthRequired = 'GREATER_THAN_ZERO_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo4LengthRequired = 'GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo20LengthRequired = 'GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualTo32LengthRequired = 'GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualToNestedBytesLengthRequired = 'GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED',\n  LibBytesGreaterOrEqualToSourceBytesLengthRequired = 'GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED',\n  Erc20InsufficientBalance = 'ERC20_INSUFFICIENT_BALANCE',\n  Erc20InsufficientAllowance = 'ERC20_INSUFFICIENT_ALLOWANCE',\n  FeePercentageTooLarge = 'FEE_PERCENTAGE_TOO_LARGE',\n  ValueGreaterThanZero = 'VALUE_GREATER_THAN_ZERO',\n  InvalidMsgValue = 'INVALID_MSG_VALUE',\n  InsufficientEthRemaining = 'INSUFFICIENT_ETH_REMAINING',\n  Uint256Overflow = 'UINT256_OVERFLOW',\n  Erc721ZeroToAddress = 'ERC721_ZERO_TO_ADDRESS',\n  Erc721OwnerMismatch = 'ERC721_OWNER_MISMATCH',\n  Erc721InvalidSpender = 'ERC721_INVALID_SPENDER',\n  Erc721ZeroOwner = 'ERC721_ZERO_OWNER',\n  Erc721InvalidSelector = 'ERC721_INVALID_SELECTOR',\n  WalletError = 'WALLET_ERROR',\n  ValidatorError = 'VALIDATOR_ERROR',\n  InvalidFunctionSelector = 'INVALID_FUNCTION_SELECTOR',\n  InvalidAssetData = 'INVALID_ASSET_DATA',\n  InvalidAssetProxy = 'INVALID_ASSET_PROXY',\n  UnregisteredAssetProxy = 'UNREGISTERED_ASSET_PROXY',\n  TxFullyConfirmed = 'TX_FULLY_CONFIRMED',\n  TxNotFullyConfirmed = 'TX_NOT_FULLY_CONFIRMED',\n  TimeLockIncomplete = 'TIME_LOCK_INCOMPLETE',\n  InvalidFreeMemoryPtr = 'INVALID_FREE_MEMORY_PTR',\n  AuctionInvalidAmount = 'INVALID_AMOUNT',\n  AuctionExpired = 'AUCTION_EXPIRED',\n  AuctionNotStarted = 'AUCTION_NOT_STARTED',\n  AuctionInvalidBeginTime = 'INVALID_BEGIN_TIME',\n  InvalidAssetDataEnd = 'INVALID_ASSET_DATA_END',\n  InvalidOrBlockedExchangeSelector = 'INVALID_OR_BLOCKED_EXCHANGE_SELECTOR',\n  BalanceQueryFailed = 'BALANCE_QUERY_FAILED',\n  AtLeastOneAddressDoesNotMeetBalanceThreshold = 'AT_LEAST_ONE_ADDRESS_DOES_NOT_MEET_BALANCE_THRESHOLD',\n  FromLessThanToRequired = 'FROM_LESS_THAN_TO_REQUIRED',\n  ToLessThanLengthRequired = 'TO_LESS_THAN_LENGTH_REQUIRED',\n  InvalidApprovalSignature = 'INVALID_APPROVAL_SIGNATURE',\n  ApprovalExpired = 'APPROVAL_EXPIRED',\n  InvalidOrigin = 'INVALID_ORIGIN',\n  AmountEqualToOneRequired = 'AMOUNT_EQUAL_TO_ONE_REQUIRED',\n  BadReceiverReturnValue = 'BAD_RECEIVER_RETURN_VALUE',\n  CannotTransferToAddressZero = 'CANNOT_TRANSFER_TO_ADDRESS_ZERO',\n  InsufficientAllowance = 'INSUFFICIENT_ALLOWANCE',\n  NFTNotOwnedByFromAddress = 'NFT_NOT_OWNED_BY_FROM_ADDRESS',\n  OwnersAndIdsMustHaveSameLength = 'OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH',\n  TokenAndValuesLengthMismatch = 'TOKEN_AND_VALUES_LENGTH_MISMATCH',\n  TransferRejected = 'TRANSFER_REJECTED',\n  Uint256Underflow = 'UINT256_UNDERFLOW',\n  InvalidIdsOffset = 'INVALID_IDS_OFFSET',\n  InvalidValuesOffset = 'INVALID_VALUES_OFFSET',\n  InvalidDataOffset = 'INVALID_DATA_OFFSET',\n  InvalidAssetDataLength = 'INVALID_ASSET_DATA_LENGTH',\n  InvalidStaticCallDataOffset = 'INVALID_STATIC_CALL_DATA_OFFSET',\n  TargetNotEven = 'TARGET_NOT_EVEN',\n  UnexpectedStaticCallResult = 'UNEXPECTED_STATIC_CALL_RESULT',\n  TransfersSuccessful = 'TRANSFERS_SUCCESSFUL',\n  InsufficientFunds = 'INSUFFICIENT_FUNDS',\n  TxAlreadyExecuted = 'TX_ALREADY_EXECUTED',\n  DefaultTimeLockIncomplete = 'DEFAULT_TIME_LOCK_INCOMPLETE',\n  CustomTimeLockIncomplete = 'CUSTOM_TIME_LOCK_INCOMPLETE',\n  EqualLengthsRequired = 'EQUAL_LENGTHS_REQUIRED',\n  OnlyCallableByWallet = 'ONLY_CALLABLE_BY_WALLET',\n}\n\nexport type AvailableSignatureTypesV3 = 'eoa' | 'eip1271';\n\nexport interface SigningOptionsV3 {\n  signatureType: AvailableSignatureTypesV3; // | 'autodetect' ? and remove autodetectSignatureType maybe?\n  autodetectSignatureType: boolean;\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// import startsWith from 'lodash/startsWith';\nimport { isHexString } from '@ethersproject/bytes';\nimport { getAddress } from '@ethersproject/address';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport const CRYPTO_KITTIES_CONTRACT_ADDRESS =\n  '0x06012c8cf97bead5deae237070f9587f8e7a266d';\n\nexport const ETH_GAS_STATION_API_BASE_URL = 'https://ethgasstation.info';\nexport const ETH_GAS_STATION_GAS_ENDPOINT = `${ETH_GAS_STATION_API_BASE_URL}/json/ethgasAPI.json`;\n\nexport const MAX_UINT256 = BigNumber.from(2).pow(128).sub(1);\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = MAX_UINT256;\nexport const GWEI_IN_WEI = BigNumber.from(1000000000);\nexport const GWEI_IN_ETH = BigNumber.from(1000000000);\n\nexport const ZERO_AMOUNT = BigNumber.from(0);\nexport const ONE_AMOUNT = BigNumber.from(1);\n\nexport const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const NULL_BYTES = '0x';\nexport const BASE_TEN = 10;\n\nexport const ONE_NFT_UNIT = ONE_AMOUNT;\nexport const ZERO_NFT_UNIT = ZERO_AMOUNT;\nexport const DEFAULT_ERC20_TOKEN_DECIMALS = BigNumber.from(18);\n\nexport type Numberish = BigNumber | number | string;\n\nconst isENSAddressFormat = (address: string) => !!address.match(/.+\\..+/g);\n\n// const isHexStringIgnorePrefix = (value: string) => {\n//   const trimmedValue = value.trim();\n//   const updatedValue = addHexPrefix(trimmedValue);\n//   return isHexString(updatedValue);\n// };\n\n// const addHexPrefix = (value: string) =>\n//   startsWith(value, '0x') ? value : `0x${value}`;\n\n// const convertRawAmountToDecimalFormat = (\n//   value: BigNumber,\n//   decimals: Numberish = new BigNumber(18),\n//   maxFormattedDecimals = 4\n// ): string =>\n//    BigNumber.from(value)\n//     .dividedBy(new BigNumber(10).pow(decimals))\n//     .decimalPlaces(maxFormattedDecimals)\n//     .toFormat(maxFormattedDecimals)\n//     .toString();\n\nconst getEthPriceInUsd = async (): Promise<number | undefined> => {\n  const res = await fetch(\n    'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd'\n  );\n  const json = await res.json();\n  return json?.ethereum?.usd;\n};\n\n// const convertGweiToEth = (gweiAmount: BigNumber) => {\n//   const BASE_TEN = 10;\n//   const unit = new BigNumber(BASE_TEN).pow(-9);\n//   const gweiInEth = unit.times(gweiAmount);\n//   return gweiInEth;\n// };\n\n/**\n *\n * @returns gas price in wei (base unit), need to convert to eth\n */\n// const getGasPrice = async (): Promise<BigNumber> => {\n//   try {\n//     const res = await fetch(ETH_GAS_STATION_GAS_ENDPOINT);\n//     const gasInfo = await res.json();\n//     // Eth Gas Station result is gwei * 10\n//     const BASE_TEN = 10;\n//     const gasPriceGwei = new BigNumber(gasInfo.fast / BASE_TEN);\n//     const unit = new BigNumber(BASE_TEN).pow(9);\n//     const gasPriceWei = unit.times(gasPriceGwei);\n//     return gasPriceWei;\n//   } catch (e) {\n//     throw new Error(e as any);\n//   }\n// };\n\n// const toBaseUnitAmount = (amount: Numberish, decimals: number): BigNumber => {\n//   const unit = new BigNumber(BASE_TEN).pow(decimals)\n//   const baseUnitAmount = unit.times(amount)\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0\n//   if (hasDecimals) {\n//     throw new Error(`Invalid unit amount: ${amount.toString(BASE_TEN)} - Too many decimal places`)\n//   }\n//   return baseUnitAmount\n// }\n\nexport interface ObjectMap<T> {\n  [key: string]: T;\n}\n\nconst arrayToMapWithId = <T extends object>(\n  array: T[],\n  idKey: keyof T\n): ObjectMap<T> => {\n  const initialMap: ObjectMap<T> = {};\n  return array.reduce((acc, val) => {\n    const id = val[idKey] as any;\n    acc[id] = val;\n    return acc;\n  }, initialMap);\n};\n\n// const convertAmountToBigNumber = (value: BigNumberIsh): BigNumber => {\n//   const num = value || 0;\n//   const isBigNumber = BigNumber.isBigNumber(num);\n//   if (isBigNumber) {\n//     return num as BigNumber;\n//   }\n\n//   if (isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n//     return new BigNumber(num.replace('0x', ''), 16);\n//   }\n\n//   const baseTen = 10;\n//   return BigNumber.from((num as number).toString(baseTen));\n// };\n\n// const encodeAmountAsHexString = (value: BigNumberIsh): string => {\n//   const valueBigNumber = convertAmountToBigNumber(value);\n//   const hexBase = 16;\n//   const valueHex = valueBigNumber.toString(hexBase);\n\n//   return valueBigNumber.isLessThan(0)\n//     ? `-0x${valueHex.substr(1)}`\n//     : `0x${valueHex}`;\n// };\n\nconst isHexAddressFormat = (address: string): boolean => {\n  if (!isHexString(address)) return false;\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false;\n  }\n  if (\n    /^(0x)?[0-9a-f]{40}$/.test(address) ||\n    /^(0x)?[0-9A-F]{40}$/.test(address)\n  ) {\n    return true;\n  }\n  return true;\n};\n\nexport function getUrlForFallbackTokenIcon(address: string) {\n  let checksummedAddress: string;\n  try {\n    checksummedAddress = getAddress(address);\n  } catch {\n    return null;\n  }\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${checksummedAddress}/logo.png`;\n}\n\n// const getErrorMessageFromErrorCode = (\n//   errorCode?: ERC20_BALANCE_ERROR_CODES | TOKEN_CONTRACT_ERROR_CODES\n// ) => {\n//   if (isNil(errorCode)) {\n//     return;\n//   }\n//   switch (errorCode) {\n//     case TOKEN_CONTRACT_ERROR_CODES.MISSING_CONTRACT_ADDRESS_ERROR:\n//       return 'Token contract address missing';\n//     case TOKEN_CONTRACT_ERROR_CODES.INVALID_CONTRACT_ADDRESS_ERROR:\n//     case VALIDATION_ERROR_CODES.INVALID_CONTRACT_ADDRESS:\n//       return 'Invalid token contract address';\n//     case TOKEN_CONTRACT_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\n//     case BALANCE_CHECK_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\n//       return 'Error loading contract address';\n//     case VALIDATION_ERROR_CODES.INVALID_ADDRESS_FORMAT:\n//       return 'Incorrect wallet address';\n//     case VALIDATION_ERROR_CODES.INVALID_ENS:\n//       return 'Incorrect ENS name';\n//     case VALIDATION_ERROR_CODES.INVALID_HEX_ADDRESS:\n//       return 'Invalid hex address';\n//     case BALANCE_CHECK_ERROR_CODES.BALANCE_LOOKUP_ERROR:\n//       return 'Error looking up token balance';\n//     default:\n//       throw new Error(`Unhandled error code ${errorCode}`);\n//   }\n// };\n\nconst getShortenedAddress = (\n  address: string,\n  start: number = 6,\n  end: number = 4\n) => {\n  const shortenedAddress = `${address.slice(0, start)}...${address.slice(\n    -1 * end\n  )}`;\n  return shortenedAddress;\n};\n\nexport const toUnitAmount = (amount: BigNumber, decimals: number) => {\n  const unit = BigNumber.from(BASE_TEN).pow(decimals);\n\n  const unitAmount = amount.div(unit);\n  // const hasDecimals = unit.() !== 0;\n  // if (hasDecimals) {\n  //   throw new Error(\n  //     `Invalid unit amount: ${amount.toString()}, incorrect decimals ${decimals}`\n  //   );\n  // }\n  return unitAmount;\n};\n\n// export const toBaseUnitAmount = (\n//   amount: Numberish,\n//   decimals: number\n// ): BigNumber => {\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\n//   const baseUnitAmount = unit.mul(amount);\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0;\n//   if (hasDecimals) {\n//     throw new Error(\n//       `Invalid unit amount: ${amount.toString()} - Too many decimal places`\n//     );\n//   }\n//   return baseUnitAmount;\n// };\n\n// export const toNearestBaseUnitAmount = (\n//   amount: BigNumber,\n//   decimals: number\n// ): BigNumber => {\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\n//   const baseUnitAmount = unit.mul(amount);\n//   const nearestBaseUnitAmount = baseUnitAmount.decimalPlaces(0);\n//   return nearestBaseUnitAmount;\n// };\n\n// export const toBaseUnitAmountSafe = (\n//   amount?: BigNumber | string | number,\n//   decimals?: BigNumber | string | number\n// ): BigNumber | undefined => {\n//   if (amount === undefined) {\n//     return undefined;\n//   }\n//   if (decimals === undefined) {\n//     return undefined;\n//   }\n//   return toBaseUnitAmount(\n//     new BigNumber(amount),\n//     new BigNumber(decimals).toNumber()\n//   );\n// };\n\nconst getEtherscanRootUrlForChain = (chainId: number) => {\n  if (chainId === 4) {\n    return 'https://rinkeby.etherscan.io';\n  }\n  return 'https://etherscan.io';\n};\n\nexport const getEtherscanLinkFromTxHash = (txHash: string, chainId: number) => {\n  if (!txHash) {\n    return undefined;\n  }\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\n  const normalizedHash = txHash.replace(/-.*/g, '');\n  const etherscanLink = `${etherscanRoot}/tx/${normalizedHash}`;\n  return etherscanLink;\n};\n\nexport const getEtherscanLinkForAccount = (\n  account: string,\n  chainId: number\n) => {\n  if (!account) {\n    return undefined;\n  }\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\n  const normalizedAccount = account.replace(/-.*/g, '');\n  const etherscanLink = `${etherscanRoot}/address/${normalizedAccount}`;\n  return etherscanLink;\n};\n\n// export const convertGweiToWei = (numInGwei: BigNumber) => {\n//   const numInWei = numInGwei.mul(GWEI_IN_WEI)\n//   return numInWei;\n// };\n\n// export const convertWeiToGwei = (numInWei: BigNumber) => {\n//   const numInGwei = numInWei.div(GWEI_IN_WEI).toFixed(0);\n//   return numInGwei;\n// };\n\nexport {\n  isENSAddressFormat,\n  isHexAddressFormat,\n  // isHexStringIgnorePrefix,\n  // getGasPrice,\n  getEthPriceInUsd,\n  // encodeAmountAsHexString,\n  // convertAmountToBigNumber,\n  arrayToMapWithId,\n  getShortenedAddress,\n  // convertGweiToEth,\n};\n","import getUnixTime from 'date-fns/getUnixTime';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\nimport { NULL_ADDRESS, NULL_BYTES, ZERO_AMOUNT } from '../eth';\nimport {\n  Order,\n  EipDomain,\n  EIP712_TYPES,\n  ZeroExOrder,\n} from '../../sdk/v3/types';\n\nexport const TRADER_ADDRESS_IDENTIFIER =\n  '0xBCC02a155c374263321155555Ccf41070017649e';\n\nexport const INFINITE_TIMESTAMP_SEC = BigNumber.from(2524604400);\n\nexport const getEipDomain = (\n  chainId: number,\n  exchangeContractAddress: string\n): EipDomain => ({\n  name: '0x Protocol',\n  version: '3.0.0',\n  chainId: chainId.toString(10),\n  verifyingContract: exchangeContractAddress,\n});\n\nexport const hashOrder = (\n  order: Order,\n  chainId: number,\n  exchangeContractAddress: string\n): string =>\n  _TypedDataEncoder.hash(\n    getEipDomain(chainId, exchangeContractAddress),\n    EIP712_TYPES,\n    order\n  );\n\nexport const normalizeOrder = (order: Order): Order => {\n  return {\n    makerAddress: order.makerAddress.toLowerCase(),\n    takerAddress: order.takerAddress.toLowerCase(),\n    feeRecipientAddress: order.feeRecipientAddress.toLowerCase(),\n    senderAddress: order.senderAddress.toLowerCase(),\n    makerAssetAmount: order.makerAssetAmount.toString(),\n    takerAssetAmount: order.takerAssetAmount.toString(),\n    makerFee: order.makerFee.toString(),\n    takerFee: order.takerFee.toString(),\n    expirationTimeSeconds: order.expirationTimeSeconds.toString(),\n    salt: order.salt.toString(),\n    makerAssetData: order.makerAssetData.toLowerCase(),\n    takerAssetData: order.takerAssetData.toLowerCase(),\n    makerFeeAssetData: order.makerFeeAssetData.toLowerCase(),\n    takerFeeAssetData: order.takerFeeAssetData.toLowerCase(),\n    signature: order.signature?.toLowerCase(),\n  };\n};\n\nexport const generateOrderFromAssetDatas = (orderConfig: {\n  makerAddress: string;\n  makerAssetData: string;\n  takerAssetData: string;\n  makerAssetAmount: BigNumber;\n  takerAssetAmount: BigNumber;\n  exchangeAddress: string;\n  // Rest of params optional\n  takerAddress?: string;\n  expiration?: Date | number;\n  salt?: string;\n  feeRecipientAddress?: string;\n  makerFeeAssetData?: string;\n  takerFeeAssetData?: string;\n  makerFee?: string;\n  takerFee?: string;\n}): Order => {\n  const {\n    makerAssetAmount,\n    takerAssetAmount,\n    makerAddress,\n    makerAssetData,\n    takerAssetData,\n    takerAddress,\n    expiration,\n    salt,\n    feeRecipientAddress,\n    makerFeeAssetData,\n    takerFeeAssetData,\n    makerFee,\n    takerFee,\n  } = orderConfig;\n\n  const expirationTimeSeconds = expiration\n    ? BigNumber.from(getUnixTime(expiration))\n    : INFINITE_TIMESTAMP_SEC;\n\n  const order: ZeroExOrder = {\n    makerAddress,\n    makerAssetAmount: makerAssetAmount.toString(),\n    makerAssetData,\n    takerAddress: takerAddress || NULL_ADDRESS,\n    takerAssetAmount: takerAssetAmount.toString(),\n    takerAssetData,\n    expirationTimeSeconds: expirationTimeSeconds.toString(),\n    // Stuff that doesn't really matter but is required\n    senderAddress: NULL_ADDRESS,\n    feeRecipientAddress: feeRecipientAddress ?? TRADER_ADDRESS_IDENTIFIER,\n    salt: salt ?? generateSaltHash(),\n    makerFeeAssetData: makerFeeAssetData ?? NULL_BYTES,\n    takerFeeAssetData: takerFeeAssetData ?? NULL_BYTES,\n    makerFee: makerFee ?? ZERO_AMOUNT.toString(),\n    takerFee: takerFee ?? ZERO_AMOUNT.toString(),\n  };\n\n  return order;\n};\n\nexport const generateTimeBasedSalt = () => {\n  const unixTime = getUnixTime(new Date());\n  return unixTime.toString(10);\n};\n\nconst generateSaltHash = (manualSaltHashToUse?: string): string => {\n  if (manualSaltHashToUse) {\n    return manualSaltHashToUse;\n  }\n  return generateTimeBasedSalt();\n};\n","// Better error objects with codes\n// Sourced from https://github.com/vweevers/module-error\n\ninterface ErrorOptions {\n  code?: string;\n  cause?: Error;\n  expected?: boolean;\n  transient?: boolean;\n}\n\nclass ModuleError extends Error {\n  code: string | undefined;\n  expected: boolean | undefined;\n  transient: boolean | undefined;\n  cause: Error | undefined;\n  /**\n   * @param {string} message Error message\n   * @param {{ code?: string, cause?: Error, expected?: boolean, transient?: boolean }} [options]\n   */\n  constructor(message: string, options: ErrorOptions) {\n    super(message || '');\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.code) this.code = String(options.code);\n      if (options.expected) this.expected = true;\n      if (options.transient) this.transient = true;\n      if (options.cause) this.cause = options.cause;\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nclass UnexpectedAssetTypeError extends ModuleError {\n  constructor(assetType: string) {\n    const code = 'UnexpectedAssetTypeError';\n    super(`Unexpected asset type ${assetType ?? 'unknown'}`, {\n      expected: true,\n      code,\n    });\n    this.name = code;\n  }\n}\n\nclass UnsupportedChainId extends ModuleError {\n  constructor(chainId: number) {\n    const code = 'UnsupportedChainId';\n    super(\n      `Unexpected chainId ${chainId}. If you want to use that chain, please provide custom zeroex addresses`,\n      {\n        expected: true,\n        code,\n      }\n    );\n    this.name = code;\n  }\n}\n\nexport { ModuleError, UnexpectedAssetTypeError, UnsupportedChainId };\n","import { BigNumber } from '@ethersproject/bignumber';\n\nexport const convertStringToBN = (s: string) => {\n  return BigNumber.from(s);\n};\n\nexport const convertCollectionToBN = (arr: string[]) => {\n  return arr.map(convertStringToBN);\n};\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { hexConcat, hexDataLength, hexDataSlice } from '@ethersproject/bytes';\nimport { defaultAbiCoder } from '@ethersproject/abi';\n\nimport {\n  AssetProxyId,\n  ERC1155AssetDataSerialized,\n  ERC20AssetDataSerialized,\n  ERC721AssetDataSerialized,\n  MultiAssetDataSerializedRecursivelyDecoded,\n  SerializedAvailableAssetDataTypes,\n  SerializedAvailableAssetDataTypesDecoded,\n  SerializedSingleAssetDataTypes,\n  SupportedTokenTypes,\n  SwappableAsset,\n  UserFacingSerializedSingleAssetDataTypes,\n} from '../../sdk/v3/types';\nimport { InterallySupportedAssetFormat } from '../../sdk/v3/pure';\nimport { UnexpectedAssetTypeError } from '../../sdk/error';\nimport { convertCollectionToBN } from '../bn/convert';\n\nexport const encodeErc20AssetData = (tokenAddress: string) =>\n  hexConcat([\n    AssetProxyId.ERC20,\n    defaultAbiCoder.encode(['address'], [tokenAddress]),\n  ]);\n\nexport const decodeErc20AssetData = (\n  encodedAssetData: string\n): ERC20AssetDataSerialized => {\n  const length = hexDataLength(encodedAssetData);\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['address'], rest);\n\n  const tokenAddress: string = data[0];\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n  };\n};\n\nexport const encodeErc721AssetData = (\n  tokenAddress: string,\n  tokenId: BigNumberish\n) =>\n  hexConcat([\n    AssetProxyId.ERC721,\n    defaultAbiCoder.encode(['address', 'uint256'], [tokenAddress, tokenId]),\n  ]);\n\nexport const decodeErc721AssetData = (\n  encodedAssetData: string\n): ERC721AssetDataSerialized => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['address', 'uint256'], rest);\n\n  const tokenAddress: string = data[0];\n  const tokenId: BigNumber = data[1];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n    tokenId: tokenId.toString(),\n  };\n};\n\nexport const encodeErc1155AssetData = (\n  tokenAddress: string,\n  tokenIds: BigNumberish[],\n  values: BigNumberish[],\n  callbackData: string\n) =>\n  hexConcat([\n    AssetProxyId.ERC1155,\n    defaultAbiCoder.encode(\n      ['address', 'uint256[]', 'uint256[]', 'bytes'],\n      [tokenAddress, tokenIds, values, callbackData]\n    ),\n  ]);\n\nexport const decodeErc1155AssetData = (\n  encodedAssetData: string\n): ERC1155AssetDataSerialized => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(\n    ['address', 'uint256[]', 'uint256[]', 'bytes'],\n    rest\n  );\n\n  const tokenAddress: string = data[0];\n  const tokenIds: BigNumber[] = data[1];\n  const values: BigNumber[] = data[2];\n  const callbackData: string = data[3];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    tokenAddress: tokenAddress.toLowerCase(),\n    tokenIds: tokenIds.map((id) => id.toString()),\n    tokenValues: values.map((val) => val.toString()),\n    callbackData,\n  };\n};\n\nexport const encodeMultiAssetAssetData = (\n  values: BigNumberish[],\n  nestedAssetData: string[]\n) =>\n  hexConcat([\n    AssetProxyId.MultiAsset,\n    defaultAbiCoder.encode(['uint256[]', 'bytes[]'], [values, nestedAssetData]),\n  ]);\n\nexport const decodeMultiAssetData = (encodedAssetData: string) => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  const rest = hexDataSlice(encodedAssetData, 4);\n  const data = defaultAbiCoder.decode(['uint256[]', 'bytes[]'], rest);\n\n  const values: BigNumber[] = data[0];\n  const nestedAssetDatas: string[] = data[1];\n\n  return {\n    assetProxyId: assetProxyId.toLowerCase(),\n    amounts: values.map((val) => val.toString()),\n    nestedAssetData: nestedAssetDatas.map(\n      (nestedAssetData) =>\n        decodeAssetData(nestedAssetData) as SerializedSingleAssetDataTypes // Cast b/c multiasset can only happen at depth 0, only singe asset datas can be nested\n    ),\n  };\n};\n\nexport const encodeAssetData = (\n  assetData: UserFacingSerializedSingleAssetDataTypes,\n  // To express ERC1155 amounts inside a multiasset order, you cannot encode the amount on the indiviual asset data,\n  // It needs to be paired with the [asset, amount] tuple inside the Multiasset order format order array (I know, a bit confusing)\n  // But if you're encoding erc1155 asset data within the context of a multi-asset order, this boolean should be true\n  erc1155EncodingForMultiAssetOrder: boolean = false\n): string => {\n  switch (assetData.type) {\n    case SupportedTokenTypes.ERC20:\n      const erc20AssetData = encodeErc20AssetData(assetData.tokenAddress);\n      return erc20AssetData;\n    case SupportedTokenTypes.ERC721:\n      const erc721AssetData = encodeErc721AssetData(\n        assetData.tokenAddress,\n        BigNumber.from(assetData.tokenId)\n      );\n      return erc721AssetData;\n    case SupportedTokenTypes.ERC1155:\n      const tokenIds = assetData.tokens.map((x) => x.tokenId);\n      let tokenValues: string[];\n      if (erc1155EncodingForMultiAssetOrder) {\n        tokenValues = assetData.tokens.map((_) => '1');\n      } else {\n        tokenValues = assetData.tokens.map((x) => x.tokenValue);\n      }\n      const erc1155AssetData = encodeErc1155AssetData(\n        assetData.tokenAddress,\n        convertCollectionToBN(tokenIds),\n        convertCollectionToBN(tokenValues),\n        '0x' // Needs to be '0x' (null bytes) (not empty string) or else it won't work lol\n      );\n      return erc1155AssetData;\n    default:\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\n  }\n};\n\nexport const decodeAssetData = (\n  encodedAssetData: string\n): SerializedAvailableAssetDataTypesDecoded => {\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\n\n  switch (assetProxyId) {\n    case AssetProxyId.ERC20:\n      const erc20AssetData = decodeErc20AssetData(encodedAssetData);\n      return erc20AssetData;\n    case AssetProxyId.ERC721:\n      const erc721AssetData = decodeErc721AssetData(encodedAssetData);\n      return erc721AssetData;\n    case AssetProxyId.ERC1155:\n      const erc1155AssetData = decodeErc1155AssetData(encodedAssetData);\n      return erc1155AssetData;\n    case AssetProxyId.MultiAsset:\n      const multiAssetData = decodeMultiAssetData(encodedAssetData);\n      return multiAssetData;\n    default:\n      throw new Error(\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\n      );\n  }\n};\n\nexport const getAmountFromAsset = (\n  assetData: UserFacingSerializedSingleAssetDataTypes\n): string => {\n  switch (assetData.type) {\n    case SupportedTokenTypes.ERC20:\n      return assetData.amount;\n    case SupportedTokenTypes.ERC721:\n      return '1';\n    case SupportedTokenTypes.ERC1155:\n      // Trader.sdk only supports trading 1 ERC1155 per _asset_ at a time,\n      // so we can access the 0th index for our token\n      // (You can still trade multiple ERC1155s per _order_).\n      return assetData.tokens[0]?.tokenValue ?? '1';\n    default:\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\n  }\n};\n\nexport const convertAssetToInternalFormat = (\n  swappable: SwappableAsset\n): InterallySupportedAssetFormat => {\n  switch (swappable.type) {\n    // No converting needed\n    case 'ERC20':\n      return swappable;\n    // No converting needed\n    case 'ERC721':\n      return swappable;\n    // Convert normalized public ERC1155 interface to 0x internal asset data format\n    // We do this to reduce complexity for end user SDK (and keep api same with erc721)\n    case 'ERC1155':\n      const zeroExErc1155AssetFormat = {\n        tokenAddress: swappable.tokenAddress,\n        tokens: [\n          {\n            tokenId: swappable.tokenId,\n            tokenValue: swappable.amount || '1',\n          },\n        ],\n        type: SupportedTokenTypes.ERC1155 as const,\n      };\n      return zeroExErc1155AssetFormat;\n    default:\n      throw new UnexpectedAssetTypeError((swappable as any)?.type ?? 'Unknown');\n  }\n};\n\nexport const convertAssetsToInternalFormat = (\n  assets: Array<SwappableAsset>\n): Array<InterallySupportedAssetFormat> => {\n  return assets.map(convertAssetToInternalFormat);\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type {\n  ExchangeContract,\n  ExchangeContractInterface,\n} from '../../../ZeroEx/v3/ExchangeContract';\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'chainId',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes4',\n        name: 'id',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'assetProxy',\n        type: 'address',\n      },\n    ],\n    name: 'AssetProxyRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'feeRecipientAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'senderAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'Cancel',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'orderSenderAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'orderEpoch',\n        type: 'uint256',\n      },\n    ],\n    name: 'CancelUpTo',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'makerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'feeRecipientAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'makerFeeAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'takerFeeAssetData',\n        type: 'bytes',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'senderAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'makerAssetFilledAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'takerAssetFilledAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'makerFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'takerFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'protocolFeePaid',\n        type: 'uint256',\n      },\n    ],\n    name: 'Fill',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'oldProtocolFeeCollector',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'updatedProtocolFeeCollector',\n        type: 'address',\n      },\n    ],\n    name: 'ProtocolFeeCollectorAddress',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'oldProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'updatedProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n    ],\n    name: 'ProtocolFeeMultiplier',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'signerAddress',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'validatorAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'isApproved',\n        type: 'bool',\n      },\n    ],\n    name: 'SignatureValidatorApproval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'transactionHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'TransactionExecution',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EIP1271_MAGIC_VALUE',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EIP712_EXCHANGE_DOMAIN_HASH',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'allowedValidators',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelOrders',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction[]',\n        name: 'transactions',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchExecuteTransactions',\n    outputs: [\n      {\n        internalType: 'bytes[]',\n        name: '',\n        type: 'bytes[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrKillOrders',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrders',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'takerAssetFillAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchFillOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults[]',\n        name: 'fillResults',\n        type: 'tuple[]',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'leftOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'rightOrders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'leftSignatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'rightSignatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchMatchOrders',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'left',\n            type: 'tuple[]',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'right',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\n        name: 'batchMatchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'leftOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'rightOrders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'leftSignatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'rightSignatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'batchMatchOrdersWithMaximalFill',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'left',\n            type: 'tuple[]',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults[]',\n            name: 'right',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\n        name: 'batchMatchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'targetOrderEpoch',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelOrdersUpTo',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelled',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'currentContextAddress',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'detachProtocolFeeCollector',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\n        name: 'transaction',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'executeTransaction',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrKillOrder',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'filled',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'assetProxyId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'getAssetProxy',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint8',\n            name: 'orderStatus',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderTakerAssetFilledAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'signerAddress',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidHashSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidOrderSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'gasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'address',\n            name: 'signerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\n        name: 'transaction',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'isValidTransactionSignature',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isValid',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketBuyOrdersFillOrKill',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketBuyOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketSellOrdersFillOrKill',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'takerAssetFillAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'marketSellOrdersNoThrow',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'makerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetFilledAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFeePaid',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'protocolFeePaid',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.FillResults',\n        name: 'fillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'leftOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'rightOrder',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'leftSignature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'rightSignature',\n        type: 'bytes',\n      },\n    ],\n    name: 'matchOrders',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'left',\n            type: 'tuple',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'right',\n            type: 'tuple',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.MatchedFillResults',\n        name: 'matchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'leftOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order',\n        name: 'rightOrder',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'leftSignature',\n        type: 'bytes',\n      },\n      {\n        internalType: 'bytes',\n        name: 'rightSignature',\n        type: 'bytes',\n      },\n    ],\n    name: 'matchOrdersWithMaximalFill',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'left',\n            type: 'tuple',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'makerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerAssetFilledAmount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'makerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'takerFeePaid',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'protocolFeePaid',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct LibFillResults.FillResults',\n            name: 'right',\n            type: 'tuple',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInLeftMakerAsset',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'profitInRightMakerAsset',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibFillResults.MatchedFillResults',\n        name: 'matchedFillResults',\n        type: 'tuple',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'orderEpoch',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'preSign',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    name: 'preSigned',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'protocolFeeCollector',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'protocolFeeMultiplier',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'assetProxy',\n        type: 'address',\n      },\n    ],\n    name: 'registerAssetProxy',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'updatedProtocolFeeCollector',\n        type: 'address',\n      },\n    ],\n    name: 'setProtocolFeeCollectorAddress',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'updatedProtocolFeeMultiplier',\n        type: 'uint256',\n      },\n    ],\n    name: 'setProtocolFeeMultiplier',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'validatorAddress',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approval',\n        type: 'bool',\n      },\n    ],\n    name: 'setSignatureValidatorApproval',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes[]',\n        name: 'assetData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'address[]',\n        name: 'fromAddresses',\n        type: 'address[]',\n      },\n      {\n        internalType: 'address[]',\n        name: 'toAddresses',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'amounts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'simulateDispatchTransferFromCalls',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    name: 'transactionsExecuted',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\nexport class ExchangeContract__factory {\n  static readonly abi = _abi;\n  static createInterface(): ExchangeContractInterface {\n    return new utils.Interface(_abi) as ExchangeContractInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ExchangeContract {\n    return new Contract(address, _abi, signerOrProvider) as ExchangeContract;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type {\n  Forwarder,\n  ForwarderInterface,\n} from '../../../ZeroEx/v3/Forwarder';\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_exchange',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_exchangeV2',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_weth',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'ERC1155_BATCH_RECEIVED',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'ERC1155_RECEIVED',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'EXCHANGE_V2_ORDER_ID',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'assetData',\n        type: 'bytes',\n      },\n    ],\n    name: 'approveMakerAssetProxy',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketBuyOrdersWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'ethSellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketSellAmountWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct LibOrder.Order[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ethFeeAmounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address payable[]',\n        name: 'feeRecipients',\n        type: 'address[]',\n      },\n    ],\n    name: 'marketSellOrdersWithEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'wethSpentAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'makerAssetAcquiredAmount',\n        type: 'uint256',\n      },\n    ],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'ids',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'values',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155BatchReceived',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'id',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: '',\n        type: 'bytes4',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'assetData',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'withdrawAsset',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\nexport class Forwarder__factory {\n  static readonly abi = _abi;\n  static createInterface(): ForwarderInterface {\n    return new utils.Interface(_abi) as ForwarderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Forwarder {\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { IZeroEx, IZeroExInterface } from '../../../ZeroEx/v4/IZeroEx';\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'ERC1155OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20FillAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC1155Token',\n        name: 'erc1155Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'erc1155FillAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'matcher',\n        type: 'address',\n      },\n    ],\n    name: 'ERC1155OrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'recipient',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'amount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'feeData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Fee[]',\n        name: 'fees',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC1155Token',\n        name: 'erc1155Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'contract IPropertyValidator',\n            name: 'propertyValidator',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'propertyData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Property[]',\n        name: 'erc1155TokenProperties',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'erc1155TokenAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'ERC1155OrderPreSigned',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'ERC721OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC721Token',\n        name: 'erc721Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'matcher',\n        type: 'address',\n      },\n    ],\n    name: 'ERC721OrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'enum LibNFTOrder.TradeDirection',\n        name: 'direction',\n        type: 'uint8',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expiry',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc20TokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'recipient',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'amount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'feeData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Fee[]',\n        name: 'fees',\n        type: 'tuple[]',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC721Token',\n        name: 'erc721Token',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'contract IPropertyValidator',\n            name: 'propertyValidator',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes',\n            name: 'propertyData',\n            type: 'bytes',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct LibNFTOrder.Property[]',\n        name: 'erc721TokenProperties',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'ERC721OrderPreSigned',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'feeRecipient',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFeeFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'protocolFeePaid',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'pool',\n        type: 'bytes32',\n      },\n    ],\n    name: 'LimitOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'contract ILiquidityProvider',\n        name: 'provider',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'LiquidityProviderSwap',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'hash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: 'MetaTransactionExecuted',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'caller',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'migrator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'Migrated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n    ],\n    name: 'OrderCancelled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'OrderSignerRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'OtcOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'PairCancelledLimitOrders',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'PairCancelledRfqOrders',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'oldImpl',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'newImpl',\n        type: 'address',\n      },\n    ],\n    name: 'ProxyFunctionUpdated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'quoteSigner',\n        type: 'address',\n      },\n    ],\n    name: 'QuoteSignerUpdated',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'pool',\n        type: 'bytes32',\n      },\n    ],\n    name: 'RfqOrderFilled',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'origin',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address[]',\n        name: 'addrs',\n        type: 'address[]',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'RfqOrderOriginsAllowed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'TransformedERC20',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'transformerDeployer',\n        type: 'address',\n      },\n    ],\n    name: 'TransformerDeployerUpdated',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: '_fillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'useSelfBalance',\n        type: 'bool',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_fillOtcOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'address',\n        name: 'taker',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'useSelfBalance',\n        type: 'bool',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_fillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: '_sellHeldTokenForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'inputToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'outputToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'inputTokenAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minOutputTokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'uint32',\n                name: 'deploymentNonce',\n                type: 'uint32',\n              },\n              {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct ITransformERC20Feature.Transformation[]',\n            name: 'transformations',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'useSelfBalance',\n            type: 'bool',\n          },\n          {\n            internalType: 'address payable',\n            name: 'recipient',\n            type: 'address',\n          },\n        ],\n        internalType: 'struct ITransformERC20Feature.TransformERC20Args',\n        name: 'args',\n        type: 'tuple',\n      },\n    ],\n    name: '_transformERC20',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'erc1155TokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'callbackData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchBuyERC1155s',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'callbackData',\n        type: 'bytes[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchBuyERC721s',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'orderNonces',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelERC1155Orders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'orderNonces',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelERC721Orders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairLimitOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'makerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'takerTokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'minValidSalts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'batchCancelPairRfqOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchCancelRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData[]',\n        name: 'mtxs',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchExecuteMetaTransactions',\n    outputs: [\n      {\n        internalType: 'bytes[]',\n        name: 'returnResults',\n        type: 'bytes[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFillAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchFillLimitOrders',\n    outputs: [\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'makerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFillAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'revertIfIncomplete',\n        type: 'bool',\n      },\n    ],\n    name: 'batchFillRfqOrders',\n    outputs: [\n      {\n        internalType: 'uint128[]',\n        name: 'takerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'makerTokenFilledAmounts',\n        type: 'uint128[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'makerSignatures',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'takerSignatures',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'unwrapWeth',\n        type: 'bool[]',\n      },\n    ],\n    name: 'batchFillTakerSignedOtcOrders',\n    outputs: [\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchGetLimitOrderRelevantStates',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\n        name: 'orderInfos',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'actualFillableTakerTokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'isSignatureValids',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\n        name: 'orders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'signatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchGetRfqOrderRelevantStates',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\n        name: 'orderInfos',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint128[]',\n        name: 'actualFillableTakerTokenAmounts',\n        type: 'uint128[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'isSignatureValids',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\n        name: 'buyOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'sellOrderSignatures',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature[]',\n        name: 'buyOrderSignatures',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'batchMatchERC721Orders',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: 'profits',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bool[]',\n        name: 'successes',\n        type: 'bool[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'erc1155BuyAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'buyERC1155',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'buyERC721',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'orderNonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelERC1155Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'orderNonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelERC721Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelLimitOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairLimitOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairLimitOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairRfqOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'makerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'takerToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minValidSalt',\n        type: 'uint256',\n      },\n    ],\n    name: 'cancelPairRfqOrdersWithSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'cancelRfqOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'createTransformWallet',\n    outputs: [\n      {\n        internalType: 'contract IFlashWallet',\n        name: 'wallet',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'executeMetaTransaction',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: 'returnResult',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'address',\n        name: 'impl',\n        type: 'address',\n      },\n    ],\n    name: 'extend',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOrKillLimitOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOrKillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOtcOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillOtcOrderForEth',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillOtcOrderWithEth',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFillAmount',\n        type: 'uint128',\n      },\n    ],\n    name: 'fillRfqOrder',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'takerTokenFilledAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'uint128',\n        name: 'makerTokenFilledAmount',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'takerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillTakerSignedOtcOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'makerSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'takerSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'fillTakerSignedOtcOrderForEth',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC1155OrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC1155OrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNFTOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'orderAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'remainingAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC721OrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getERC721OrderStatus',\n    outputs: [\n      {\n        internalType: 'enum LibNFTOrder.OrderStatus',\n        name: 'status',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'uint248',\n        name: 'nonceRange',\n        type: 'uint248',\n      },\n    ],\n    name: 'getERC721OrderStatusBitVector',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'bitVector',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFeeAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipient',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.LimitOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'getLimitOrderRelevantState',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'actualFillableTakerTokenAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSignatureValid',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n    ],\n    name: 'getMetaTransactionExecutedBlock',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address payable',\n            name: 'signer',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'sender',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'minGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'maxGasPrice',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'callData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'feeToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'feeAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\n        name: 'mtx',\n        type: 'tuple',\n      },\n    ],\n    name: 'getMetaTransactionHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'mtxHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'mtxHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'getMetaTransactionHashExecutedBlock',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOtcOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiryAndNonce',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getOtcOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OtcOrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getProtocolFeeMultiplier',\n    outputs: [\n      {\n        internalType: 'uint32',\n        name: 'multiplier',\n        type: 'uint32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getQuoteSigner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderHash',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'makerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'takerToken',\n            type: 'address',\n          },\n          {\n            internalType: 'uint128',\n            name: 'makerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerAmount',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'txOrigin',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'pool',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'expiry',\n            type: 'uint64',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.RfqOrder',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'getRfqOrderRelevantState',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'orderHash',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'enum LibNativeOrder.OrderStatus',\n            name: 'status',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint128',\n            name: 'takerTokenFilledAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNativeOrder.OrderInfo',\n        name: 'orderInfo',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint128',\n        name: 'actualFillableTakerTokenAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSignatureValid',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'uint256',\n        name: 'idx',\n        type: 'uint256',\n      },\n    ],\n    name: 'getRollbackEntryAtIndex',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'impl',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n    ],\n    name: 'getRollbackLength',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'rollbackLength',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getTransformWallet',\n    outputs: [\n      {\n        internalType: 'contract IFlashWallet',\n        name: 'wallet',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getTransformerDeployer',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'deployer',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'maker',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n    ],\n    name: 'isValidOrderSigner',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isAllowed',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'txOrigin',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'nonceBucket',\n        type: 'uint64',\n      },\n    ],\n    name: 'lastOtcTxOriginNonce',\n    outputs: [\n      {\n        internalType: 'uint128',\n        name: 'lastNonce',\n        type: 'uint128',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'sellOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'sellOrderSignature',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'buyOrderSignature',\n        type: 'tuple',\n      },\n    ],\n    name: 'matchERC721Orders',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'profit',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'target',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'migrate',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellEthForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellTokenForEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint256',\n            name: 'sellAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexBatchSellTokenForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellEthForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellTokenForEth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\n            name: 'id',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n    ],\n    name: 'multiplexMultiHopSellTokenForToken',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC1155Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: 'success',\n        type: 'bytes4',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'onERC721Received',\n    outputs: [\n      {\n        internalType: 'bytes4',\n        name: 'success',\n        type: 'bytes4',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'ownerAddress',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'preSignERC1155Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n    ],\n    name: 'preSignERC721Order',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'signer',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'registerAllowedOrderSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: 'origins',\n        type: 'address[]',\n      },\n      {\n        internalType: 'bool',\n        name: 'allowed',\n        type: 'bool',\n      },\n    ],\n    name: 'registerAllowedRfqOrigins',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'selector',\n        type: 'bytes4',\n      },\n      {\n        internalType: 'address',\n        name: 'targetImpl',\n        type: 'address',\n      },\n    ],\n    name: 'rollback',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint128',\n        name: 'erc1155SellAmount',\n        type: 'uint128',\n      },\n      {\n        internalType: 'bool',\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellERC1155',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'buyOrder',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n      {\n        internalType: 'bytes',\n        name: 'callbackData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellERC721',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellEthForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract ILiquidityProvider',\n        name: 'provider',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'auxiliaryData',\n        type: 'bytes',\n      },\n    ],\n    name: 'sellToLiquidityProvider',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'boughtAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'enum IPancakeSwapFeature.ProtocolFork',\n        name: 'fork',\n        type: 'uint8',\n      },\n    ],\n    name: 'sellToPancakeSwap',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06[]',\n        name: 'tokens',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'isSushi',\n        type: 'bool',\n      },\n    ],\n    name: 'sellToUniswap',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address payable',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellTokenForEthToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes',\n        name: 'encodedPath',\n        type: 'bytes',\n      },\n      {\n        internalType: 'uint256',\n        name: 'sellAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minBuyAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n    ],\n    name: 'sellTokenForTokenToUniswapV3',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'buyAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'quoteSigner',\n        type: 'address',\n      },\n    ],\n    name: 'setQuoteSigner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'transformerDeployer',\n        type: 'address',\n      },\n    ],\n    name: 'setTransformerDeployer',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'interfaceId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isSupported',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'poolIds',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'transferProtocolFeesForPools',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'erc20',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amountOut',\n        type: 'uint256',\n      },\n      {\n        internalType: 'address payable',\n        name: 'recipientWallet',\n        type: 'address',\n      },\n    ],\n    name: 'transferTrappedTokensTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'inputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'contract IERC20TokenV06',\n        name: 'outputToken',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'inputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'minOutputTokenAmount',\n        type: 'uint256',\n      },\n      {\n        components: [\n          {\n            internalType: 'uint32',\n            name: 'deploymentNonce',\n            type: 'uint32',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct ITransformERC20Feature.Transformation[]',\n        name: 'transformations',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'transformERC20',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: 'outputTokenAmount',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'int256',\n        name: 'amount0Delta',\n        type: 'int256',\n      },\n      {\n        internalType: 'int256',\n        name: 'amount1Delta',\n        type: 'int256',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'uniswapV3SwapCallback',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc1155TokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'validateERC1155OrderProperties',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'validateERC1155OrderSignature',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'uint256',\n        name: 'erc721TokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'validateERC721OrderProperties',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'validateERC721OrderSignature',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport class IZeroEx__factory {\n  static readonly abi = _abi;\n  static createInterface(): IZeroExInterface {\n    return new utils.Interface(_abi) as IZeroExInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IZeroEx {\n    return new Contract(address, _abi, signerOrProvider) as IZeroEx;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC1155, ERC1155Interface } from '../ERC1155';\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256[]',\n        name: '_amounts',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'TransferBatch',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: '_amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'TransferSingle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address[]',\n        name: '_owners',\n        type: 'address[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n    ],\n    name: 'balanceOfBatch',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: 'isOperator',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_ids',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '_amounts',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeBatchTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: '_to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: '_id',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: '_amount',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: '_interfaceID',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportsInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n];\n\nexport class ERC1155__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC1155Interface {\n    return new utils.Interface(_abi) as ERC1155Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC1155 {\n    return new Contract(address, _abi, signerOrProvider) as ERC1155;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC20, ERC20Interface } from '../ERC20';\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address',\n      },\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address',\n      },\n      {\n        name: '_value',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address',\n      },\n      {\n        name: '_spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n];\n\nexport class ERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC20Interface {\n    return new utils.Interface(_abi) as ERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers';\nimport type { Provider } from '@ethersproject/providers';\nimport type { ERC721, ERC721Interface } from '../ERC721';\n\nconst _abi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'mint',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes',\n        name: '_data',\n        type: 'bytes',\n      },\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'approved',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'getApproved',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    name: 'ownerOf',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'interfaceId',\n        type: 'bytes4',\n      },\n    ],\n    name: 'supportsInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport class ERC721__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC721Interface {\n    return new utils.Interface(_abi) as ERC721Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {\n    return new Contract(address, _abi, signerOrProvider) as ERC721;\n  }\n}\n","import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport { arrayify } from '@ethersproject/bytes';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\n\nexport interface TypedData {\n  domain: TypedDataDomain;\n  types: Record<string, Array<TypedDataField>>;\n  message: Record<string, any>;\n  primaryType?: string;\n}\n\nexport type { TypedDataDomain, TypedDataField };\n\nexport const encodeTypedDataHash = (typedData: TypedData): string => {\n  const types = { ...typedData.types };\n\n  // remove EIP712Domain key from types as ethers will auto-gen it in\n  // the hash encoder below\n  delete types['EIP712Domain'];\n\n  return _TypedDataEncoder.hash(typedData.domain, types, typedData.message);\n};\n\nexport const encodeTypedDataDigest = (typedData: TypedData): Uint8Array => {\n  return arrayify(encodeTypedDataHash(typedData));\n};\n","export const EIP1271ZeroExDataAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'makerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'feeRecipientAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'senderAddress',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAssetAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerFee',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expirationTimeSeconds',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'salt',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'makerFeeAssetData',\n            type: 'bytes',\n          },\n          {\n            internalType: 'bytes',\n            name: 'takerFeeAssetData',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct IEIP1271Data.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'OrderWithHash',\n    outputs: [],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n];\n","import flatten from 'lodash/flatten';\nimport type { ContractTransaction } from '@ethersproject/contracts';\nimport { BaseProvider, Provider } from '@ethersproject/providers';\nimport {\n  arrayify,\n  hexConcat,\n  hexDataLength,\n  hexDataSlice,\n  hexlify,\n  joinSignature,\n  splitSignature,\n} from '@ethersproject/bytes';\nimport { verifyTypedData } from '@ethersproject/wallet';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Interface } from '@ethersproject/abi';\nimport type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport {\n  generateOrderFromAssetDatas,\n  generateTimeBasedSalt,\n  getEipDomain,\n  normalizeOrder,\n} from '../../utils/v3/order';\nimport { NULL_ADDRESS } from '../../utils/eth';\nimport {\n  decodeAssetData,\n  encodeAssetData,\n  encodeMultiAssetAssetData,\n  getAmountFromAsset,\n} from '../../utils/v3/asset-data';\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n  ExchangeContract,\n} from '../../contracts';\nimport { UnexpectedAssetTypeError } from '../error';\nimport {\n  AdditionalOrderConfig,\n  AssetProxyId,\n  AvailableSignatureTypesV3,\n  EIP712_TYPES,\n  ERC1155AssetDataSerialized,\n  ERC20AssetDataSerialized,\n  ERC721AssetDataSerialized,\n  MultiAssetDataSerializedRecursivelyDecoded,\n  Order,\n  OrderInfoV3,\n  OrderStatusV3,\n  SerializedAvailableAssetDataTypesDecoded,\n  SignedOrder,\n  SigningOptionsV3,\n  SwappableAsset,\n  UserFacingERC1155AssetDataSerializedNormalizedSingle,\n  UserFacingERC20AssetDataSerialized,\n  UserFacingERC721AssetDataSerialized,\n  UserFacingSerializedSingleAssetDataTypes,\n} from './types';\nimport { encodeTypedDataHash, TypedData } from '../../utils/typed-data';\nimport { EIP1271ZeroExDataAbi } from '../../utils/v3/eip1271';\nimport { convertCollectionToBN } from '../../utils/bn/convert';\nimport type {\n  ApprovalStatus,\n  PayableOverrides,\n  TransactionOverrides,\n} from '../common/types';\n\nexport const cancelOrder = (\n  exchangeContract: ExchangeContract,\n  order: Order\n) => {\n  return exchangeContract.cancelOrder(order);\n};\n\nexport const getOrderInfo = async (\n  exchangeContract: ExchangeContract,\n  order: Order\n): Promise<OrderInfoV3> => {\n  const orderInfo = await exchangeContract.getOrderInfo(order);\n  return orderInfo as OrderInfoV3;\n};\n\nexport const getOrderStatus = async (\n  exchangeContract: ExchangeContract,\n  order: Order\n): Promise<OrderStatusV3> => {\n  const orderInfo = await exchangeContract.getOrderInfo(order);\n  return orderInfo.orderStatus as OrderStatusV3;\n};\n\nexport const cancelOrders = (\n  exchangeContract: ExchangeContract,\n  orders: Array<Order>,\n  overrides?: PayableOverrides\n) => {\n  return exchangeContract.batchCancelOrders(orders, overrides);\n};\n\nexport const cancelOrdersUpToNow = (\n  exchangeContract: ExchangeContract,\n  unixTimestampAsSalt: string = generateTimeBasedSalt()\n) => {\n  exchangeContract.cancelOrdersUpTo(unixTimestampAsSalt);\n};\n\nexport const hashOrder = (\n  order: Order,\n  chainId: number,\n  exchangeContractAddress: string\n): string => {\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\n  return _TypedDataEncoder.hash(EIP712_DOMAIN, EIP712_TYPES, order);\n};\n\nexport type InterallySupportedAssetFormat =\n  UserFacingSerializedSingleAssetDataTypes;\n\nexport const signOrderWithEip1271 = async (\n  order: Order,\n  signer: Signer,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const domain = getEipDomain(chainId, exchangeContractAddress);\n  const types = EIP712_TYPES;\n  const value = order;\n\n  const typedData: TypedData = {\n    domain,\n    types,\n    message: value,\n  };\n\n  const orderHash = encodeTypedDataHash(typedData);\n\n  const msg = new Interface(EIP1271ZeroExDataAbi).encodeFunctionData(\n    'OrderWithHash',\n    [order, orderHash]\n  );\n\n  const rawSignatureFromContractWallet = await signer.signMessage(\n    arrayify(msg)\n  );\n\n  return rawSignatureFromContractWallet;\n};\n\nexport const signOrderWithEoaWallet = async (\n  order: Order,\n  signer: TypedDataSigner,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const domain = getEipDomain(chainId, exchangeContractAddress);\n  const types = EIP712_TYPES;\n  const value = order;\n\n  const rawSignatureFromEoaWallet = await signer._signTypedData(\n    domain,\n    types,\n    value\n  );\n\n  return rawSignatureFromEoaWallet;\n};\n\nexport const checkIfContractWallet = async (\n  provider: Provider,\n  walletAddress: string\n): Promise<boolean> => {\n  let isContractWallet: boolean = false;\n  if (provider.getCode) {\n    let walletCode = await provider.getCode(walletAddress);\n    // Wallet Code returns '0x' if no contract address is associated with\n    // Note: Lazy loaded contract wallets will show 0x initially, so we fall back to feature detection\n    if (walletCode && walletCode != '0x') {\n      isContractWallet = true;\n    }\n  }\n  let isSequence = !!(provider as any)._isSequenceProvider;\n  if (isSequence) {\n    isContractWallet = true;\n  }\n  // Walletconnect hides the real provider in the provider (yo dawg)\n  let providerToUse = (provider as any).provider;\n  if (providerToUse?.isWalletConnect) {\n    const isSequenceViaWalletConnect = !!(\n      (providerToUse as any).connector?._peerMeta?.description === 'Sequence'\n    );\n    if (isSequenceViaWalletConnect) {\n      isContractWallet = true;\n    }\n  }\n\n  return isContractWallet;\n};\n\nexport const signOrder = async (\n  order: Order,\n  signerAddress: string,\n  signer: Signer,\n  provider: Provider,\n  chainId: number,\n  exchangeContractAddress: string,\n  signingOptions?: Partial<SigningOptionsV3>\n): Promise<SignedOrder> => {\n  try {\n    let method: AvailableSignatureTypesV3 = 'eoa';\n    // If we have any specific signature type overrides, prefer those\n    if (signingOptions?.signatureType === 'eip1271') {\n      method = 'eip1271';\n    } else if (signingOptions?.signatureType === 'eoa') {\n      method = 'eoa';\n    } else {\n      // Try to detect...\n      if (signingOptions?.autodetectSignatureType === false) {\n        method = 'eoa';\n      } else {\n        // If we made it here, consumer has no preferred signing method,\n        // let's try feature detection to automagically pick a signature type\n        // By default we fallback to EOA signing if we can't figure it out.\n\n        // Let's try to determine if the signer is a contract wallet or not.\n        // If it is, we'll try EIP-1271, otherwise we'll do a normal sign\n        const isContractWallet = await checkIfContractWallet(\n          provider,\n          signerAddress\n        );\n        if (isContractWallet) {\n          method = 'eip1271';\n        } else {\n          method = 'eoa';\n        }\n      }\n    }\n    let signature: string;\n    switch (method) {\n      case 'eoa':\n        const rawEip712Signature = await signOrderWithEoaWallet(\n          order,\n          signer as unknown as TypedDataSigner,\n          chainId,\n          exchangeContractAddress\n        );\n        signature = prepareOrderSignatureFromEoaWallet(rawEip712Signature);\n        break;\n      case 'eip1271':\n        const rawEip1271Signature = (signature = await signOrderWithEip1271(\n          order,\n          signer,\n          chainId,\n          exchangeContractAddress\n        ));\n        signature =\n          prepareOrderSignatureFromContractWallet(rawEip1271Signature);\n        break;\n      default:\n        throw new Error(`Unknown signature method chosen: ${method}`);\n    }\n\n    const signedOrder: SignedOrder = {\n      ...order,\n      signature,\n    };\n\n    return signedOrder;\n  } catch (e) {\n    console.log('error signing order', e);\n    throw e;\n  }\n};\n\n// export const prepareOrderSignature = (\n//   rawSignature: string,\n//   method?: AvailableSignatureTypes\n// ) => {\n//   let preferredMethod = method ?? 'eoa';\n//   try {\n//     return prepareOrderSignatureFromEoaWallet(rawSignature);\n//   } catch (e) {\n//     console.log('prepareOrderSignature:Errror preparing order signature', e);\n//     console.log('Attempting to decode contract wallet signature');\n//     try {\n//       return prepareOrderSignatureFromContractWallet(rawSignature);\n//     } catch (e) {\n//       throw e;\n//     }\n//   }\n// };\n\nexport const prepareOrderSignatureFromEoaWallet = (rawSignature: string) => {\n  // Append the signature type (eg. \"0x02\" for EIP712 signatures)\n  // at the end of the signature since this is what 0x expects\n  const signature = splitSignature(rawSignature);\n  return hexConcat([hexlify(signature.v), signature.r, signature.s, '0x02']);\n};\n\nexport const prepareOrderSignatureFromContractWallet = (\n  rawSignature: string\n) => {\n  // Append the signature type (eg. \"0x07\" for EIP1271 signatures)\n  // at the end of the signature since this is what 0x expects\n  // See: https://github.com/0xProject/ZEIPs/issues/33\n  return hexConcat([rawSignature, '0x07']);\n};\n\nexport const verifyOrderSignature = (\n  order: Order,\n  signature: string,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\n  try {\n    const maker = order.makerAddress.toLowerCase();\n    const length = hexDataLength(signature);\n    // Grab the V (exists at index 0 for 0x orders)\n    const slicedSigV = hexDataSlice(signature, 0, 1);\n    // Grab the R and S (index 1 through length - 1 b/c the end hex is the signature type so we strip that too)\n    const slicedSig = hexDataSlice(signature, 1, length - 1);\n\n    const derivedSignatureHex = hexConcat([slicedSig, slicedSigV]);\n    const derivedSignature = joinSignature(derivedSignatureHex);\n\n    const signer = verifyTypedData(\n      EIP712_DOMAIN,\n      EIP712_TYPES,\n      order,\n      derivedSignature\n    );\n\n    return maker.toLowerCase() === signer.toLowerCase();\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nexport const buildOrder = (\n  makerAssets: Array<InterallySupportedAssetFormat>,\n  takerAssets: Array<InterallySupportedAssetFormat>,\n  orderConfig: AdditionalOrderConfig\n): Order => {\n  // Encode maker assets\n  let makerAssetAmount: BigNumber;\n  let makerAssetData: string;\n\n  const makerAssetEligibleForSingleAsset = makerAssets.length === 1;\n  if (makerAssetEligibleForSingleAsset) {\n    const makerAsset = makerAssets[0];\n    makerAssetAmount = BigNumber.from(getAmountFromAsset(makerAsset));\n    makerAssetData = encodeAssetData(makerAsset, false);\n  } else {\n    const makerAssetAmounts = makerAssets.map((ma) => getAmountFromAsset(ma));\n    const makerAssetDatas = makerAssets.map((ma) => encodeAssetData(ma, true));\n    const makerMultiAsset = encodeMultiAssetAssetData(\n      makerAssetAmounts,\n      makerAssetDatas\n    );\n    makerAssetData = makerMultiAsset;\n    makerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\n  }\n\n  // Encode taker assets\n  let takerAssetAmount: BigNumber;\n  let takerAssetData: string;\n\n  const takerAssetEligibleForSingleAsset = takerAssets.length === 1;\n  // If we only have one asset to swap\n  if (takerAssetEligibleForSingleAsset) {\n    const takerAsset = takerAssets[0];\n    takerAssetAmount = BigNumber.from(getAmountFromAsset(takerAsset));\n    takerAssetData = encodeAssetData(takerAsset, false);\n  } else {\n    const takerAssetAmounts = takerAssets.map((ta) => getAmountFromAsset(ta));\n    const takerAssetDatas = takerAssets.map((ta) => encodeAssetData(ta, true));\n    const takerMultiAsset = encodeMultiAssetAssetData(\n      convertCollectionToBN(takerAssetAmounts),\n      takerAssetDatas\n    );\n    takerAssetData = takerMultiAsset;\n    takerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\n  }\n\n  const order = generateOrderFromAssetDatas({\n    makerAssetAmount: makerAssetAmount,\n    makerAssetData: makerAssetData,\n    takerAddress: orderConfig.takerAddress ?? NULL_ADDRESS,\n    takerAssetAmount: takerAssetAmount,\n    takerAssetData: takerAssetData,\n    exchangeAddress: orderConfig.exchangeAddress ?? '',\n    ...orderConfig,\n  });\n\n  return order;\n};\n\nexport const fillSignedOrder = async (\n  signedOrder: SignedOrder,\n  exchangeContract: ExchangeContract,\n  overrides?: PayableOverrides\n): Promise<ContractTransaction> => {\n  return exchangeContract.fillOrKillOrder(\n    normalizeOrder(signedOrder),\n    signedOrder.takerAssetAmount,\n    signedOrder.signature,\n    overrides\n  );\n};\n\n/**\n *\n * @param walletAddress Owner of the asset\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param provider\n * @returns\n */\nexport const getApprovalStatus = async (\n  walletAddress: string,\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  provider: BaseProvider\n): Promise<ApprovalStatus> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\n        MAX_APPROVAL.toString()\n      ).sub('100000000000000000');\n      const approvedForMax = erc20AllowanceBigNumber.gte(\n        MAX_APPROVAL_WITH_BUFFER\n      );\n      return {\n        contractApproved: approvedForMax,\n      };\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\n        asset.tokenId\n      );\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\n        await Promise.all([\n          erc721ApprovalForAllPromise,\n          erc721ApprovedAddressForIdPromise,\n        ]);\n      const tokenIdApproved =\n        erc721ApprovedAddressForId.toLowerCase() ===\n        exchangeProxyAddressForAsset.toLowerCase();\n      return {\n        contractApproved: erc721ApprovalForAll ?? false,\n        tokenIdApproved: tokenIdApproved,\n      };\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      return {\n        contractApproved: erc1155ApprovalForAll ?? false,\n      };\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Some arbitrarily high number.\n// TODO(johnrjj) - Support custom ERC20 approval amounts\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const approveAsset = async (\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  signer: Signer,\n  overrides: TransactionOverrides = {},\n  approve: boolean = true\n): Promise<ContractTransaction> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL.toString() : 0,\n        {\n          ...overrides,\n        }\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...overrides,\n        }\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...overrides,\n        }\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const estimateGasForApproval = async (\n  exchangeProxyAddressForAsset: string,\n  asset: InterallySupportedAssetFormat,\n  signer: Signer,\n  overrides: TransactionOverrides = {},\n  approve: boolean = true\n): Promise<BigNumber> => {\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.estimateGas.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL : 0\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      const erc721ApprovalForAllPromise = erc721.estimateGas.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      const erc1155ApprovalForAll = await erc1155.estimateGas.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\nexport const getSignatureTypeFromSignature = (signature: string): string => {\n  const length = hexDataLength(signature);\n  const signatureType = hexDataSlice(signature, length - 1);\n  return signatureType;\n};\n\nexport const estimateGasForFillOrder = async (\n  signedOrder: SignedOrder,\n  exchangeContract: ExchangeContract,\n  _overrides?: PayableOverrides | undefined\n) => {\n  const estimatedGasRequiredForFill =\n    await exchangeContract.estimateGas.fillOrder(\n      normalizeOrder(signedOrder),\n      signedOrder.takerAssetAmount,\n      signedOrder.signature\n    );\n  return estimatedGasRequiredForFill;\n};\n\nexport const convertDecodedAssetDataToUserFacingAssets = (\n  decodedAssetData: SerializedAvailableAssetDataTypesDecoded,\n  assetAmount: string\n): Array<SwappableAsset> => {\n  const assetProxyId = decodedAssetData.assetProxyId;\n\n  switch (assetProxyId) {\n    case AssetProxyId.ERC20:\n      const decodedErc20 = decodedAssetData as ERC20AssetDataSerialized;\n      const swappableErc20: UserFacingERC20AssetDataSerialized = {\n        type: 'ERC20',\n        amount: assetAmount,\n        tokenAddress: decodedErc20.tokenAddress,\n      };\n      return [swappableErc20];\n    case AssetProxyId.ERC721:\n      const decodedErc721 = decodedAssetData as ERC721AssetDataSerialized;\n      const swappableErc721: UserFacingERC721AssetDataSerialized = {\n        type: 'ERC721',\n        tokenAddress: decodedErc721.tokenAddress,\n        tokenId: decodedErc721.tokenId,\n      };\n      return [swappableErc721];\n    case AssetProxyId.ERC1155:\n      const decodedErc1155 = decodedAssetData as ERC1155AssetDataSerialized;\n      const swappableErc1155: UserFacingERC1155AssetDataSerializedNormalizedSingle =\n        {\n          type: 'ERC1155',\n          tokenAddress: decodedErc1155.tokenAddress,\n          tokenId: decodedErc1155.tokenIds[0],\n          amount: decodedErc1155.tokenValues[0] ?? '1',\n        };\n      return [swappableErc1155];\n    case AssetProxyId.MultiAsset:\n      const multiAssetDecodedData =\n        decodedAssetData as MultiAssetDataSerializedRecursivelyDecoded;\n      const nestedAssets = flatten(\n        multiAssetDecodedData.nestedAssetData.map((asset, idx) =>\n          convertDecodedAssetDataToUserFacingAssets(\n            asset,\n            multiAssetDecodedData.amounts[idx]\n          )\n        )\n      );\n      const nestedAssetsWithCorrectAmounts: Array<SwappableAsset> =\n        nestedAssets.map((nestedAsset, idx) => {\n          const nestedAssetValueFromMultiAsset =\n            multiAssetDecodedData.amounts[idx];\n          // Overwrite original nested asset amount, b/c when its nested inside a multiasset encoding, the multiasset top level values take over.\n          return {\n            ...nestedAsset,\n            amount: nestedAssetValueFromMultiAsset,\n          };\n        });\n      return nestedAssetsWithCorrectAmounts;\n    default:\n      throw new Error(\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\n      );\n  }\n};\n\nexport const getAssetsFromOrder = (\n  order: Order\n): { makerAssets: SwappableAsset[]; takerAssets: SwappableAsset[] } => {\n  const decodedMakerAssetData = decodeAssetData(order.makerAssetData);\n  const decodedTakerAssetData = decodeAssetData(order.takerAssetData);\n\n  const makerAssets = convertDecodedAssetDataToUserFacingAssets(\n    decodedMakerAssetData,\n    order.makerAssetAmount\n  );\n  const takerAssets = convertDecodedAssetDataToUserFacingAssets(\n    decodedTakerAssetData,\n    order.takerAssetAmount\n  );\n\n  return {\n    makerAssets,\n    takerAssets,\n  };\n};\n\n// export const loadApprovalStatusAll = async (assets: Array<InterallySupportedAsset>) => {\n//   const assetsGroupedByContractAddress = groupBy(assets, (asset) => asset.tokenAddress)\n//   const todoPromises = Object.entries(assetsGroupedByContractAddress).map(\n//     ([contractAddress, assetsWithSameTakerAddress]) => {\n//       const type = assetsWithSameTakerAddress[0]?.type\n//       switch (type) {\n//         case SupportedTokenTypes.ERC20:\n//           break\n//         case SupportedTokenTypes.ERC721:\n//           break\n//         case SupportedTokenTypes.ERC1155:\n//           break\n//         default:\n//           break\n//       }\n//     },\n//   )\n// }\n","import { UnsupportedChainId, UnexpectedAssetTypeError } from '../../sdk/error';\nimport type {\n  AddressesForChainV3,\n  ContractAddresses,\n  SupportedTokenTypes,\n} from '../../sdk/v3/types';\nimport defaultAddresses from '../../sdk/v3/addresses.json';\n\nconst getZeroExAddressesForChain = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n): AddressesForChainV3 | undefined => {\n  const chainIdString = chainId.toString(10);\n  const maybeAddressesForChain: AddressesForChainV3 | undefined = (\n    addresses as { [key: string]: AddressesForChainV3 }\n  )[chainIdString];\n  return maybeAddressesForChain;\n};\n\nexport const getProxyAddressForErcType = (\n  assetType: SupportedTokenTypes,\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n) => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  if (!zeroExAddresses) {\n    throw new UnsupportedChainId(chainId);\n  }\n  switch (assetType) {\n    case 'ERC20':\n      return zeroExAddresses.erc20Proxy;\n    case 'ERC721':\n      return zeroExAddresses.erc721Proxy;\n    case 'ERC1155':\n      return zeroExAddresses.erc1155Proxy;\n    default:\n      throw new UnexpectedAssetTypeError(assetType);\n  }\n};\n\nexport const getForwarderAddress = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n) => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  if (!zeroExAddresses) {\n    throw new UnsupportedChainId(chainId);\n  }\n  return zeroExAddresses.forwarder;\n};\n\nexport const getWrappedNativeToken = (\n  chainId: number,\n  addresses: ContractAddresses = defaultAddresses\n): string | null => {\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\n  return zeroExAddresses?.wrappedNativeToken ?? null;\n};\n","import { SupportedChainIdsV3 } from '../../sdk/v3/types';\n\nconst DEFAUTLT_GAS_BUFFER_MULTIPLES: { [chainId: number]: number } = {\n  [SupportedChainIdsV3.Polygon]: 1.5,\n  [SupportedChainIdsV3.PolygonMumbai]: 1.5,\n  [SupportedChainIdsV3.Kovan]: 1.5,\n};\n\nexport { DEFAUTLT_GAS_BUFFER_MULTIPLES };\n","export const sleep = (t: number) => {\n  return new Promise<void>((resolve) => {\n    const timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      resolve();\n    }, t);\n  });\n};\n","import type { BaseProvider } from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport {\n  buildOrder as _buildOrder,\n  signOrder as _signOrder,\n  fillSignedOrder as _fillSignedOrder,\n  approveAsset as _approveAsset,\n  verifyOrderSignature as _verifyOrderSignature,\n  getApprovalStatus as _getApprovalStatus,\n  cancelOrder as _cancelOrder,\n  cancelOrders as _cancelOrders,\n  estimateGasForFillOrder as _estimateGasForFillOrder,\n  estimateGasForApproval as _estimateGasForApproval,\n  cancelOrdersUpToNow as _cancelOrdersUpToNow,\n  getOrderInfo as _getOrderInfo,\n  getAssetsFromOrder as _getAssetsFromOrder,\n  hashOrder as _hashOrder,\n} from './pure';\nimport {\n  getEipDomain,\n  normalizeOrder as _normalizeOrder,\n} from '../../utils/v3/order';\nimport type {\n  ApprovalOverrides,\n  BuildOrderAdditionalConfig,\n  FillOrderOverrides,\n  INftSwapV3,\n} from './INftSwapV3';\nimport {\n  SupportedChainIdsV3,\n  EIP712_TYPES,\n  Order,\n  OrderInfoV3,\n  OrderStatusV3,\n  OrderStatusCodeLookup,\n  SignedOrder,\n  SupportedTokenTypes,\n  SwappableAsset,\n  AddressesForChainV3,\n  BigNumberish,\n  ERC20AssetDataSerialized,\n  AssetProxyId,\n  SigningOptionsV3,\n} from './types';\nimport {\n  ExchangeContract,\n  ExchangeContract__factory,\n  Forwarder__factory,\n} from '../../contracts';\nimport {\n  convertAssetsToInternalFormat,\n  convertAssetToInternalFormat,\n  decodeAssetData,\n} from '../../utils/v3/asset-data';\nimport {\n  getProxyAddressForErcType,\n  getForwarderAddress,\n  getWrappedNativeToken,\n} from '../../utils/v3/default-addresses';\nimport { DEFAUTLT_GAS_BUFFER_MULTIPLES } from '../../utils/v3/gas-buffer';\nimport { sleep } from '../../utils/sleep';\nimport addresses from './addresses.json';\nimport { PayableOverrides, TransactionOverrides } from '../common/types';\n\nexport interface NftSwapConfig {\n  exchangeContractAddress?: string;\n  erc20ProxyContractAddress?: string;\n  erc721ProxyContractAddress?: string;\n  erc1155ProxyContractAddress?: string;\n  forwarderContractAddress?: string;\n  wrappedNativeTokenContractAddress?: string;\n  gasBufferMultiples?: { [chainId: number]: number };\n}\n\n/**\n * NftSwap Convenience class to swap between ERC20, ERC721, and ERC1155. Primary entrypoint for swapping.\n */\nclass NftSwapV3 implements INftSwapV3 {\n  public provider: BaseProvider;\n  public signer: Signer | undefined;\n  public chainId: number;\n  public exchangeContract: ExchangeContract;\n  public exchangeContractAddress: string;\n  public erc20ProxyContractAddress: string;\n  public erc721ProxyContractAddress: string;\n  public erc1155ProxyContractAddress: string;\n  public wrappedNativeTokenContractAddress: string | null;\n  public forwarderContractAddress: string | null;\n  public gasBufferMultiples: { [chainId: number]: number } | null;\n\n  constructor(\n    provider: BaseProvider,\n    signer: Signer,\n    chainId?: number,\n    additionalConfig?: NftSwapConfig\n  ) {\n    this.provider = provider;\n    this.signer = signer;\n    this.chainId =\n      chainId ?? (this.provider._network.chainId as SupportedChainIdsV3);\n\n    const chainDefaultContractAddresses: AddressesForChainV3 | undefined =\n      addresses[this.chainId as SupportedChainIdsV3];\n\n    const zeroExExchangeContractAddress =\n      additionalConfig?.exchangeContractAddress ??\n      chainDefaultContractAddresses?.exchange;\n\n    warning(\n      chainDefaultContractAddresses,\n      `Default contract addresses missing for chain ${this.chainId}. Supply ExchangeContract and Asset Proxy contracts manually via additionalConfig argument`\n    );\n\n    this.exchangeContractAddress = zeroExExchangeContractAddress;\n\n    this.erc20ProxyContractAddress =\n      additionalConfig?.erc20ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC20, this.chainId);\n    this.erc721ProxyContractAddress =\n      additionalConfig?.erc721ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC721, this.chainId);\n    this.erc1155ProxyContractAddress =\n      additionalConfig?.erc1155ProxyContractAddress ??\n      getProxyAddressForErcType(SupportedTokenTypes.ERC1155, this.chainId);\n    this.forwarderContractAddress =\n      additionalConfig?.forwarderContractAddress ??\n      getForwarderAddress(this.chainId) ??\n      null;\n    this.wrappedNativeTokenContractAddress =\n      additionalConfig?.wrappedNativeTokenContractAddress ??\n      getWrappedNativeToken(this.chainId) ??\n      null;\n\n    invariant(\n      this.exchangeContractAddress,\n      '0x V3 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\n    );\n    warning(\n      this.erc20ProxyContractAddress,\n      'ERC20Proxy Contract Address not set, ERC20 swaps will not work'\n    );\n    warning(\n      this.erc721ProxyContractAddress,\n      'ERC721Proxy Contract Address not set, ERC721 swaps will not work'\n    );\n    warning(\n      this.erc1155ProxyContractAddress,\n      'ERC20Proxy Contract Address not set, ERC1155 swaps will not work'\n    );\n    warning(\n      this.forwarderContractAddress,\n      'Forwarder Contract Address not set, native token fills will not work'\n    );\n    warning(\n      this.wrappedNativeTokenContractAddress,\n      'WETH Contract Address not set, SDK cannot automatically check if order can be filled with native token'\n    );\n    warning(this.signer, 'No Signer provided; Read-only mode only.');\n\n    // Initialize Exchange contract so we can interact with it easily.\n    this.exchangeContract = ExchangeContract__factory.connect(\n      zeroExExchangeContractAddress,\n      signer ?? provider\n    );\n\n    this.gasBufferMultiples =\n      additionalConfig?.gasBufferMultiples ?? DEFAUTLT_GAS_BUFFER_MULTIPLES;\n  }\n\n  public cancelOrder = async (order: Order) => {\n    return _cancelOrder(this.exchangeContract, order);\n  };\n\n  /**\n   *\n   * @param order : 0x Order;\n   * @param timeoutInMs : Timeout in millisecond to give up listening for order fill\n   * @param throwIfStatusOtherThanFillableOrFilled : Option to throw if status changes from fillable to anything other than 'filled' (e.g 'cancelled')\n   * @returns OrderInfo if status change in order, or null if timed out\n   */\n  public waitUntilOrderFilledOrCancelled = async (\n    order: Order,\n    timeoutInMs: number = 60 * 1000,\n    pollOrderStatusFrequencyInMs: number = 10_000,\n    throwIfStatusOtherThanFillableOrFilled: boolean = false\n  ): Promise<OrderInfoV3 | null> => {\n    let settled = false;\n\n    const timeoutPromise = sleep(timeoutInMs).then((_) => null);\n\n    const orderStatusRefreshPromiseFn =\n      async (): Promise<OrderInfoV3 | null> => {\n        while (!settled) {\n          const orderInfo = await this.getOrderInfo(order);\n          if (orderInfo.orderStatus === OrderStatusV3.Fillable) {\n            await sleep(pollOrderStatusFrequencyInMs);\n            continue;\n          } else if (orderInfo.orderStatus === OrderStatusV3.FullyFilled) {\n            return orderInfo;\n          } else {\n            // expired, bad order, etc\n            if (throwIfStatusOtherThanFillableOrFilled) {\n              throw new Error(\n                OrderStatusCodeLookup[orderInfo.orderStatus] ??\n                  orderInfo.orderStatus ??\n                  'Unknown status'\n              );\n            }\n            return orderInfo;\n          }\n        }\n        return null;\n      };\n    const fillEventListenerFn = async () => {\n      // TODO(johnrjj)\n      await sleep(timeoutInMs * 2);\n      return null;\n    };\n\n    const orderStatusRefreshPromiseLoop: Promise<OrderInfoV3 | null> =\n      orderStatusRefreshPromiseFn();\n\n    const fillEventPromise: Promise<OrderInfoV3 | null> = fillEventListenerFn();\n\n    const orderInfo = await Promise.any([\n      timeoutPromise,\n      orderStatusRefreshPromiseLoop,\n      fillEventPromise,\n    ]);\n    settled = true;\n\n    return orderInfo;\n  };\n\n  public getOrderInfo = async (order: Order): Promise<OrderInfoV3> => {\n    return _getOrderInfo(this.exchangeContract, order);\n  };\n\n  public getOrderStatus = async (order: Order): Promise<OrderStatusV3> => {\n    const orderInfo = await this.getOrderInfo(order);\n    return orderInfo.orderStatus;\n  };\n\n  public awaitTransactionHash = async (txHash: string) => {\n    return this.provider.waitForTransaction(txHash);\n  };\n\n  public signOrder = async (\n    order: Order,\n    addressOfWalletSigningOrder: string,\n    signerOverride?: Signer,\n    signingOptions?: Partial<SigningOptionsV3>\n  ) => {\n    const signerToUser = signerOverride ?? this.signer;\n    if (!signerToUser) {\n      throw new Error('signOrder:Signer undefined');\n    }\n    return _signOrder(\n      order,\n      addressOfWalletSigningOrder,\n      signerToUser,\n      this.provider,\n      this.chainId,\n      this.exchangeContract.address,\n      signingOptions\n    );\n  };\n\n  public buildOrder = (\n    makerAssets: SwappableAsset[],\n    takerAssets: SwappableAsset[],\n    makerAddress: string,\n    userConfig?: Partial<BuildOrderAdditionalConfig>\n  ) => {\n    const defaultConfig = { chainId: this.chainId, makerAddress: makerAddress };\n    const config = { ...defaultConfig, ...userConfig };\n    return _buildOrder(\n      convertAssetsToInternalFormat(makerAssets),\n      convertAssetsToInternalFormat(takerAssets),\n      config\n    );\n  };\n\n  public loadApprovalStatus = async (\n    asset: SwappableAsset,\n    walletAddress: string\n  ) => {\n    // TODO(johnrjj) - Fix this...\n    const exchangeProxyAddressForAsset = getProxyAddressForErcType(\n      asset.type as SupportedTokenTypes,\n      this.chainId\n    );\n    const assetInternalFmt = convertAssetToInternalFormat(asset);\n    return _getApprovalStatus(\n      walletAddress,\n      exchangeProxyAddressForAsset,\n      assetInternalFmt,\n      this.provider\n    );\n  };\n\n  /**\n   * @param asset Asset in the SDK format\n   * @returns\n   */\n  public async approveTokenOrNftByAsset(\n    asset: SwappableAsset,\n    _walletAddress: string, // Remove in next release\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    otherOverrides?: Partial<ApprovalOverrides>\n  ) {\n    // TODO(johnrjj) - Look up via class fields instead...\n    const exchangeProxyAddressForAsset =\n      otherOverrides?.exchangeProxyContractAddressForAsset ??\n      getProxyAddressForErcType(\n        asset.type as SupportedTokenTypes,\n        this.chainId\n      );\n    const signerToUse = otherOverrides?.signer ?? this.signer;\n    if (!signerToUse) {\n      throw new Error('approveTokenOrNftByAsset:Signer null');\n    }\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\n    }\n    let gasBufferMultiple: number | undefined = undefined;\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\n      gasBufferMultiple = undefined;\n    } else {\n      gasBufferMultiple =\n        otherOverrides?.gasAmountBufferMultiple ??\n        this.getGasMultipleForChainId(this.chainId);\n    }\n    let maybeCustomGasLimit: BigNumberish | undefined;\n    if (gasBufferMultiple) {\n      const estimatedGasAmount = await _estimateGasForApproval(\n        exchangeProxyAddressForAsset,\n        convertAssetToInternalFormat(asset),\n        signerToUse,\n        approvalTransactionOverrides ?? {},\n        otherOverrides?.approve ?? true\n      );\n      maybeCustomGasLimit = Math.floor(\n        estimatedGasAmount.toNumber() * gasBufferMultiple\n      );\n    }\n\n    return _approveAsset(\n      exchangeProxyAddressForAsset,\n      convertAssetToInternalFormat(asset),\n      signerToUse,\n      {\n        gasLimit: maybeCustomGasLimit,\n        ...approvalTransactionOverrides,\n      },\n      otherOverrides?.approve ?? true\n    );\n  }\n\n  public getOrderHash = (order: Order) => {\n    return _hashOrder(order, this.chainId, this.exchangeContract.address);\n  };\n\n  public getTypedData = (\n    chainId: number,\n    exchangeContractAddress: string,\n    order: Order\n  ) => {\n    const domain = getEipDomain(chainId, exchangeContractAddress);\n    const types = EIP712_TYPES;\n    const value = order;\n    return {\n      domain,\n      types,\n      value,\n    };\n  };\n\n  /**\n   * Decodes readable order data (maker and taker assets) from the Order's encoded asset data\n   * @param order : 0x Order (or Signed Order);\n   * @returns Maker and taker assets for the order\n   */\n  public getAssetsFromOrder = (order: Order) => {\n    return _getAssetsFromOrder(order);\n  };\n\n  public checkIfOrderCanBeFilledWithNativeToken = (\n    order: Order,\n    wrappedNativeTokenContractAddress: string | undefined = this\n      .wrappedNativeTokenContractAddress ?? undefined\n  ): boolean => {\n    warning(\n      this.wrappedNativeTokenContractAddress,\n      'Wrapped native token contract address not set. Cannot determine if order can be filled with native token'\n    );\n    const decodedAssetData = decodeAssetData(order.takerAssetData);\n\n    // Can only fill with native token when taker asset is ERC20. (Multiasset is not supported)\n    if (\n      decodedAssetData.assetProxyId.toLowerCase() !==\n      AssetProxyId.ERC20.toLowerCase()\n    ) {\n      return false;\n    }\n\n    // If we get this far, we have a single asset (non-multiasset) ERC20 for the taker token.\n    // Let's check if it is the wrapped native contract address for this chain (e.g. WETH on mainnet or rinkeby, WMATIC on polygon)\n    const erc20TokenAddress = (decodedAssetData as ERC20AssetDataSerialized)\n      .tokenAddress;\n    invariant(\n      erc20TokenAddress,\n      'ERC20 token address missing from detected ERC20 asset data'\n    );\n\n    return (\n      erc20TokenAddress.toLowerCase() ===\n      wrappedNativeTokenContractAddress?.toLowerCase()\n    );\n  };\n\n  public fillSignedOrder = async (\n    signedOrder: SignedOrder,\n    fillOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides: Partial<PayableOverrides> = {}\n  ) => {\n    const exchangeContract =\n      fillOverrides?.exchangeContract ?? this.exchangeContract;\n    let gasBufferMultiple: number | undefined = undefined;\n    if (fillOverrides?.gasAmountBufferMultiple === null) {\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\n      gasBufferMultiple = undefined;\n    } else {\n      gasBufferMultiple =\n        fillOverrides?.gasAmountBufferMultiple ??\n        this.getGasMultipleForChainId(this.chainId);\n    }\n    let maybeCustomGasLimit: BigNumberish | undefined;\n    if (gasBufferMultiple) {\n      const estimatedGasAmount = await _estimateGasForFillOrder(\n        signedOrder,\n        exchangeContract\n      );\n      // NOTE(johnrjj) - Underflow issues, so we convert to number. Gas amounts shouldn't overflow.\n      maybeCustomGasLimit = Math.floor(\n        estimatedGasAmount.toNumber() * gasBufferMultiple\n      );\n    }\n\n    const allTxOverrides: Partial<PayableOverrides> = {\n      gasLimit: maybeCustomGasLimit,\n      ...transactionOverrides,\n    };\n\n    if (fillOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken) {\n      const eligibleForNativeTokenFill =\n        this.checkIfOrderCanBeFilledWithNativeToken(signedOrder);\n      warning(\n        eligibleForNativeTokenFill,\n        `Order ineligible for native token fill, fill will fail.`\n      );\n      invariant(\n        this.forwarderContractAddress,\n        'Forwarder contract address null, cannot fill order in native token'\n      );\n      const forwarderContract = Forwarder__factory.connect(\n        this.forwarderContractAddress,\n        this.signer ?? this.provider\n      );\n      const amountOfEthToFillWith = signedOrder.takerAssetAmount;\n      return forwarderContract.marketBuyOrdersWithEth(\n        [signedOrder],\n        signedOrder.makerAssetAmount,\n        [signedOrder.signature],\n        [],\n        [],\n        {\n          value: amountOfEthToFillWith,\n          ...allTxOverrides,\n        }\n      );\n    }\n\n    return _fillSignedOrder(signedOrder, exchangeContract, allTxOverrides);\n  };\n\n  private getGasMultipleForChainId = (chainId: number): number | undefined => {\n    if (this.gasBufferMultiples) {\n      return this.gasBufferMultiples[this.chainId];\n    }\n    return undefined;\n  };\n\n  public normalizeOrder = (order: Order): Order => {\n    const normalizedOrder = _normalizeOrder(order);\n    return normalizedOrder as Order;\n  };\n\n  public normalizeSignedOrder = (order: SignedOrder): SignedOrder => {\n    const normalizedOrder = _normalizeOrder(order);\n    return normalizedOrder as SignedOrder;\n  };\n\n  public verifyOrderSignature = (\n    order: Order,\n    signature: string,\n    chainId: number,\n    exchangeContractAddress: string\n  ) => {\n    return _verifyOrderSignature(\n      order,\n      signature,\n      chainId,\n      exchangeContractAddress\n    );\n  };\n}\n\nexport { NftSwapV3 };\n","export const EIP712_DOMAIN_PARAMETERS = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n];\n\nexport const ERC721ORDER_STRUCT_NAME = 'ERC721Order';\n\nexport const ERC721ORDER_STRUCT_ABI = [\n  { type: 'uint8', name: 'direction' },\n  { type: 'address', name: 'maker' },\n  { type: 'address', name: 'taker' },\n  { type: 'uint256', name: 'expiry' },\n  { type: 'uint256', name: 'nonce' },\n  { type: 'address', name: 'erc20Token' },\n  { type: 'uint256', name: 'erc20TokenAmount' },\n  { type: 'Fee[]', name: 'fees' },\n  { type: 'address', name: 'erc721Token' },\n  { type: 'uint256', name: 'erc721TokenId' },\n  { type: 'Property[]', name: 'erc721TokenProperties' },\n];\n\nexport const EIP1155_DOMAIN_PARAMETERS = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n];\n\nexport const ERC1155ORDER_STRUCT_NAME = 'ERC1155Order';\nexport const ERC1155ORDER_STRUCT_ABI = [\n  { type: 'uint8', name: 'direction' },\n  { type: 'address', name: 'maker' },\n  { type: 'address', name: 'taker' },\n  { type: 'uint256', name: 'expiry' },\n  { type: 'uint256', name: 'nonce' },\n  { type: 'address', name: 'erc20Token' },\n  { type: 'uint256', name: 'erc20TokenAmount' },\n  { type: 'Fee[]', name: 'fees' },\n  { type: 'address', name: 'erc1155Token' },\n  { type: 'uint256', name: 'erc1155TokenId' },\n  { type: 'Property[]', name: 'erc1155TokenProperties' },\n  { type: 'uint128', name: 'erc1155TokenAmount' },\n];\n\nexport const FEE_ABI = [\n  { type: 'address', name: 'recipient' },\n  { type: 'uint256', name: 'amount' },\n  { type: 'bytes', name: 'feeData' },\n];\n\nexport const PROPERTY_ABI = [\n  { type: 'address', name: 'propertyValidator' },\n  { type: 'bytes', name: 'propertyData' },\n];\n\nexport const ETH_ADDRESS_AS_ERC20 =\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\nexport const NATIVE_TOKEN_ADDRESS_AS_ERC20 =\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { hexDataLength, hexDataSlice } from '@ethersproject/bytes';\nimport type { BaseProvider } from '@ethersproject/providers';\nimport type { ContractTransaction } from '@ethersproject/contracts';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport { v4 } from 'uuid';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\nimport padEnd from 'lodash/padEnd';\nimport padStart from 'lodash/padStart';\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n} from '../../contracts';\nimport { NULL_ADDRESS } from '../../utils/eth';\nimport { UnexpectedAssetTypeError } from '../error';\nimport type {\n  ECSignature,\n  ERC721OrderStruct,\n  ERC721OrderStructSerialized,\n  ERC1155OrderStruct,\n  ERC1155OrderStructSerialized,\n  NftOrderV4,\n  OrderStructOptionsCommon,\n  OrderStructOptionsCommonStrict,\n  SignedNftOrderV4,\n  SignedNftOrderV4Serialized,\n  SwappableAssetV4,\n  UserFacingERC20AssetDataSerializedV4,\n  UserFacingERC721AssetDataSerializedV4,\n  UserFacingERC1155AssetDataSerializedV4,\n  ApprovalOverrides,\n} from './types';\nimport { ApprovalStatus, TransactionOverrides } from '../common/types';\nimport {\n  ERC721ORDER_STRUCT_NAME,\n  ERC721ORDER_STRUCT_ABI,\n  ERC1155ORDER_STRUCT_NAME,\n  ERC1155ORDER_STRUCT_ABI,\n  FEE_ABI,\n  PROPERTY_ABI,\n  ETH_ADDRESS_AS_ERC20,\n} from './constants';\n\nexport const signOrderWithEoaWallet = async (\n  order: NftOrderV4,\n  signer: TypedDataSigner,\n  chainId: number,\n  exchangeContractAddress: string\n) => {\n  if ((order as ERC1155OrderStruct).erc1155Token) {\n    const domain = {\n      chainId: chainId,\n      verifyingContract: exchangeContractAddress,\n      name: 'ZeroEx',\n      version: '1.0.0',\n    };\n    const types = {\n      [ERC1155ORDER_STRUCT_NAME]: ERC1155ORDER_STRUCT_ABI,\n      Fee: FEE_ABI,\n      Property: PROPERTY_ABI,\n    };\n    const value = order;\n\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\n      domain,\n      types,\n      value\n    );\n\n    return rawSignatureFromEoaWallet;\n  }\n\n  if ((order as ERC721OrderStruct).erc721Token) {\n    const domain = {\n      chainId: chainId,\n      verifyingContract: exchangeContractAddress,\n      name: 'ZeroEx',\n      version: '1.0.0',\n    };\n    const types = {\n      [ERC721ORDER_STRUCT_NAME]: ERC721ORDER_STRUCT_ABI,\n      Fee: FEE_ABI,\n      Property: PROPERTY_ABI,\n    };\n    const value = order;\n\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\n      domain,\n      types,\n      value\n    );\n\n    return rawSignatureFromEoaWallet;\n  }\n\n  warning(!order, 'Unknown order type');\n  throw new Error(`Unknown order type`);\n};\n\n/**\n *\n * @param walletAddress Owner of the asset\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param provider\n * @returns\n */\nexport const getApprovalStatus = async (\n  walletAddress: string,\n  exchangeProxyAddressForAsset: string,\n  asset: SwappableAssetV4,\n  provider: BaseProvider\n): Promise<ApprovalStatus> => {\n  switch (asset.type) {\n    case 'ERC20':\n      // ETH (ERC20 representation) requires no approvals, we can shortcut here\n      if (asset.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\n        return {\n          contractApproved: true,\n        };\n      }\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\n        MAX_APPROVAL.toString()\n      ).sub('100000000000000000');\n      const approvedForMax = erc20AllowanceBigNumber.gte(\n        MAX_APPROVAL_WITH_BUFFER\n      );\n      return {\n        contractApproved: approvedForMax,\n      };\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\n        asset.tokenId\n      );\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\n        await Promise.all([\n          erc721ApprovalForAllPromise,\n          erc721ApprovedAddressForIdPromise,\n        ]);\n      const tokenIdApproved =\n        erc721ApprovedAddressForId.toLowerCase() ===\n        exchangeProxyAddressForAsset.toLowerCase();\n      return {\n        contractApproved: erc721ApprovalForAll ?? false,\n        tokenIdApproved: tokenIdApproved,\n      };\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\n        walletAddress,\n        exchangeProxyAddressForAsset\n      );\n      return {\n        contractApproved: erc1155ApprovalForAll ?? false,\n      };\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Some arbitrarily high number.\n// TODO(johnrjj) - Support custom ERC20 approval amounts\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\n\n/**\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\n * @param asset\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\n * @param approve Optional, can specify to unapprove asset when set to false\n * @returns\n */\nexport const approveAsset = async (\n  exchangeProxyAddressForAsset: string,\n  asset: SwappableAssetV4,\n  signer: Signer,\n  txOverrides: Partial<TransactionOverrides> = {},\n  approvalOrderrides?: Partial<ApprovalOverrides>\n): Promise<ContractTransaction> => {\n  const approve = approvalOrderrides?.approve ?? true;\n\n  switch (asset.type) {\n    case 'ERC20':\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\n      const erc20ApprovalTxPromise = erc20.approve(\n        exchangeProxyAddressForAsset,\n        approve ? MAX_APPROVAL.toString() : 0,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc20ApprovalTxPromise;\n    case 'ERC721':\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\n      // If consumer prefers only to approve the tokenId, only approve tokenId\n      if (approvalOrderrides?.approvalOnlyTokenIdIfErc721) {\n        const erc721ApprovalForOnlyTokenId = erc721.approve(\n          exchangeProxyAddressForAsset,\n          asset.tokenId,\n          {\n            ...txOverrides,\n          }\n        );\n        return erc721ApprovalForOnlyTokenId;\n      }\n      // Otherwise default to approving entire contract\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc721ApprovalForAllPromise;\n    case 'ERC1155':\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\n      // ERC1155s can only approval all\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\n        exchangeProxyAddressForAsset,\n        approve,\n        {\n          ...txOverrides,\n        }\n      );\n      return erc1155ApprovalForAll;\n    default:\n      throw new UnexpectedAssetTypeError((asset as any).type);\n  }\n};\n\n// Parse a hex signature returned by an RPC call into an `ECSignature`.\nexport function parseRawSignature(rawSignature: string): ECSignature {\n  const hexSize = hexDataLength(rawSignature);\n  // if (hexUtils.size(rpcSig) !== 65) {\n  //     throw new Error(`Invalid RPC signature length: \"${rpcSig}\"`);\n  // }\n  if (hexSize !== 65) {\n    throw new Error(\n      `Invalid signature length, expected 65, got ${hexSize}.\\n\"Raw signature: ${rawSignature}\"`\n    );\n  }\n  // Some providers encode V as 0,1 instead of 27,28.\n  const VALID_V_VALUES = [0, 1, 27, 28];\n  // Some providers return the signature packed as V,R,S and others R,S,V.\n  // Try to guess which encoding it is (with a slight preference for R,S,V).\n  // let v = parseInt(rpcSig.slice(-2), 16);\n  let v = parseInt(rawSignature.slice(-2), 16);\n\n  if (VALID_V_VALUES.includes(v)) {\n    // Format is R,S,V\n    v = v >= 27 ? v : v + 27;\n    return {\n      // r: hexDataSlice.slice(rpcSig, 0, 32),\n      // s: hexUtils.slice(rpcSig, 32, 64),\n      r: hexDataSlice(rawSignature, 0, 32),\n      s: hexDataSlice(rawSignature, 32, 64),\n      v,\n    };\n  }\n  // Format should be V,R,S\n  // v = parseInt(rpcSig.slice(2, 4), 16);\n  v = parseInt(rawSignature.slice(2, 4), 16);\n  if (!VALID_V_VALUES.includes(v)) {\n    throw new Error(\n      `Cannot determine RPC signature layout from V value: \"${rawSignature}\"`\n    );\n  }\n  v = v >= 27 ? v : v + 27;\n  return {\n    v,\n    r: hexDataSlice(rawSignature, 1, 33),\n    s: hexDataSlice(rawSignature, 33, 65),\n  };\n}\n\nexport const INFINITE_EXPIRATION_TIMESTAMP_SEC = BigNumber.from(2524604400);\n\nexport const generateErc721Order = (\n  nft: UserFacingERC721AssetDataSerializedV4,\n  erc20: UserFacingERC20AssetDataSerializedV4,\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\n): ERC721OrderStructSerialized => {\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\n  if (orderData.expiry) {\n    // If number or string is provided, assume given as unix timestamp\n    if (\n      typeof orderData.expiry === 'number' ||\n      typeof orderData.expiry === 'string'\n    ) {\n      expiry = orderData.expiry.toString();\n    } else {\n      // If date is provided, convert to unix timestamp\n      expiry = getUnixTime(orderData.expiry).toString();\n    }\n  }\n  const erc721Order: ERC721OrderStructSerialized = {\n    erc721Token: nft.tokenAddress.toLowerCase(),\n    erc721TokenId: nft.tokenId,\n    direction: parseInt(orderData.direction.toString()), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\n    erc20Token: erc20.tokenAddress.toLowerCase(),\n    erc20TokenAmount: erc20.amount,\n    maker: orderData.maker.toLowerCase(),\n    // Defaults not required...\n    erc721TokenProperties:\n      orderData.tokenProperties?.map((property) => ({\n        propertyData: property.propertyData,\n        propertyValidator: property.propertyValidator,\n      })) ?? [],\n    fees:\n      orderData.fees?.map((x) => {\n        return {\n          amount: x.amount.toString(),\n          recipient: x.recipient.toLowerCase(),\n          feeData: x.feeData?.toString() ?? '0x',\n        };\n      }) ?? [],\n    expiry: expiry,\n    nonce:\n      orderData.nonce?.toString() ??\n      generateRandomV4OrderNonce(orderData.appId),\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\n  };\n\n  return erc721Order;\n};\n\nexport const generateErc1155Order = (\n  nft: UserFacingERC1155AssetDataSerializedV4,\n  erc20: UserFacingERC20AssetDataSerializedV4,\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\n): ERC1155OrderStructSerialized => {\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\n  if (orderData.expiry) {\n    // If number or string is provided, assume given as unix timestamp\n    if (\n      typeof orderData.expiry === 'number' ||\n      typeof orderData.expiry === 'string'\n    ) {\n      expiry = orderData.expiry.toString();\n    } else {\n      // If date is provided, convert to unix timestamp\n      expiry = getUnixTime(orderData.expiry).toString();\n    }\n  }\n  const erc1155Order: ERC1155OrderStructSerialized = {\n    erc1155Token: nft.tokenAddress.toLowerCase(),\n    erc1155TokenId: nft.tokenId,\n    erc1155TokenAmount: nft.amount ?? '1',\n    direction: parseInt(orderData.direction.toString(10)), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\n    erc20Token: erc20.tokenAddress.toLowerCase(),\n    erc20TokenAmount: erc20.amount,\n    maker: orderData.maker.toLowerCase(),\n    // Defaults not required...\n    erc1155TokenProperties:\n      orderData.tokenProperties?.map((property) => ({\n        propertyData: property.propertyData.toString(),\n        propertyValidator: property.propertyValidator,\n      })) ?? [],\n    fees:\n      orderData.fees?.map((fee) => {\n        return {\n          amount: fee.amount.toString(),\n          recipient: fee.recipient.toLowerCase(),\n          feeData: fee.feeData?.toString() ?? '0x',\n        };\n      }) ?? [],\n    expiry: expiry,\n    nonce:\n      orderData.nonce?.toString() ??\n      generateRandomV4OrderNonce(orderData.appId),\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\n  };\n\n  return erc1155Order;\n};\n\n// Number of digits in base 10 128bit nonce\n// floor(log_10(2^128 - 1)) + 1\nexport const ONE_TWENTY_EIGHT_BIT_LENGTH = 39;\n\n// Max nonce digit length in base 10\n// floor(log_10(2^256 - 1)) + 1\nexport const TWO_FIFTY_SIX_BIT_LENGTH = 78;\n\nconst checkIfStringContainsOnlyNumbers = (val: string) => {\n  const onlyNumbers = /^\\d+$/.test(val);\n  return onlyNumbers;\n};\n\nexport const RESERVED_APP_ID_PREFIX = '1001';\nconst RESERVED_APP_ID_PREFIX_DIGITS = RESERVED_APP_ID_PREFIX.length;\n\nexport const DEFAULT_APP_ID = '314159';\n\nexport const verifyAppIdOrThrow = (appId: string) => {\n  const isCorrectLength =\n    appId.length <= ONE_TWENTY_EIGHT_BIT_LENGTH - RESERVED_APP_ID_PREFIX_DIGITS;\n  const hasOnlyNumbers = checkIfStringContainsOnlyNumbers(appId);\n  invariant(isCorrectLength, 'appId must be 39 digits or less');\n  invariant(\n    hasOnlyNumbers,\n    'appId must be numeric only (no alpha or special characters, only numbers)'\n  );\n};\n\n/**\n * Generates a 256bit nonce.\n * The format:\n *   First 128bits:  ${SDK_PREFIX}${APP_ID}000000 (right padded zeroes to fill)\n *   Second 128bits: ${RANDOM_GENERATED_128BIT_ORDER_HASH}\n * @returns 128bit nonce as string (0x orders can handle up to 256 bit nonce)\n */\nexport const generateRandomV4OrderNonce = (\n  appId: string = DEFAULT_APP_ID\n): string => {\n  if (appId) {\n    verifyAppIdOrThrow(appId);\n  }\n  const order128 = padStart(\n    generateRandom128BitNumber(),\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\n    '0'\n  );\n  const appId128 = padEnd(\n    `${RESERVED_APP_ID_PREFIX}${appId}`,\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\n    '0'\n  );\n  const final256BitNonce = `${appId128}${order128}`;\n  invariant(\n    final256BitNonce.length <= TWO_FIFTY_SIX_BIT_LENGTH,\n    'Invalid nonce size'\n  );\n  return final256BitNonce;\n};\n\n// uuids are 128bits\nexport const generateRandom128BitNumber = (base = 10): string => {\n  const hex = '0x' + v4().replace(/-/g, '');\n  const value = BigInt(hex);\n  const valueBase10String = value.toString(base); // don't convert this to a number, will lose precision\n  return valueBase10String;\n};\n\nexport const serializeNftOrder = (\n  signedOrder: SignedNftOrderV4\n): SignedNftOrderV4Serialized => {\n  if ('erc721Token' in signedOrder) {\n    return {\n      ...signedOrder,\n      direction: parseInt(signedOrder.direction.toString()),\n      expiry: signedOrder.expiry.toString(),\n      nonce: signedOrder.nonce.toString(),\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\n      fees: signedOrder.fees.map((fee) => ({\n        ...fee,\n        amount: fee.amount.toString(),\n        feeData: fee.feeData.toString(),\n      })),\n      erc721TokenId: signedOrder.erc721TokenId.toString(),\n    };\n  } else if ('erc1155Token' in signedOrder) {\n    return {\n      ...signedOrder,\n      direction: parseInt(signedOrder.direction.toString()),\n      expiry: signedOrder.expiry.toString(),\n      nonce: signedOrder.nonce.toString(),\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\n      fees: signedOrder.fees.map((fee) => ({\n        ...fee,\n        amount: fee.amount.toString(),\n        feeData: fee.feeData.toString(),\n      })),\n      erc1155TokenAmount: signedOrder.erc1155TokenAmount.toString(),\n      erc1155TokenId: signedOrder.erc1155TokenId.toString(),\n    };\n  } else {\n    console.log(\n      'unknown order format type (not erc721 and not erc1155',\n      signedOrder\n    );\n    throw new Error('Unknown asset type');\n  }\n};\n","export enum TradeDirection {\n  /**\n   * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\n   */\n  SellNFT = 0,\n  /**\n   * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\n   */\n  BuyNFT = 1,\n}\n\nexport enum OrderStatusV4 {\n  Invalid = 0,\n  Fillable = 1,\n  Unfillable = 2,\n  Expired = 3,\n}\n\nexport type DirectionMap = {\n  [key in TradeDirection]: 'buy' | 'sell' | undefined;\n};\n\n/**\n * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\n * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\n */\nexport const DIRECTION_MAPPING: DirectionMap = {\n  [TradeDirection.BuyNFT]: 'buy',\n  [TradeDirection.SellNFT]: 'sell',\n};\n","export const ERC721_TRANSFER_FROM_DATA = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC721Token',\n            name: 'erc721Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc721TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc721TokenProperties',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC721Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n    ],\n    name: 'safeTransferFromErc721Data',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport const ERC1155_TRANSFER_FROM_DATA = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'enum LibNFTOrder.TradeDirection',\n            name: 'direction',\n            type: 'uint8',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'expiry',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256',\n          },\n          {\n            internalType: 'contract IERC20TokenV06',\n            name: 'erc20Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc20TokenAmount',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n              },\n              {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n              },\n              {\n                internalType: 'bytes',\n                name: 'feeData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Fee[]',\n            name: 'fees',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IERC1155Token',\n            name: 'erc1155Token',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'erc1155TokenId',\n            type: 'uint256',\n          },\n          {\n            components: [\n              {\n                internalType: 'contract IPropertyValidator',\n                name: 'propertyValidator',\n                type: 'address',\n              },\n              {\n                internalType: 'bytes',\n                name: 'propertyData',\n                type: 'bytes',\n              },\n            ],\n            internalType: 'struct LibNFTOrder.Property[]',\n            name: 'erc1155TokenProperties',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint128',\n            name: 'erc1155TokenAmount',\n            type: 'uint128',\n          },\n        ],\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\n        name: 'sellOrders',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            internalType: 'enum LibSignature.SignatureType',\n            name: 'signatureType',\n            type: 'uint8',\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32',\n          },\n        ],\n        internalType: 'struct LibSignature.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n      {\n        name: 'unwrapNativeToken',\n        type: 'bool',\n      },\n    ],\n    name: 'safeTransferFromErc1155Data',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","import unfetch from 'isomorphic-unfetch';\nimport { stringify } from 'query-string';\nimport type { SignedNftOrderV4, SignedNftOrderV4Serialized } from './types';\nimport { serializeNftOrder } from './pure';\n\nexport const ORDERBOOK_API_ROOT_URL_PRODUCTION = 'https://api.trader.xyz';\n\nexport interface OrderbookRequestOptions {\n  rootUrl: string;\n}\n\nexport interface PostOrderRequestPayload {\n  order: SignedNftOrderV4Serialized;\n  chainId: string;\n  metadata?: Record<string, string>;\n}\n\nexport interface PostOrderResponsePayload {\n  erc20Token: string;\n  erc20TokenAmount: string;\n  nftToken: string;\n  nftTokenId: string;\n  nftTokenAmount: string;\n  nftType: string;\n  sellOrBuyNft: 'buy' | 'sell';\n  chainId: string;\n  order: SignedNftOrderV4Serialized;\n  metadata: Record<string, string> | null;\n}\n\nexport interface SearchOrdersResponsePayload {\n  orders: Array<PostOrderResponsePayload>;\n}\n\nconst postOrderToOrderbook = async (\n  signedOrder: SignedNftOrderV4,\n  chainId: string | number,\n  metadata: Record<string, string> = {},\n  requestOptions?: Partial<OrderbookRequestOptions>,\n  fetchFn: typeof unfetch = unfetch\n): Promise<PostOrderResponsePayload> => {\n  const payload: PostOrderRequestPayload = {\n    order: serializeNftOrder(signedOrder),\n    chainId: chainId.toString(10),\n    metadata,\n  };\n\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n  const orderPostResult: PostOrderResponsePayload = await fetchFn(\n    `${rootUrl}/orderbook/order`,\n    {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    }\n  )\n    .then(async (res) => {\n      if (!res.ok) {\n        throw await res.json();\n      }\n      if (res.status >= 300) {\n        throw await res.json();\n      }\n      return res.json();\n    })\n    .catch((err) => {\n      // err is not a promise\n      throw err;\n    });\n\n  return orderPostResult;\n};\n\n/**\n * Available query parameters for searching the orderbook\n */\nexport interface SearchOrdersParams {\n  nftTokenId: string | string[];\n  erc20Token: string | string[];\n  nftToken: string | string[];\n  nftType: 'ERC721' | 'ERC1155';\n  chainId: string | number | string[] | number[];\n  maker: string;\n  taker: string;\n  nonce: string | string[];\n  offset: string | number;\n  limit: string | number;\n  sellOrBuyNft: 'sell' | 'buy';\n  direction: '0' | '1';\n  // Defaults to only 'open' orders\n  status: 'open' | 'filled' | 'expired' | 'cancelled' | 'all';\n  visibility: 'public' | 'private';\n  valid: 'valid' | 'all';\n}\n\n/**\n * Search through the public hosted orderbook\n * @param filters Optional query param filters\n * @param requestOptions Fetch options/overrides\n * @param fetchFn Optional fetch function override. Uses unfetch by default.\n * @returns\n */\nconst searchOrderbook = async (\n  filters?: Partial<SearchOrdersParams>,\n  requestOptions?: Partial<OrderbookRequestOptions>,\n  fetchFn: typeof unfetch = unfetch\n): Promise<SearchOrdersResponsePayload> => {\n  // https://github.com/sindresorhus/query-string#arrayformat\n  const stringifiedQueryParams = stringify(filters ?? {}, {\n    arrayFormat: 'none',\n  });\n\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n  const findOrdersResult = await fetchFn(\n    `${rootUrl}/orderbook/orders?${stringifiedQueryParams}`\n  )\n    .then(async (res) => {\n      if (!res.ok) {\n        throw await res.json();\n      }\n      if (res.status >= 300) {\n        throw await res.json();\n      }\n      return res.json();\n    })\n    .catch((err) => {\n      // err is not a promise\n      throw err;\n    });\n\n  return findOrdersResult;\n};\n\nexport { postOrderToOrderbook, searchOrderbook };\n","import type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport type {\n  BaseProvider,\n  TransactionReceipt,\n} from '@ethersproject/providers';\nimport { BigNumber, BigNumberish, ContractTransaction } from 'ethers';\nimport { Interface } from '@ethersproject/abi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport {\n  ERC1155__factory,\n  ERC721__factory,\n  ERC20__factory,\n  IZeroEx,\n  IZeroEx__factory,\n} from '../../contracts';\nimport type {\n  ApprovalStatus,\n  BaseNftSwap,\n  PayableOverrides,\n  TransactionOverrides,\n} from '../common/types';\nimport { UnexpectedAssetTypeError } from '../error';\nimport {\n  approveAsset,\n  DEFAULT_APP_ID,\n  generateErc1155Order,\n  generateErc721Order,\n  getApprovalStatus,\n  parseRawSignature,\n  signOrderWithEoaWallet,\n  verifyAppIdOrThrow,\n} from './pure';\nimport type {\n  AddressesForChainV4,\n  ApprovalOverrides,\n  ERC721OrderStruct,\n  FillOrderOverrides,\n  NftOrderV4,\n  NftOrderV4Serialized,\n  OrderStructOptionsCommonStrict,\n  SignedERC1155OrderStruct,\n  SignedERC1155OrderStructSerialized,\n  SignedERC721OrderStruct,\n  SignedERC721OrderStructSerialized,\n  SignedNftOrderV4,\n  SigningOptionsV4,\n  SwappableAssetV4,\n  UserFacingERC1155AssetDataSerializedV4,\n  UserFacingERC20AssetDataSerializedV4,\n  UserFacingERC721AssetDataSerializedV4,\n} from './types';\nimport {\n  ERC1155_TRANSFER_FROM_DATA,\n  ERC721_TRANSFER_FROM_DATA,\n} from './nft-safe-transfer-from-data';\nimport addresses from './addresses.json';\nimport {\n  searchOrderbook,\n  postOrderToOrderbook,\n  PostOrderResponsePayload,\n  SearchOrdersParams,\n  ORDERBOOK_API_ROOT_URL_PRODUCTION,\n  SearchOrdersResponsePayload,\n} from './orderbook';\nimport { getWrappedNativeToken } from '../../utils/addresses';\nimport { DIRECTION_MAPPING, OrderStatusV4, TradeDirection } from './enums';\nimport { CONTRACT_ORDER_VALIDATOR } from './properties';\nimport { ETH_ADDRESS_AS_ERC20 } from './constants';\nimport { ZERO_AMOUNT } from '../../utils/eth';\nimport { arrayify } from '@ethersproject/bytes';\n\nexport enum SupportedChainIdsV4 {\n  Mainnet = 1,\n  Ropsten = 3,\n  Goerli = 5,\n  Ubiq = 8,\n  Ganache = 1337,\n  Polygon = 137,\n  PolygonMumbai = 80001,\n  BSC = 56,\n  Optimism = 10,\n  Fantom = 250,\n  Celo = 42220,\n  Avalance = 43114,\n  // Arbitrum = 42161, // soon\n}\n\nexport const SupportedChainsForV4OrderbookStatusMonitoring = [\n  SupportedChainIdsV4.Polygon,\n  SupportedChainIdsV4.PolygonMumbai,\n  SupportedChainIdsV4.Mainnet,\n  SupportedChainIdsV4.Optimism,\n  SupportedChainIdsV4.Goerli,\n];\n\nexport interface INftSwapV4 extends BaseNftSwap {\n  signOrder: (\n    order: NftOrderV4,\n    signerAddress: string,\n    signer: Signer,\n    signingOptions?: Partial<SigningOptionsV4>\n  ) => Promise<SignedNftOrderV4>;\n  buildNftAndErc20Order: (\n    nft:\n      | UserFacingERC721AssetDataSerializedV4\n      | UserFacingERC1155AssetDataSerializedV4,\n    erc20: UserFacingERC20AssetDataSerializedV4,\n    sellOrBuyNft: 'sell' | 'buy',\n    makerAddress: string,\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\n  ) => NftOrderV4Serialized;\n  loadApprovalStatus: (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalOverrides?: Partial<ApprovalOverrides>\n  ) => Promise<ApprovalStatus>;\n  approveTokenOrNftByAsset: (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    approvalOverrides?: Partial<ApprovalOverrides>\n  ) => Promise<ContractTransaction>;\n  fillSignedOrder: (\n    signedOrder: SignedNftOrderV4,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => Promise<ContractTransaction>;\n  awaitTransactionHash: (txHash: string) => Promise<TransactionReceipt>;\n  cancelOrder: (\n    nonce: BigNumberish,\n    orderType: 'ERC721' | 'ERC1155' // Can we make this optional\n  ) => Promise<ContractTransaction>;\n  matchOrders: (\n    sellOrder: SignedNftOrderV4,\n    buyOrder: SignedNftOrderV4,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => Promise<ContractTransaction>;\n  // waitUntilOrderFilledOrCancelled: (\n  //   order: NftOrderV4,\n  //   timeoutInMs?: number,\n  //   pollOrderStatusFrequencyInMs?: number,\n  //   throwIfStatusOtherThanFillableOrFilled?: boolean\n  // ) => Promise<OrderStatus | null>;\n  getOrderStatus: (order: NftOrderV4) => Promise<OrderStatusV4>;\n  // getOrderHash: (order: NftOrderV4) => string;\n  // getTypedData: (\n  //   chainId: number,\n  //   exchangeContractAddress: string,\n  //   order: NftOrderV4\n  // ) => TypedData;\n  // normalizeSignedOrder: (order: SignedNftOrderV4) => SignedNftOrderV4;\n  // normalizeOrder: (order: NftOrderV4) => NftOrderV4;\n  // verifyOrderSignature: (\n  //   order: NftOrderV4,\n  //   signature: string,\n  //   chainId: number,\n  //   exchangeContractAddress: string\n  // ) => boolean;\n  // checkIfOrderCanBeFilledWithNativeToken: (order: NftOrderV4) => boolean;\n  // getAssetsFromOrder: (order: NftOrderV4) => {\n  //   makerAssets: SwappableAsset[];\n  //   takerAssets: SwappableAsset[];\n  // };\n}\n\nexport interface AdditionalSdkConfig {\n  // Identify your app fills with distinct integer\n  appId: string;\n  // Custom zeroex proxy contract address (defaults to the canonical contracts deployed by 0x Labs core team)\n  zeroExExchangeProxyContractAddress: string;\n  // Custom orderbook url. Defaults to using Trader.xyz's multi-chain open orderbook\n  orderbookRootUrl: string;\n}\n\nclass NftSwapV4 implements INftSwapV4 {\n  // RPC provider\n  public provider: BaseProvider;\n  // Wallet signer\n  public signer: Signer | undefined;\n  // Chain Id for this instance of NftSwapV4.\n  // To switch chains, instantiate a new version of NftSWapV4 with the updated chain id.\n  public chainId: number;\n\n  // ZeroEx ExchangeProxy contract address to reference\n  public exchangeProxyContractAddress: string;\n  // Generated ZeroEx ExchangeProxy contracts\n  public exchangeProxy: IZeroEx;\n\n  // Unique identifier for app. Must be a positive integer between 1 and 2**128\n  public appId: string;\n\n  // Orderbook URL\n  public orderbookRootUrl: string;\n\n  constructor(\n    provider: BaseProvider,\n    signer: Signer,\n    chainId?: number | string,\n    additionalConfig?: Partial<AdditionalSdkConfig>\n  ) {\n    this.provider = provider;\n    this.signer = signer;\n    this.chainId = chainId\n      ? parseInt(chainId.toString(10), 10)\n      : (this.provider._network.chainId as SupportedChainIdsV4);\n\n    const defaultAddressesForChain: AddressesForChainV4 | undefined =\n      addresses[this.chainId as SupportedChainIdsV4];\n\n    const zeroExExchangeContractAddress =\n      additionalConfig?.zeroExExchangeProxyContractAddress ??\n      defaultAddressesForChain?.exchange;\n\n    invariant(\n      zeroExExchangeContractAddress,\n      '0x V4 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\n    );\n\n    this.exchangeProxyContractAddress = zeroExExchangeContractAddress;\n\n    this.orderbookRootUrl =\n      additionalConfig?.orderbookRootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\n\n    this.appId = additionalConfig?.appId ?? DEFAULT_APP_ID;\n    verifyAppIdOrThrow(this.appId);\n\n    this.exchangeProxy = IZeroEx__factory.connect(\n      zeroExExchangeContractAddress,\n      signer ?? provider\n    );\n  }\n\n  /**\n   * Checks if an asset is approved for trading with 0x v4\n   * If an asset is not approved, call approveTokenOrNftByAsset to approve.\n   * @param asset A tradeable asset (ERC20, ERC721, or ERC1155)\n   * @param walletAddress The wallet address that owns the asset\n   * @param approvalOverrides Optional config options for approving\n   * @returns\n   */\n  loadApprovalStatus = (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    approvalOverrides?: Partial<ApprovalOverrides> | undefined\n  ): Promise<ApprovalStatus> => {\n    // TODO(johnrjj) - Fix to pass thru more args...\n    return getApprovalStatus(\n      walletAddress,\n      approvalOverrides?.exchangeContractAddress ?? this.exchangeProxy.address,\n      asset,\n      this.provider\n    );\n  };\n\n  /**\n   * Convenience function to await a transaction hash.\n   * During a fill order call, you can get the pending transaction hash and await it manually via this method.\n   * @param txHash Transaction hash to await\n   * @returns\n   */\n  awaitTransactionHash = async (txHash: string) => {\n    return this.provider.waitForTransaction(txHash);\n  };\n\n  /**\n   * Cancels an 0x v4 order. Once cancelled, the order no longer fillable.\n   * Requires a signer\n   * @param nonce\n   * @param orderType\n   * @returns Transaciton Receipt\n   */\n  cancelOrder = (\n    nonce: BigNumberish,\n    orderType: 'ERC721' | 'ERC1155'\n  ): Promise<ContractTransaction> => {\n    if (orderType === 'ERC721') {\n      return this.exchangeProxy.cancelERC721Order(nonce);\n    }\n    if (orderType === 'ERC1155') {\n      return this.exchangeProxy.cancelERC1155Order(nonce);\n    }\n    console.log('unsupported order', orderType);\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Batch fill NFT sell orders\n   * Can be used by taker to fill multiple NFT sell orders atomically.\n   * E.g. A taker has a shopping cart full of NFTs to buy, can call this method to fill them all.\n   * Requires a valid signer to execute transaction\n   * @param signedOrders Signed 0x NFT sell orders\n   * @param revertIfIncomplete Revert if we don't fill _all_ orders (defaults to false)\n   * @param transactionOverrides Ethers transaciton overrides\n   * @returns\n   */\n  batchBuyNfts = (\n    signedOrders: Array<SignedNftOrderV4>,\n    revertIfIncomplete: boolean = false,\n    transactionOverrides?: PayableOverrides\n  ) => {\n    const allSellOrders = signedOrders.every((signedOrder) => {\n      if (signedOrder.direction === 0) {\n        return true;\n      }\n      return false;\n    });\n\n    invariant(\n      allSellOrders,\n      `batchBuyNfts: All orders must be of type sell order (order direction == 0)`\n    );\n\n    const allErc721 = signedOrders.every((signedOrder) => {\n      if ('erc721Token' in signedOrder) {\n        return true;\n      }\n      return false;\n    });\n\n    const allErc1155 = signedOrders.every((signedOrder) => {\n      if ('erc1155Token' in signedOrder) {\n        return true;\n      }\n      return false;\n    });\n\n    const eitherAllErc721OrErc1155Orders = allErc721 || allErc1155;\n\n    invariant(\n      eitherAllErc721OrErc1155Orders,\n      `Batch buy is only available for tokens of the same ERC type.`\n    );\n\n    if (allErc721) {\n      const erc721SignedOrders: SignedERC721OrderStruct[] =\n        signedOrders as SignedERC721OrderStruct[];\n      return this.exchangeProxy.batchBuyERC721s(\n        erc721SignedOrders,\n        erc721SignedOrders.map((so) => so.signature),\n        erc721SignedOrders.map((_) => '0x'),\n        revertIfIncomplete,\n        {\n          ...transactionOverrides,\n        }\n      );\n    } else if (allErc1155) {\n      const erc1155SignedOrders: SignedERC1155OrderStruct[] =\n        signedOrders as SignedERC1155OrderStruct[];\n      return this.exchangeProxy.batchBuyERC1155s(\n        erc1155SignedOrders,\n        erc1155SignedOrders.map((so) => so.signature),\n        erc1155SignedOrders.map((so) => so.erc1155TokenAmount),\n        erc1155SignedOrders.map((_) => '0x'),\n        revertIfIncomplete,\n        {\n          ...transactionOverrides,\n        }\n      );\n    } else {\n      throw Error('batchBuyNfts: Incompatible state');\n    }\n  };\n\n  /**\n   * Derives order hash from order (currently requires a provider to derive)\n   * @param order A 0x v4 order (signed or unsigned)\n   * @returns Order hash\n   */\n  getOrderHash = (order: NftOrderV4Serialized): Promise<string> => {\n    if ('erc721Token' in order) {\n      return this.exchangeProxy.getERC721OrderHash(order);\n    }\n    if ('erc1155Token' in order) {\n      return this.exchangeProxy.getERC1155OrderHash(order);\n    }\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Looks up the order status for a given 0x v4 order.\n   * (Available states for an order are 'filled', 'expired', )\n   * @param order An 0x v4 NFT order\n   * @returns A number the corresponds to the enum OrderStatusV4\n   * Valid order states:\n   * Invalid = 0\n   * Fillable = 1,\n   * Unfillable = 2,\n   * Expired = 3,\n   */\n  getOrderStatus = async (order: NftOrderV4): Promise<number> => {\n    if ('erc721Token' in order) {\n      const erc721OrderStatus = await this.exchangeProxy.getERC721OrderStatus(\n        order\n      );\n      return erc721OrderStatus;\n    }\n    if ('erc1155Token' in order) {\n      const [\n        _erc1155OrderHash,\n        erc1155OrderStatus,\n        _erc1155OrderAmount,\n        _erc1155OrderAmountReminaing,\n      ] = await this.exchangeProxy.getERC1155OrderInfo(order);\n      return erc1155OrderStatus;\n    }\n    console.log('unsupported order', order);\n    throw new Error('unsupport order');\n  };\n\n  /**\n   * Convenience function to approve an asset (ERC20, ERC721, or ERC1155) for trading with 0x v4\n   * @param asset\n   * @param _walletAddress\n   * @param approvalTransactionOverrides\n   * @param otherOverrides\n   * @returns An ethers contract transaction\n   */\n  approveTokenOrNftByAsset = (\n    asset: SwappableAssetV4,\n    _walletAddress: string, // Remove in next release\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\n    otherOverrides?: Partial<ApprovalOverrides>\n  ): Promise<ContractTransaction> => {\n    const signedToUse = otherOverrides?.signer ?? this.signer;\n    if (!signedToUse) {\n      throw new Error('Signed not defined');\n    }\n    return approveAsset(\n      this.exchangeProxy.address,\n      asset,\n      signedToUse,\n      {\n        ...approvalTransactionOverrides,\n      },\n      otherOverrides\n    );\n  };\n\n  // // TyPeSaFeTy: Order types supported:\n  // // ERC721<>ERC20\n  // // ERC1155<>ERC20\n  // // Below ensures type-safe for those specific combinations\n  /**\n   * Builds a 0x order given two assets (either NFT<>ERC20 or ERC20<>NFT)\n   * @param makerAsset An asset (ERC20, ERC721, or ERC1155) the user has\n   * @param takerAsset An asset (ERC20, ERC721, or ERC1155) the user wants\n   * @param makerAddress The address of the wallet creating the order\n   * @param orderConfig Various order configuration options (e.g. expiration, nonce)\n   */\n  buildOrder(\n    makerAsset: UserFacingERC1155AssetDataSerializedV4,\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\n    takerAsset: UserFacingERC1155AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC721AssetDataSerializedV4,\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\n    takerAsset: UserFacingERC721AssetDataSerializedV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized;\n  buildOrder(\n    makerAsset: SwappableAssetV4,\n    takerAsset: SwappableAssetV4,\n    makerAddress: string,\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\n  ) {\n    // Basic validation checks\n    if (\n      (takerAsset.type === 'ERC1155' || takerAsset.type === 'ERC721') &&\n      (makerAsset.type === 'ERC1155' || makerAsset.type === 'ERC721')\n    ) {\n      throw new Error(\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\n      );\n    }\n    if (makerAsset.type === 'ERC20' && takerAsset.type === 'ERC20') {\n      throw new Error(\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\n      );\n    }\n\n    // First determine if the maker or taker is trading the erc20 (to orient the direction of the trade)\n    let direction: TradeDirection = TradeDirection.SellNFT;\n    if (takerAsset.type === 'ERC20') {\n      // NFT is on the maker side (so the maker is selling the NFT)\n      direction = TradeDirection.SellNFT;\n    }\n    if (makerAsset.type === 'ERC20') {\n      // NFT is on the taker side (so the maker is buying the NFT)\n      direction = TradeDirection.BuyNFT;\n    }\n\n    const nft = (\n      direction === TradeDirection.BuyNFT ? takerAsset : makerAsset\n    ) as SwappableAssetV4;\n    const erc20 = (\n      direction === TradeDirection.BuyNFT ? makerAsset : takerAsset\n    ) as UserFacingERC20AssetDataSerializedV4;\n\n    return this.buildNftAndErc20Order(\n      nft,\n      erc20,\n      DIRECTION_MAPPING[direction],\n      makerAddress,\n      orderConfig\n    );\n  }\n\n  getWrappedTokenAddress = (chainId: number | string) => {\n    return getWrappedNativeToken(chainId);\n  };\n\n  buildCollectionBasedOrder = (\n    erc20ToSell: UserFacingERC20AssetDataSerializedV4,\n    nftCollectionToBid: {\n      tokenAddress: string;\n      type: 'ERC721' | 'ERC1155';\n    },\n    makerAddress: string\n  ): NftOrderV4Serialized => {\n    return this.buildNftAndErc20Order(\n      {\n        ...nftCollectionToBid,\n        // Override tokenId to zero, tokenId is ignored when using token properties\n        tokenId: '0',\n      },\n      erc20ToSell,\n      'buy',\n      makerAddress,\n      {\n        // Add the token property of 'collection', so this order will be valid for any nft in the collection\n        tokenProperties: [CONTRACT_ORDER_VALIDATOR],\n      }\n    );\n  };\n\n  buildNftAndErc20Order = (\n    nft: SwappableAssetV4,\n    erc20: UserFacingERC20AssetDataSerializedV4,\n    sellOrBuyNft: 'sell' | 'buy' = 'sell',\n    makerAddress: string,\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\n  ): NftOrderV4Serialized => {\n    const defaultConfig = {\n      chainId: this.chainId,\n      makerAddress: makerAddress,\n      appId: this.appId,\n    };\n    const config = { ...defaultConfig, ...userConfig };\n\n    const direction =\n      sellOrBuyNft === 'sell' ? TradeDirection.SellNFT : TradeDirection.BuyNFT;\n\n    // Validate that a bid does not use ETH.\n    if (direction === TradeDirection.BuyNFT) {\n      if (erc20.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\n        throw new Error(\n          'NFT Bids cannot use the native token (e.g. ETH). Please use the wrapped native token (e.g. WETH)'\n        );\n      }\n    }\n\n    switch (nft.type) {\n      // Build ERC721 order\n      case 'ERC721':\n        const erc721Order = generateErc721Order(nft, erc20, {\n          direction,\n          maker: makerAddress,\n          ...config,\n        });\n        return erc721Order;\n      // Build ERC1155 order\n      case 'ERC1155':\n        const erc1155Order = generateErc1155Order(nft, erc20, {\n          direction,\n          maker: makerAddress,\n          ...config,\n        });\n        return erc1155Order;\n      default:\n        throw new UnexpectedAssetTypeError((nft as any).type ?? 'Unknown');\n    }\n  };\n\n  /**\n   * Signs a 0x order. Requires a signer (e.g. wallet or private key)\n   * Once signed, the order becomes fillable (as long as the order is valid)\n   * 0x orders require a signature to fill.\n   * @param order A 0x v4 order\n   * @returns A signed 0x v4 order\n   */\n  signOrder = async (order: NftOrderV4): Promise<SignedNftOrderV4> => {\n    if (!this.signer) {\n      throw new Error('Signed not defined');\n    }\n\n    const rawSignature = await signOrderWithEoaWallet(\n      order,\n      this.signer as unknown as TypedDataSigner,\n      this.chainId,\n      this.exchangeProxy.address\n    );\n\n    const ecSignature = parseRawSignature(rawSignature);\n\n    const signedOrder = {\n      ...order,\n      signature: {\n        signatureType: 2,\n        r: ecSignature.r,\n        s: ecSignature.s,\n        v: ecSignature.v,\n      },\n    };\n    return signedOrder;\n  };\n\n  /**\n   * Fill a 'Buy NFT' order (e.g. taker would be selling'their NFT to fill this order) without needing an approval\n   * Use case: Users can accept offers/bids for their NFTs without needing to approve their NFT! 🤯\n   * @param signedOrder Signed Buy Nft order (e.g. direction = 1)\n   * @param tokenId NFT token id that taker of trade will sell\n   * @param fillOrderOverrides Trade specific (SDK-level) overrides\n   * @param transactionOverrides General transaction overrides from ethers (gasPrice, gasLimit, etc)\n   * @returns\n   */\n  fillBuyNftOrderWithoutApproval = async (\n    signedOrder: SignedNftOrderV4,\n    tokenId: string,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    if (!this.signer) {\n      throw new Error(\n        'Signer undefined. Signer must be provided to fill order'\n      );\n    }\n    if (signedOrder.direction !== TradeDirection.BuyNFT) {\n      throw new Error(\n        'Only filling Buy NFT orders (direction=1) is valid for skipping approvals'\n      );\n    }\n\n    const signerAddress = await this.signer.getAddress();\n    const unwrapWeth =\n      fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n      false;\n\n    // Handle ERC721\n    if ('erc721Token' in signedOrder) {\n      const erc721Contract = ERC721__factory.connect(\n        signedOrder.erc721Token,\n        this.signer\n      );\n\n      const encodingIface = new Interface(ERC721_TRANSFER_FROM_DATA);\n\n      const fragment = encodingIface.getFunction('safeTransferFromErc721Data');\n      const data = encodingIface._encodeParams(fragment.inputs, [\n        signedOrder,\n        signedOrder.signature,\n        unwrapWeth,\n      ]);\n\n      const transferFromTx = await erc721Contract[\n        'safeTransferFrom(address,address,uint256,bytes)'\n      ](\n        signerAddress,\n        this.exchangeProxy.address,\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\n        data,\n        transactionOverrides ?? {}\n      );\n      return transferFromTx;\n    }\n\n    // Handle ERC1155\n    if ('erc1155Token' in signedOrder) {\n      const erc1155Contract = ERC1155__factory.connect(\n        signedOrder.erc1155Token,\n        this.signer\n      );\n      const encodingIface = new Interface(ERC1155_TRANSFER_FROM_DATA);\n\n      const fragment = encodingIface.getFunction('safeTransferFromErc1155Data');\n      const data = encodingIface._encodeParams(fragment.inputs, [\n        signedOrder,\n        signedOrder.signature,\n        unwrapWeth,\n      ]);\n\n      const transferFromTx = await erc1155Contract.safeTransferFrom(\n        signerAddress,\n        this.exchangeProxy.address,\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\n        signedOrder.erc1155TokenAmount ?? '1',\n        data,\n        transactionOverrides ?? {}\n      );\n      return transferFromTx;\n    }\n\n    // Unknown format (NFT neither ERC721 or ERC1155)\n    throw new Error('unknown order type');\n  };\n\n  /**\n   * Fills a 'collection'-based order (e.g. a bid for any nft belonging to a particular collection)\n   * @param signedOrder A 0x signed collection order\n   * @param tokenId The token id to fill for the collection order\n   * @param fillOrderOverrides Various fill options\n   * @param transactionOverrides Ethers transaction overrides\n   * @returns\n   */\n  fillSignedCollectionOrder = async (\n    signedOrder: SignedNftOrderV4,\n    tokenId: BigNumberish,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    return this.fillSignedOrder(\n      signedOrder,\n      {\n        tokenIdToSellForCollectionOrder: tokenId,\n        ...fillOrderOverrides,\n      },\n      {\n        ...transactionOverrides,\n      }\n    );\n  };\n\n  isErc20NativeToken = (order: NftOrderV4): boolean => {\n    return order.erc20Token.toLowerCase() === ETH_ADDRESS_AS_ERC20;\n  };\n\n  /**\n   * Fills a signed order\n   * @param signedOrder A signed 0x v4 order\n   * @param fillOrderOverrides Optional configuration on possible ways to fill the order\n   * @param transactionOverrides Ethers transaction overrides (e.g. gas price)\n   * @returns\n   */\n  fillSignedOrder = async (\n    signedOrder: SignedNftOrderV4,\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    // Only Sell orders can be filled with ETH\n    const canOrderTypeBeFilledWithNativeToken =\n      signedOrder.direction === TradeDirection.SellNFT;\n    // Is ERC20 being traded the native token\n    const isNativeToken = this.isErc20NativeToken(signedOrder);\n    const needsEthAttached =\n      isNativeToken && canOrderTypeBeFilledWithNativeToken;\n    const erc20TotalAmount = this.getErc20TotalIncludingFees(signedOrder);\n\n    // do fill\n    if ('erc1155Token' in signedOrder) {\n      // If maker is selling an NFT, taker wants to 'buy' nft\n      if (signedOrder.direction === TradeDirection.SellNFT) {\n        return this.exchangeProxy.buyERC1155(\n          signedOrder,\n          signedOrder.signature,\n          signedOrder.erc1155TokenAmount,\n          '0x',\n          {\n            // If we're filling an order with ETH, be sure to include the value with fees added\n            value: needsEthAttached ? erc20TotalAmount : undefined,\n            ...transactionOverrides,\n          }\n        );\n      } else {\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\n        let unwrapNativeToken: boolean =\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n          false;\n\n        if (signedOrder.erc1155TokenProperties.length > 0) {\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\n          if (\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\n          ) {\n            throw new Error(\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\n            );\n          }\n        }\n\n        // Otherwise, taker is selling the nft (and buying an ERC20)\n        return this.exchangeProxy.sellERC1155(\n          signedOrder,\n          signedOrder.signature,\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\n            signedOrder.erc1155TokenId,\n          signedOrder.erc1155TokenAmount,\n          unwrapNativeToken,\n          '0x',\n          {\n            ...transactionOverrides,\n          }\n        );\n      }\n    } else if ('erc721Token' in signedOrder) {\n      // If maker is selling an NFT, taker wants to 'buy' nft\n      if (signedOrder.direction === TradeDirection.SellNFT) {\n        return this.exchangeProxy.buyERC721(\n          signedOrder,\n          signedOrder.signature,\n          '0x',\n          {\n            // If we're filling an order with ETH, be sure to include the value with fees added\n            value: needsEthAttached ? erc20TotalAmount : undefined,\n            ...transactionOverrides,\n          }\n        );\n      } else {\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\n        let unwrapNativeToken: boolean =\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\n          false;\n\n        if (signedOrder.erc721TokenProperties.length > 0) {\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\n          if (\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\n          ) {\n            throw new Error(\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\n            );\n          }\n        }\n\n        // Otherwise, taker is selling the nft (and buying an ERC20)\n        return this.exchangeProxy.sellERC721(\n          signedOrder,\n          signedOrder.signature,\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\n            signedOrder.erc721TokenId,\n          unwrapNativeToken,\n          '0x',\n          {\n            ...transactionOverrides,\n          }\n        );\n      }\n    }\n    console.log('unsupported order', signedOrder);\n    throw new Error('unsupport signedOrder type');\n  };\n\n  /**\n   * Posts a 0x order to the Trader.xyz NFT open orderbook\n   * @param signedOrder A valid 0x v4 signed order\n   * @param chainId The chain id (e.g. '1' for mainnet, or '137' for polygon mainnet)\n   * @param metadata An optional record object (key: string, value: string) that will be stored alongside the order in the orderbook\n   * This is helpful for webapp builders, as they can save app-level order metadata\n   * (e.g. maybe save a 'bidMessage' alongside the order, or extra image metadata)\n   * @returns\n   */\n  postOrder = (\n    signedOrder: SignedNftOrderV4,\n    chainId: string | number,\n    metadata?: Record<string, string>\n  ): Promise<PostOrderResponsePayload> => {\n    const parsedChainId = parseInt(chainId.toString(10), 10);\n    const supportsMonitoring =\n      SupportedChainsForV4OrderbookStatusMonitoring.includes(parsedChainId);\n    warning(\n      supportsMonitoring,\n      `Chain ${chainId} does not support live orderbook status monitoring. Orders can be posted to be persisted, but status wont be monitored (e.g. updating status on a fill, cancel, or expiry.)`\n    );\n    return postOrderToOrderbook(signedOrder, parsedChainId, metadata, {\n      rootUrl: this.orderbookRootUrl,\n    });\n  };\n\n  /**\n   * Gets orders from the Trader.xyz Open NFT Orderbook\n   * By default will find all order, active orders.\n   * @param filters Various options to filter an order search\n   * @returns An object that includes `orders` key with an array of orders that meet the search critera\n   */\n  getOrders = async (\n    filters?: Partial<SearchOrdersParams>\n  ): Promise<SearchOrdersResponsePayload> => {\n    const orders = await searchOrderbook(filters, {\n      rootUrl: this.orderbookRootUrl,\n    });\n    return orders;\n  };\n\n  /**\n   *\n   * @param sellOrder ERC721 Order to sell an NFT\n   * @param buyOrder ERC721 Order to buy an NFT\n   * @param transactionOverrides Ethers transaction overrides\n   * @returns\n   */\n  matchOrders = async (\n    // NOTE(johnrjj)- Should these types be SignedERC721OrderStruct directly since only 712 is supported for matching\n    sellOrder: SignedNftOrderV4,\n    buyOrder: SignedNftOrderV4,\n    transactionOverrides?: Partial<PayableOverrides>\n  ) => {\n    if ('erc721Token' in sellOrder && 'erc721Token' in buyOrder) {\n      // TODO(johnrjj) - More validation here before we match on-chain\n      const contractTx = await this.exchangeProxy.matchERC721Orders(\n        sellOrder,\n        buyOrder,\n        sellOrder.signature,\n        buyOrder.signature,\n        transactionOverrides ?? {}\n      );\n      return contractTx;\n    }\n\n    throw new Error(\n      'Only ERC721 Orders are currently supported for matching. Please ensure both the sellOrder and buyOrder are ERC721 orders'\n    );\n  };\n\n  getMakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\n    // Buy NFT - So maker asset is an ERC20\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\n      return {\n        tokenAddress: order.erc20Token,\n        amount: order.erc20TokenAmount.toString(10),\n        type: 'ERC20' as const,\n      };\n    } else if (\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\n    ) {\n      // Sell NFT - So maker asset is an NFT (either ERC721 or ERC1155)\n      if ('erc721Token' in order) {\n        return {\n          tokenAddress: order.erc721Token,\n          tokenId: order.erc721TokenId.toString(10),\n          type: 'ERC721' as const,\n        };\n      } else if ('erc1155Token' in order) {\n        return {\n          tokenAddress: order.erc1155Token,\n          tokenId: order.erc1155TokenId.toString(10),\n          amount: order.erc1155TokenAmount.toString(10),\n          type: 'ERC1155' as const,\n        };\n      }\n    }\n    throw new Error(`Unknown order direction ${order.direction}`);\n  };\n\n  getTakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\n    // Buy NFT - So taker asset is an NFT [ERC721 or ERC1155] (because the taker is the NFT owner 'accepting' a buy order)\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\n      if ('erc721Token' in order) {\n        return {\n          tokenAddress: order.erc721Token,\n          tokenId: order.erc721TokenId.toString(10),\n          type: 'ERC721' as const,\n        };\n      } else if ('erc1155Token' in order) {\n        return {\n          tokenAddress: order.erc1155Token,\n          tokenId: order.erc1155TokenId.toString(10),\n          amount: order.erc1155TokenAmount.toString(10),\n          type: 'ERC1155' as const,\n        };\n      }\n    } else if (\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\n    ) {\n      // Sell NFT - So taker asset is an ERC20 -- because the taker here is 'buying' the sell NFT order\n      return {\n        tokenAddress: order.erc20Token,\n        amount: order.erc20TokenAmount.toString(10),\n        type: 'ERC20' as const,\n      };\n    }\n    throw new Error(`Unknown order direction ${order.direction}`);\n  };\n\n  /**\n   * Validate an order signature given a signed order\n   * Throws if invalid\n   * @param signedOrder A 0x v4 signed order to validate signature for\n   * @returns\n   */\n  validateSignature = async (\n    signedOrder: SignedNftOrderV4\n  ): Promise<boolean> => {\n    if ('erc721Token' in signedOrder) {\n      // Validate functions on-chain return void if successful\n      await this.exchangeProxy.validateERC721OrderSignature(\n        signedOrder,\n        signedOrder.signature\n      );\n      return true;\n    } else if ('erc1155Token' in signedOrder) {\n      // Validate functions on-chain return void if successful\n      await this.exchangeProxy.validateERC1155OrderSignature(\n        signedOrder,\n        signedOrder.signature\n      );\n      return true;\n    } else {\n      throw new Error('Unknown order type (not ERC721 or ERC1155)');\n    }\n  };\n\n  /**\n   * Fetches the balance of an asset for a given wallet address\n   * @param asset A Tradeable asset -- An ERC20, ERC721, or ERC1155\n   * @param walletAddress A wallet address ('0x1234...6789')\n   * @param provider Optional, defaults to the class's provider but can be overridden\n   * @returns A BigNumber balance (e.g. 1 or 0 for ERC721s. ERC20 and ERC1155s can have balances greater than 1)\n   */\n  fetchBalanceForAsset = async (\n    asset: SwappableAssetV4,\n    walletAddress: string,\n    provider: BaseProvider = this.provider\n  ): Promise<BigNumber> => {\n    switch (asset.type) {\n      case 'ERC20':\n        const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\n        return erc20.balanceOf(walletAddress);\n      case 'ERC721':\n        const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\n        const owner = await erc721.ownerOf(asset.tokenId);\n        if (owner.toLowerCase() === walletAddress.toLowerCase()) {\n          return BigNumber.from(1);\n        }\n        return BigNumber.from(0);\n      case 'ERC1155':\n        const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\n        return erc1155.balanceOf(walletAddress, asset.tokenId);\n      default:\n        throw new Error(`Asset type unknown ${(asset as any).type}`);\n    }\n  };\n\n  // TODO(johnrjj) Consolidate w/ checkOrderCanBeFilledMakerSide\n  checkOrderCanBeFilledTakerSide = async (\n    order: NftOrderV4,\n    takerWalletAddress: string\n  ) => {\n    const takerAsset = this.getTakerAsset(order);\n    const takerApprovalStatus = await this.loadApprovalStatus(\n      takerAsset,\n      takerWalletAddress\n    );\n    const takerBalance = await this.fetchBalanceForAsset(\n      this.getTakerAsset(order),\n      takerWalletAddress\n    );\n\n    const hasBalance: boolean = takerBalance.gte(\n      (takerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\n    );\n\n    const isApproved: boolean =\n      takerApprovalStatus.contractApproved ||\n      takerApprovalStatus.tokenIdApproved ||\n      false;\n\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\n\n    return {\n      approvalStatus: takerApprovalStatus,\n      balance: takerBalance.toString(),\n      isApproved,\n      hasBalance,\n      canOrderBeFilled,\n    };\n  };\n\n  checkOrderCanBeFilledMakerSide = async (\n    order: NftOrderV4\n    // override?: Partial<VerifyOrderOptionsOverrides>\n  ) => {\n    const makerAddress = order.maker;\n    const makerAsset = this.getMakerAsset(order);\n    const makerApprovalStatus = await this.loadApprovalStatus(\n      makerAsset,\n      makerAddress\n    );\n    const makerBalance = await this.fetchBalanceForAsset(\n      this.getMakerAsset(order),\n      makerAddress\n    );\n\n    const hasBalance: boolean = makerBalance.gte(\n      (makerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\n    );\n    const isApproved: boolean =\n      makerApprovalStatus.tokenIdApproved ||\n      makerApprovalStatus.contractApproved ||\n      false;\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\n\n    return {\n      approvalStatus: makerApprovalStatus,\n      balance: makerBalance.toString(),\n      isApproved,\n      hasBalance,\n      canOrderBeFilled,\n    };\n  };\n\n  /**\n   * Convenience function to sum all fees. Total fees denominated in erc20 token amount.\n   * @param order A 0x v4 order (signed or un-signed);\n   * @returns Total summed fees for a 0x v4 order. Amount is represented in Erc20 token units.\n   */\n  getTotalFees = (order: NftOrderV4): BigNumber => {\n    const fees = order.fees;\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\n    let feesTotal = ZERO_AMOUNT;\n    fees.forEach((fee) => {\n      feesTotal = feesTotal.add(BigNumber.from(fee.amount));\n    });\n    return feesTotal;\n  };\n\n  /**\n   * Calculates total order cost.\n   * In 0x v4, fees are additive (i.e. they are not deducted from the order amount, but added on top of)\n   * @param order A 0x v4 order;\n   * @returns Total cost of an order (base amount + fees). Amount is represented in Erc20 token units. Does not include gas costs.\n   */\n  getErc20TotalIncludingFees = (order: NftOrderV4): BigNumber => {\n    const fees = order.fees;\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\n    let feesTotal = this.getTotalFees(order);\n    const orderTotalCost = BigNumber.from(order.erc20TokenAmount).add(\n      feesTotal\n    );\n    return orderTotalCost;\n  };\n}\n\nexport { NftSwapV4 };\n","import { NULL_ADDRESS } from '../../utils/eth';\nimport { PropertyStruct } from './types';\n\n/**\n * Contract-based orders property validator.\n * Add this to your order's tokenProperties to make it a collection order\n */\nexport const CONTRACT_ORDER_VALIDATOR: PropertyStruct = {\n  propertyValidator: NULL_ADDRESS,\n  propertyData: [],\n};\n","import { SupportedChainIdsV4 } from '../sdk';\nimport defaultAddresses from '../sdk/v4/addresses.json';\n\nexport const getWrappedNativeToken = (\n  chainId: number | string\n): string | null => {\n  const chainIdString = chainId.toString(10);\n  const zeroExAddresses:\n    | { exchange: string; wrappedNativeToken: string }\n    | undefined =\n    defaultAddresses[chainIdString as unknown as SupportedChainIdsV4];\n  return zeroExAddresses?.wrappedNativeToken ?? null;\n};\n"],"names":["AssetProxyId","SupportedChainIdsV3","OrderStatusV3","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","ZERO_AMOUNT","BigNumber","from","NULL_ADDRESS","SupportedTokenTypes","OrderStatusCodeLookup","ORDER_BUILDER_ERROR_CODES","RevertReason","EIP712_TYPES","Order","INFINITE_TIMESTAMP_SEC","getEipDomain","chainId","exchangeContractAddress","version","toString","verifyingContract","normalizeOrder","order","makerAddress","toLowerCase","takerAddress","feeRecipientAddress","senderAddress","makerAssetAmount","takerAssetAmount","makerFee","takerFee","expirationTimeSeconds","salt","makerAssetData","takerAssetData","makerFeeAssetData","takerFeeAssetData","signature","_order$signature","generateTimeBasedSalt","getUnixTime","Date","ModuleError","message","options","code","_this","String","expected","cause","captureStackTrace","UnexpectedAssetTypeError","assetType","UnsupportedChainId","convertStringToBN","s","convertCollectionToBN","arr","map","encodeErc20AssetData","tokenAddress","hexConcat","ERC20","defaultAbiCoder","encode","decodeErc20AssetData","encodedAssetData","hexDataLength","assetProxyId","hexDataSlice","rest","decode","encodeErc721AssetData","tokenId","ERC721","decodeErc721AssetData","data","encodeErc1155AssetData","tokenIds","callbackData","ERC1155","decodeErc1155AssetData","id","tokenValues","val","encodeMultiAssetAssetData","nestedAssetData","MultiAsset","decodeMultiAssetData","nestedAssetDatas","amounts","decodeAssetData","encodeAssetData","assetData","erc1155EncodingForMultiAssetOrder","tokens","x","_","tokenValue","getAmountFromAsset","amount","_assetData$tokens$","convertAssetToInternalFormat","swappable","convertAssetsToInternalFormat","assets","_abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","components","ExchangeContract__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","Forwarder__factory","IZeroEx__factory","ERC1155__factory","ERC20__factory","ERC721__factory","EIP1271ZeroExDataAbi","cancelOrder","exchangeContract","getOrderInfo","getOrderStatus","orderStatus","hashOrder","EIP712_DOMAIN","_TypedDataEncoder","hash","signOrderWithEip1271","signer","types","typedData","domain","orderHash","msg","encodeFunctionData","signMessage","arrayify","signOrderWithEoaWallet","_signTypedData","checkIfContractWallet","provider","walletAddress","isContractWallet","getCode","walletCode","_isSequenceProvider","providerToUse","isWalletConnect","connector","_peerMeta","description","signOrder","signerAddress","signingOptions","signatureType","autodetectSignatureType","prepareOrderSignatureFromEoaWallet","rawEip1271Signature","prepareOrderSignatureFromContractWallet","signedOrder","console","log","rawSignature","splitSignature","hexlify","v","r","verifyOrderSignature","maker","slicedSigV","slicedSig","derivedSignatureHex","derivedSignature","joinSignature","verifyTypedData","e","buildOrder","makerAssets","takerAssets","orderConfig","makerAsset","makerAssetAmounts","ma","makerAssetDatas","takerAsset","takerAssetAmounts","ta","takerAssetDatas","expiration","generateOrderFromAssetDatas","exchangeAddress","fillSignedOrder","overrides","fillOrKillOrder","getApprovalStatus","exchangeProxyAddressForAsset","asset","erc20","allowance","erc20AllowanceBigNumber","MAX_APPROVAL_WITH_BUFFER","MAX_APPROVAL","sub","approvedForMax","gte","contractApproved","erc721","erc721ApprovalForAllPromise","isApprovedForAll","erc721ApprovedAddressForIdPromise","getApproved","all","erc721ApprovalForAll","tokenIdApproved","erc1155","erc1155ApprovalForAll","pow","approveAsset","approve","erc20ApprovalTxPromise","setApprovalForAll","estimateGasForApproval","estimateGas","estimateGasForFillOrder","_overrides","fillOrder","convertDecodedAssetDataToUserFacingAssets","decodedAssetData","assetAmount","multiAssetDecodedData","flatten","idx","nestedAsset","getAssetsFromOrder","decodedMakerAssetData","decodedTakerAssetData","getZeroExAddressesForChain","addresses","defaultAddresses","getProxyAddressForErcType","zeroExAddresses","erc20Proxy","erc721Proxy","erc1155Proxy","DEFAUTLT_GAS_BUFFER_MULTIPLES","Polygon","PolygonMumbai","Kovan","sleep","t","timeout","setTimeout","clearTimeout","NftSwapV3","additionalConfig","_cancelOrder","timeoutInMs","pollOrderStatusFrequencyInMs","throwIfStatusOtherThanFillableOrFilled","settled","timeoutPromise","orderStatusRefreshPromiseFn","orderInfo","Fillable","FullyFilled","fillEventListenerFn","orderStatusRefreshPromiseLoop","fillEventPromise","any","_getOrderInfo","txHash","waitForTransaction","addressOfWalletSigningOrder","signerOverride","signerToUser","_signOrder","userConfig","config","_buildOrder","assetInternalFmt","_getApprovalStatus","_hashOrder","_getAssetsFromOrder","wrappedNativeTokenContractAddress","erc20TokenAddress","invariant","_wrappedNativeTokenCo","fillOverrides","transactionOverrides","gasBufferMultiple","gasAmountBufferMultiple","getGasMultipleForChainId","_estimateGasForFillOrder","maybeCustomGasLimit","Math","floor","toNumber","allTxOverrides","gasLimit","fillOrderWithNativeTokenInsteadOfWrappedToken","checkIfOrderCanBeFilledWithNativeToken","forwarderContractAddress","forwarderContract","marketBuyOrdersWithEth","_fillSignedOrder","gasBufferMultiples","_normalizeOrder","_verifyOrderSignature","_network","chainDefaultContractAddresses","zeroExExchangeContractAddress","exchange","erc20ProxyContractAddress","erc721ProxyContractAddress","erc1155ProxyContractAddress","forwarder","getForwarderAddress","wrappedNativeToken","getWrappedNativeToken","approveTokenOrNftByAsset","_walletAddress","approvalTransactionOverrides","otherOverrides","exchangeProxyContractAddressForAsset","signerToUse","_estimateGasForApproval","_approveAsset","ERC721ORDER_STRUCT_ABI","ERC1155ORDER_STRUCT_ABI","FEE_ABI","PROPERTY_ABI","ETH_ADDRESS_AS_ERC20","erc1155Token","Fee","Property","erc721Token","txOverrides","approvalOrderrides","approvalOnlyTokenIdIfErc721","erc721ApprovalForOnlyTokenId","parseRawSignature","hexSize","VALID_V_VALUES","parseInt","includes","TradeDirection","OrderStatusV4","INFINITE_EXPIRATION_TIMESTAMP_SEC","RESERVED_APP_ID_PREFIX_DIGITS","verifyAppIdOrThrow","appId","isCorrectLength","hasOnlyNumbers","test","generateRandomV4OrderNonce","order128","padStart","generateRandom128BitNumber","final256BitNonce","padEnd","base","hex","v4","replace","BigInt","serializeNftOrder","direction","expiry","nonce","erc20TokenAmount","fees","fee","feeData","erc721TokenId","erc1155TokenAmount","erc1155TokenId","ERC721_TRANSFER_FROM_DATA","ERC1155_TRANSFER_FROM_DATA","postOrderToOrderbook","metadata","requestOptions","fetchFn","unfetch","payload","rootUrl","headers","body","JSON","stringify","res","ok","json","status","searchOrderbook","filters","stringifiedQueryParams","arrayFormat","SupportedChainIdsV4","DIRECTION_MAPPING","BuyNFT","SellNFT","CONTRACT_ORDER_VALIDATOR","propertyValidator","propertyData","SupportedChainsForV4OrderbookStatusMonitoring","Mainnet","Optimism","Goerli","NftSwapV4","approvalOverrides","exchangeProxy","orderType","cancelERC721Order","cancelERC1155Order","signedOrders","revertIfIncomplete","every","allErc721","allErc1155","erc721SignedOrders","batchBuyERC721s","so","erc1155SignedOrders","batchBuyERC1155s","getERC721OrderHash","getERC1155OrderHash","getERC721OrderStatus","getERC1155OrderInfo","signedToUse","chainIdString","erc20ToSell","nftCollectionToBid","buildNftAndErc20Order","tokenProperties","nft","sellOrBuyNft","orderData","erc20Token","erc721TokenProperties","_orderData$tokenPrope2","property","_orderData$fees","recipient","_x$feeData","_orderData$nonce","taker","_orderData$taker","generateErc721Order","erc1155TokenProperties","_orderData$tokenPrope4","_orderData$fees2","_fee$feeData","_orderData$nonce2","_orderData$taker2","generateErc1155Order","ecSignature","fillOrderOverrides","getAddress","unwrapWeth","erc721Contract","encodingIface","fragment","getFunction","_encodeParams","tokenIdToSellForCollectionOrder","erc1155Contract","safeTransferFrom","canOrderTypeBeFilledWithNativeToken","isNativeToken","isErc20NativeToken","needsEthAttached","erc20TotalAmount","getErc20TotalIncludingFees","buyERC1155","unwrapNativeToken","sellERC1155","buyERC721","sellERC721","parsedChainId","orderbookRootUrl","sellOrder","buyOrder","matchERC721Orders","validateERC721OrderSignature","validateERC1155OrderSignature","balanceOf","ownerOf","takerWalletAddress","getTakerAsset","loadApprovalStatus","takerApprovalStatus","fetchBalanceForAsset","hasBalance","takerBalance","isApproved","canOrderBeFilled","approvalStatus","balance","getMakerAsset","makerApprovalStatus","makerBalance","feesTotal","add","getTotalFees","defaultAddressesForChain","zeroExExchangeProxyContractAddress","exchangeProxyContractAddress","orders","batchCancelOrders","unixTimestampAsSalt","cancelOrdersUpTo"],"mappings":"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vD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,0BACNvD,KAAM,YAGVoM,aAAc,gDACd7I,KAAM,0BACNvD,KAAM,UAGVqM,SAAS,EACTC,gBAAiB,UACjBtM,KAAM,YAER,CACEyM,UAAU,EACVN,OAAQ,CACN,CACEQ,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,0BACd7I,KAAM,aACNvD,KAAM,WAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd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d7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,YACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,aACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,gBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,UAGVuD,KAAM,cACNmJ,QAAS,CACP,CACEC,WAAY,CACV,CACEA,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,kBACNvD,KAAM,YAGVoM,aAAc,oCACd7I,KAAM,OACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,kBACNvD,KAAM,YAGVoM,aAAc,oCACd7I,KAAM,QACNvD,KAAM,SAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,0BACNvD,KAAM,YAGVoM,aAAc,2CACd7I,KAAM,qBACNvD,KAAM,UAGVqM,SAAS,EACTC,gBAAiB,UACjBtM,KAAM,YAER,CACEyM,UAAU,EACVN,OAAQ,CACN,CACEQ,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,YACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,aACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,gBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,UAGVuD,KAAM,6BACNmJ,QAAS,CACP,CACEC,WAAY,CACV,CACEA,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,kBACNvD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"}